import material/material_manager;
import material/material_ui;
import maybe;
import oauth/oauth_types;
import oauth/oauth_util;

export {
	// Message if user tried to start RemoteServer but has no permissions to use it
	showHasNoRoleMessage(manager : MaterialManager, callback : () -> void) -> void;
	// Message if any critical table exists in the `Dirty` tables list
	showCriticalTablesMessage(manager : MaterialManager, stayHere : () -> void, goToProdM : Maybe<() -> void>) -> void;
	// Message if user tried to execute the request to the `Dirty` table
	showAttentionMessage(manager : MaterialManager, isUnknown : bool, stayHere : () -> void, goToProdM : Maybe<() -> void>) -> void;
	// Notations, used in the request logs table
	showNotations(manager : MaterialManager) -> void;
}

showHasNoRoleMessage(manager : MaterialManager, callback : () -> void) -> void {
	closeDialog = make(false);
	text1 = _("You have no permission to use remote server in split or demo mode.");
	text2 = _("The application will be switched to use current server only.");
	text3 = _("Contact your Administrator.");

	// Show the same message in the console
	println(text1);

	view = MLines([
		MText("REMOTE SERVER DISABLED", [MHeadline(), manager.theme.primaryColor]),
		TFixed(0., 24.),
		MText(text1 + "\n" + text2 + "\n\n" + text3, [MSubheading()])
	]);

	button = MTextButton(_("GOT IT"), \-> {
			next(closeDialog, true);
			callback();
		}, [MButtonRaised()], [MShortcut("enter")]
	);

	ShowMDialog(manager, closeDialog, [MDialogUseFrame(), MDialogActions([button])], view);
}

showCriticalTablesMessage(manager : MaterialManager, stayHere : () -> void, goToProdM : Maybe<() -> void>) -> void {
	closeDialog = make(false);
	text1 = _("A couple of tables in the application marked as a `Critical` (should be used on remote server only).");
	text2 = _("But one or more of those tables also marked as `Dirty` or `Grey` (should be used on the current server only).");
	text3 = _("So, during your work some important data might be lost.");
	text4 = _("If you are planning to do some productive work, you should switch to the production version.");
	text5 = _("Otherwise you can continue your work here.");
			
	// Show the same message in the console
	println(text1 + "\n" + text2 + "\n" + text3);

	view = MAvailable(
		MLines([
			MText("IMPORTANT DATA MIGHT BE LOST!", [MHeadline(), manager.theme.primaryColor]),
			TFixed(0., 24.),
			MParagraph(text1 + " " + text2 + "\n" + text3, [MSubheading()]),
			TFixed(0., 12.),
			MParagraph(text4 + " " + text5, [MSubheading()]),
			TFixed(0., 24.),
			MCols([
				TFillX(),
				MTextButton(_("I'M COOL - THE DATA CAN BE LOST"), \-> {
						next(closeDialog, true);
						stayHere();
					}, [], [MShortcut("esc")]
				),
				TFillX(),
				TFixed(8., 0.),
				MTextButton(_("OH LORD - TAKE ME TO PRODUCTION"), \-> {
						next(closeDialog, true);
						maybeApply(goToProdM, \fn -> fn());
					}, [], [MShortcut("enter"), MEnabled(const(isSome(goToProdM)))]
				)
			]),
		]),
		TFixed(400., 0.)
	);

	ShowMDialog(manager, closeDialog, [MDialogUseFrame()], view);
}

showAttentionMessage(manager : MaterialManager, isUnknown : bool, stayHere : () -> void, goToProdM : Maybe<() -> void>) -> void {
	rsOptionName = "remote_server_" + getMOAuthInnerState().rememberName + "_hide_attention";
	rsOption = getKeyValue(rsOptionName, "");

	if (rsOption == "1") {
		stayHere();
	} else {
		closeDialog = make(false);
		optionB = make(false);
		text = _("The data that is sent to the server now is going to a temporary database.") + "\n" + 
			_("This database will be erased tomorrow morning.") + "\n\n" +
			_("If you tried to do some productive work, you should switch to the production version instead and unfortunately, you may have to redo some work.") + "\n\n" +  
			_("If you are testing new functionality, then you can continue.") + "\n" + 
			_("The sad smiley in the main window counts the number of these occurrences.");

		view = MAvailable(
			MLines([
				MText("YOUR DATA DOES NOT HAVE ANY FUTURE!", [MHeadline(), manager.theme.primaryColor]),
				TFixed(0., 24.),
				MParagraph(text, [MSubheading()]),
				TFixed(0., 12.),
				MCheckBox(MText(_("I got it. Don't ask again in this session."), []), optionB, []),
				TFixed(0., 12.),
				MCols([
					TFillX(),
					MTextButton(_("I'M COOL - THE DATA CAN BE THRASHED TOMORROW"), \-> {
							next(closeDialog, true);
							setKeyValue(rsOptionName, i2s(b2i(getValue(optionB))));
							stayHere();
						}, [], [MShortcut("esc")]
					),
					TFillX(),
					TFixed(8., 0.),
					MTextButton(_("OH LORD - TAKE ME TO PRODUCTION"), \-> {
							next(closeDialog, true);
							maybeApply(goToProdM, \fn -> fn());
						}, [], [MShortcut("enter"), MEnabled(const(isSome(goToProdM)))]
					)
				]),

			]),
			TFixed(400., 0.)
		);

		ShowMDialog(manager, closeDialog, [MDialogUseFrame()], view);
	}
}

showNotations(manager : MaterialManager) -> void {
	getNotationItem1 = \iconName, text, iconColor -> {
		MBaselineCols([
			TFixed(8., 0.),
			MIcon(iconName, [iconColor, MIconSize(18.)]),
			TFixed(8., 0.),
			MText(text, [MBody()]),
		]);
	}

	getNotationItem2 = \iconColor, text -> {
		MBaselineCols([
			TFixed(8., 0.),
			MOffset(0., 4., MFrame(0., 2., [MFill(iconColor)], TFixed(18., 18.))),
			TFixed(8., 0.),
			MText(text, [MBody()]),
		]);
	}

	closeDialog = make(false);
	ShowMDialog(manager, closeDialog,
		[
			MDialogTitle(_("Notations")),
			MDialogUseFrame(),
			MDialogClickOutToClose(),
			MDialogActions([MTextButton(_("CLEAR"), \-> next(closeDialog, true), [MButtonRaised()], [MShortcut("esc")])])
		],
		MLines([
			MParagraph(_("All tables, which are used in the application, are classified on three classes:"), [MWidth(-1.)]),
			TFixed(0., 8.),
			getNotationItem1("wb_sunny", _("`Clean` - SQL table schemas on current and remote servers are the same;"), MRed(400)),
			TFixed(0., 12.),
			getNotationItem1("flash_on", _("`Dirty` - SQL table schemas on current and remote servers are the different;"), MRed(400)),
			TFixed(0., 12.),
			getNotationItem1("cloud", _("`Grey` - SQL tables are `Clean`, but was used in the one request together with `Dirty` tables."), MRed(400)),

			TFixed(0., 24.),

			MParagraph(_("Also, tables might be marked with additional icons:"), [MWidth(-1.)]),
			TFixed(0., 8.),
			getNotationItem1("star", _("`Critical` - the table contains important data and all requests should go only on remote server."), MRed(400)),

			TFixed(0., 24.),
			
			MParagraph(_("Color of the icon also has a meaning:"), [MWidth(-1.)]),
			getNotationItem2(MGrey(500), _("- there were no requests to the table;")),
			TFixed(0., 8.),
			getNotationItem2(MOrange(500), _("- we only read data from the table on the current server (instead of remote server);")),
			TFixed(0., 8.),
			getNotationItem2(MRed(400), _("- there were requests to save data to the table and we did it on the current server (instead of remote server).")),
			TFixed(0., 8.),
			MBaselineCols([
				TFixed(40., 0.),
				MText(_("This data might be lost on the next update."), [MBody()])
			]),
			TFixed(0., 8.),
			getNotationItem2(MPink(200), _("- there were requests to the table, but we can't decide which kind of operation used (read or write).")),
		])
	);
}