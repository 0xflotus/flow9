import ui/animate/easing;
import tropic/tropic;

export {
	// creates animation on each change of 'trigger' value
	// first calls beforeEach
	// if 'beforeEach' returns None, animation won't start
	// if 'beforeEach' returns Some('context'), the 'percent' will be repeatedly called
	// with arguments 'context' and current animation percent
	// 'afterLast' is called on end of animation (if there is no new animation running)
	TEasingAnimation(deltaTimer : LazyDeltaTimer, duration : double, bezier : CubicBezierEasing, trigger : Behaviour<?>, beforeEach : (?) -> Maybe<??>, afterLast : (??) -> void, percent : (??, double) -> void, t : Tropic) -> Tropic;
}

TEasingAnimation(deltaTimer : LazyDeltaTimer, duration : double, bezier : CubicBezierEasing, trigger : Behaviour<?>, beforeEach : (?) -> Maybe<??>, afterLast : (??) -> void, percent : (??, double) -> void, t : Tropic) -> Tropic {
	animNumber = make(0);
	animDispose = ref nop;
	TConstruct(
		[
			\ -> \ -> {
				^animDispose();
				animDispose := nop;
			},
			\ -> {
				subscribe2(trigger, \tv -> {
					^animDispose();

					switch(beforeEach(tv)) {
						None(): {
							animDispose := nop;
						}
						Some(context): {
							animnum = getValue(animNumber) + 1;
							next(animNumber, animnum);

							e = makeEasing(duration, bezier, deltaTimer, \ -> {
								if (getValue(animNumber) == animnum) afterLast(context)
							});
							animDispose := subscribe(e.percent, \p -> percent(context, p));
							e.start();
						}
					}
				})
			}
		],
		t
	)
}