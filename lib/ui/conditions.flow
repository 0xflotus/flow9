import form/form;
import behaviour;
import math/math;
import form/renderform;

export {
	CheckSkinConditions(conditions : SkinCondition, environment : SkinEnvironment) -> bool;
	SkinCondition ::= SkinAnd, SkinOr, SkinNot, ScreenParameterInRange, SkinTrue, SkinFalse, ScreenTabletAndLarger, ScreenConditionCustom;
		SkinTrue : ();
		ScreenTabletAndLarger : ();
		ScreenConditionCustom : (check : (SkinEnvironment) -> bool);
		/*The ones below seems to be unused for several years since implementation.*/
		//[TODO: Delete after check]
		ScreenParameterInRange : (parameter : ScreenParameter, minimum : double, maximum : double);
		SkinAnd : (cs : [SkinCondition]);
		SkinOr : (cs : [SkinCondition]);
		SkinNot : (c : SkinCondition);
		SkinFalse : ();

	ScreenParameter ::= ScreenWidth, ScreenHeight, ScreenDPI, ScreenAspectRatio;
		ScreenWidth : ();
		ScreenHeight : ();
		ScreenAspectRatio : ();
		ScreenDPI : ();

	// This struct describes environment for skin to be rendered in
	SkinEnvironment : (awh : Behaviour<WidthHeight>, dpi : int);
}

CheckSkinConditions(conditions : SkinCondition, environment : SkinEnvironment) -> bool {
	awh = getValue(environment.awh);
	dpi = environment.dpi |> i2d;
	getParameterValue = \param -> {
		switch(param : ScreenParameter) {
			ScreenWidth(): {
				awh.width
			}
			ScreenHeight(): {
				awh.height
			}
			ScreenAspectRatio(): {
				if (awh.height > 0.0) {
					awh.width / awh.height
				} else {
				 	doubleMax
				}
			}
			ScreenDPI(): {
				dpi
			}
		}
	}

	checkConditions = \cs -> CheckSkinConditions(cs, environment);

	switch (conditions : SkinCondition) {
		SkinTrue(): {
			true
		}
		ScreenTabletAndLarger(): {
			!isPhoneScreen()
		}
		ScreenConditionCustom(check): {
			check(environment)
		}
		SkinFalse(): {
			false
		}
		SkinAnd(cs): {
			forall(cs, checkConditions)
		}
		SkinOr(cs): {
			exists(cs, checkConditions)
		}
		SkinNot(c): {
			!checkConditions(c)
		}
		ScreenParameterInRange(parameter, minVal, maxVal): {
			val = getParameterValue(parameter);
			minVal <= val && val <= maxVal
		}
	}
}

