import form/graphics;

import timeline;

export {
	SpinnerActivityIndicator(radius : double, color : int) -> Form;
	GearActivityIndicator(radius : double, color : int) -> Form;
}

SpinnerActivityIndicator(radius : double, color : int) {
	item_width = radius * 0.66;
	item_height = item_width / 5.0;
	item = Translate(const(radius - item_width), const(-item_height / 2.0),
		Graphics(roundedRect(item_width, item_height, item_height / 4.0), [Fill(color)])
	);

	barsCount = 12;
	alphas = generate(0, barsCount, \i -> make(0.0));

	connectSpinnerLine = \spinTimer -> \index : int, alpha : DynamicBehaviour<double> -> {
		connectSelectu(
			spinTimer.ticker,
			alpha,
			\t -> 1.0 - i2d(mod(index + floor(t / 100.0), 12)) / i2d(barsCount - 1)
		)
	};

	Constructor(
		Size2(const(WidthHeight(2.0 * radius, 2.0 * radius)),
			Translate(const(radius), const(radius),
				Group(
					mapi(alphas, \i, alpha ->
						Alpha(alpha,  Rotate(const(i2d(i) * 30.0), item))
					)
				)
			)
		),
		\ -> {
			tl = getTimeline(10);
			tl.start();
			uns = mapi(alphas, connectSpinnerLine(tl));
			\ -> {
				applyall(uns);
				tl.stop();
			}
		}
	);
}

GearActivityIndicator(radius : double, color : int) {
	item_width = radius * 0.66;
	item_height = item_width / 3.0;
	item = Translate(const(radius * 0.33), const(-item_height / 2.0), Graphics(roundedRect(item_width, item_height, item_height / 4.0), [Fill(color)]));
	tl = getTimeline(20);

	gear = \delta, direct, shift -> Translate(const(delta), const(delta),
			Group([
				Rotate(select(tl.ticker, \t -> direct * t / 1000.0 * 30.0 ), 
					Group(map(enumFromTo(0, 11), \i -> Rotate(const(i2d(i) * 30.0 + shift), item)))
				),
				Circle(0.0, 0.0, radius * 0.75 ,  [Fill(color)]),
				Circle(0.0, 0.0, radius * 0.2 ,  [Fill(0xFFFFFF)]),
			])
		);

	Constructor(
		Group([gear(radius, 1.0, 0.0), gear(radius * 2.28, -1.0, 15.0)]), 
		\ -> { tl.start(); \ -> tl.stop() }
	);

}