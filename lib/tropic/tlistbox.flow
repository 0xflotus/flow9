import tropic/trawbutton;
import tropic/tropic_gui;
import tropic/tropic_colors;

export {
	// Scrollable that uses element index as scroll position
	TListBox(list : [Tropic], topmost : DynamicBehaviour<int>, maxbox : Tropic, scrollStyle : ScrollableStyle, style : [TListBoxStyle]) -> Tropic;
		TListBoxStyle ::= ScrollOnlyInvisible, TAnimate, TButtonize, TColor;
			ScrollOnlyInvisible();
			// Lift each entry to be a button that sets this item to the index. -1 is none selected
			TButtonize(selected : DynamicBehaviour<int>);
}

TListBox(list0 : [Tropic], topmost : DynamicBehaviour<int>, maxbox : Tropic, scrollStyle : ScrollableStyle, style : [TListBoxStyle]) -> Tropic {
	// See if we should buttonize this list
	defBut = TButtonize(make(-1));
	buttonize : TButtonize = extractStruct(style, defBut);

	color = fold(style, TYellow(), \acc : TColor, s : TListBoxStyle -> {
		switch (s) {
			ScrollOnlyInvisible(): acc;
			TButtonize(__): acc;
			TAnimate(__, __): acc;

			TWhite(): s;
			TBlack(): s;
			TRed(): s;
			TYellow(): s;
			TBlue(): s;
			TGreen(): s;
			TGrey(): s;
			TLightGrey(): s;
			TDarkGrey(): s;
			TCustomColor(__, __, __, __, __): s;
		}
	});

	list = if (buttonize == defBut) list0 else {

		width = TWidth(maxbox);

		mapi(list0, \i, item -> {
			fn = \s -> {
				TGroup2(
					TRectangle([s], 
						TGroup2(
							width,
							THeight(item),
						)
					),
					item
				)
			}
			TRawButton(
				TIf(feq(buttonize.selected, i), 
					fn(Fill(tcolorPressed(color))),
					// Transparent, but make the entire line clickable
					fn(FillOpacity(0.0))
				),
				fn(Fill(tcolorHover(color))),
				fn(Fill(tcolorPressed(color))),
				TEmpty(),
				"",
				[],
				OnClick(\ -> {
					nextDistinct(buttonize.selected, i)
				})
			)
		});
	}


	listPairs = mapi(list, \i, item -> Pair("__tlistbox" + i2s(i), item));
	content = TLines(map(listPairs, \listPair -> TDisplay(listPair.first)));

	offset = make(TEmpty());

	tanimate = extractStruct(style, TAnimate(0.0, 0.0));
	scrollState = if (tanimate == TAnimate(0.0, 0.0)) [TScrollOffset(offset)]
	else [TScrollOffset(offset), tanimate];

	scroll = TConstruct(
		[\ -> subscribe(topmost, \i -> {
			nextDistinct(offset, 
				if (i < 0) TEmpty()
				else TLines(map(subrange(listPairs, 0, i), \pair -> TGhost(pair.first)))
			)
		})],
		TScrollable(content, maxbox, scrollStyle, scrollState)
	);
	TNamespace(TLetMany(listPairs, scroll))
}
