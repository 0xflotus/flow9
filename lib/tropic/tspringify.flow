import ui/animate/spring;
import tropic/tropic;
import tropic/tropic_manager;

export {
	// Takes some tropic with a transformation and binds the animation to a spring
	//   point = make(Point(0.0, 0.0));
	//   tropic = TTranslate(point, sprite);
	//   springified = TSpringify(20.0, 10.0, tropic);
	//   trender(springified, []); // Now all movements in point will be bound to springs
	//   next(point, Point(200.0, 200.0));
	TSpringify(manager : TManager, tension : double, friction : double, tropic : AnimatableTropic) -> Tropic;
		AnimatableTropic ::= TScale, TRotate, TTranslate;
}

TSpringify(manager : TManager, tension : double, friction : double, tropic : AnimatableTropic) -> Tropic {
	switch (tropic) {
		TTranslate(point, t): {
			tx = fselect(point, FLift(\p -> p.x));
			ty = fselect(point, FLift(\p -> p.y));

			s1 = tspringWrap(manager, tension, friction, tx);
			s2 = tspringWrap(manager, tension, friction, ty);

			// TODO: Figure out how to use TConstruct here
			TDispose(
				concat3(
					s1.second,
					s2.second,
					[ \ -> { ^(s1.first.dispose)(); ^(s2.first.dispose)(); } ]
				),
				TTranslate(fselect2(s1.first.position, s2.first.position, FLift2(\x, y -> Point(x, y))), t)
			);
		}
		TScale(factor, t): {
			tx = fselect(factor, FLift(\p -> p.x));
			ty = fselect(factor, FLift(\p -> p.y));

			s1 = tspringWrap(manager, tension, friction, tx);
			s2 = tspringWrap(manager, tension, friction, ty);

			// TODO: Figure out how to use TConstruct here
			TDispose(
				concat3(
					s1.second,
					s2.second,
					[ \ -> { ^(s1.first.dispose)(); ^(s2.first.dispose)(); } ]
				),
				TScale(fselect2(s1.first.position, s2.first.position, FLift2(\x, y -> Factor(x, y))), t)
			);
		}
		TRotate(r, t): {
			s1 = tspringWrap(manager, tension, friction, r);
			// TODO: Figure out how to use TConstruct here
			TDispose(
				arrayPush(s1.second, \ -> { ^(s1.first.dispose)(); }),
				TRotate(s1.first.position, t)
			);
		}
	}
}

tspringWrap(manager : TManager, tension : double, friction : double, t : Transform<double>) -> Pair<Spring, [() -> void]> {
	b = fuse(t);
	
	Pair(
		makeSpring(tension, friction, 
			if (isConst(b.first)) { make(getValue(b.first)) } else cast(b.first : Behaviour -> DynamicBehaviour), 
			manager.deltaTimer, nop), 
		b.second
	);
}
