export {
	parseMedia2 : (content : string, mayReturnNotContent : bool) -> MediaContent;
	parseImageDecorated2(imageData : string) -> Maybe<ImageDecorated>;

	isWikiVideoExt(ext : string) -> bool;
}

import formats/wiki/wikiast;
import ui/imagedecoratedstructs;
import ui/playeroptions;

isWikiPictureExt(ext) {
	normExt = toLowerCase(ltrim2(ext, "."));
	exts = ["swf", "png", "jpg", "jpeg", "gif"];
	contains(exts, normExt)
}

parseMedia2 (content, mayReturnNotContent) {
	arguments = strSplit(content, "|");
	url = arguments[0] |> trim;
	options = subrange(arguments, 1, length(arguments) - 1)
		|> (\l -> map(l, \o -> o |> trim));

	urlExt = url |> getUrlExtension |> toLowerCase;
	isPicture = isWikiPictureExt(urlExt);

	if (isWikiVideoExt(urlExt)) { // video file
		videoOptions = fold(options, [], \opt : [PlayerOption], o -> {
			s = toLowerCase(o);
			if (s == "loopplayback") {
				arrayPush(opt, LoopPlayback())
			} else if (s == "noautoplay") {
				arrayPush(opt, NoAutoPlay())
			} else if (startsWith(s, "size:")) {
				sizes = strSplit(substring(s, 5, strlen(s)-5), "x");
				if (forall(sizes, \sz -> strlen(sz) >= 1 && isDigit(getCharAt(sz, 0))) && length(sizes) == 2) {
					arrayPush(opt, PlayerSize(i2d(s2i(sizes[0])), i2d(s2i(sizes[1]))))
				} else {
//					println("Syntax '" + s + "' is not supported for Video content, use 'size:320x240'");
					opt
				}
			} else if (startsWith(s, "start:")) {
				start = substring(s, 6, strlen(s) - 6) |> s2d;
				if (start > 0.0) {
					arrayPush(opt, StreamStartOffset(start))
				} else {
					opt
				}

			} else if (startsWith(s, "end:")) {
				end = substring(s, 4, strlen(s) - 4) |> s2d;
				if (end > 0.0) {
					arrayPush(opt, StreamEndOffset(end))
				} else {
					opt
				}

			} else if (startsWith(s, "cc:")) {
				arrayPush(opt, ClosedCaptions(strsubsmart(s, 3, 0)))
			} else {
				opt
			}
		});

		playerOptions = if (contains(videoOptions, LoopPlayback())) {
				[PauseResume(), FullScreenPlayer()]
			} else {
				[PauseResume(), VolumeControl(), Scrubber(), FullScreenPlayer()]
			};

		zoom = find(options, \s -> startsWith(toLowerCase(s), "size:"))
			|> (\mres -> eitherMap(mres, \res -> {
					sz = substring(res, 5, strlen(res)-5);
					if (endsWith(sz, "%")) {
						percent = i2d(s2i(strLeft(sz, strlen(sz)-1)))/100.0;
						Some(percent)
					} else {
						None()
					}
				},
				None()
			));
			VideoContent(url, videoOptions, playerOptions, zoom)
	} else if (urlExt == "mp3") { // sound file
		/* Version without player:
		play = loadSound(url);
		Constructor(Empty(), \ -> play([]))
		*/
		soundOptions = fold(options, [], \opt : [PlayerOption], o -> {
			s = toLowerCase(o);
			if (s == "loopplayback") {
				arrayPush(opt, LoopPlayback())
			} else if (s == "noautoplay") {
				arrayPush(opt, NoAutoPlay())
			} else if (startsWith(s, "cc:")) {
				arrayPush(opt, ClosedCaptions(strsubsmart(s, 3, 0)))
			} else if (startsWith(s, "ts:")) {
				arrayPush(opt, Transcriptions(const(strsubsmart(s, 3, 0))))
			} else if (startsWith(s, "width:")) {
				src = strsubsmart(s, 6, 0);
				width = max(50.0, min(s2d(src), 500.0));
				arrayPush(opt, PlayerSize(width, 0.0))
			} else {
				opt
			}
		});
		SoundContent(url, soundOptions)
	} else if (urlExt == "form") { // Formdesigner file
		zoom = eitherMap(
					find(options, \s -> startsWith(toLowerCase(s), "size:")),
					\res -> substring(res, 5, strlen(res)-5) |> parsePictureZoom,
					ZoomDescription(None(), zeroWH, None(), None(), false, false,  -1, \__ -> Empty())
		);

		mlast = if (length(options) > 0) Some(options[length(options)-1]) else None();
		title = eitherMap(mlast, \o ->  if (!startsWith(o, "size:")) Some(o) else None(), None());
		ExpressContent(url, title, zoom)
	} else if (startsWith(url, "http://") && !isPicture) { // external link
		captionText = if (length(options) > 0) Some(options[0]) else None();
		ExternalLink(url, captionText)
	} else { // picture
		if (!isPicture && mayReturnNotContent) {
			NotContent()
		} else {
			if (!isPicture) {
				println("Error: media link '" + url + "' doesn't look like picture, but I'll try it anyway...");
			}
			zoom = eitherMap(
						find(options, \s -> startsWith(toLowerCase(s), "size:")),
						\res -> substring(res, 5, strlen(res)-5) |> parsePictureZoom,
						ZoomDescription(None(), zeroWH, None(), None(), false, false, -1, \__ -> Empty())
			);

			mlast = if (length(options) > 0) Some(options[length(options)-1]) else None();
			title = eitherMap(mlast, \o : string -> if (!startsWith(toLowerCase(o), "size:")) Some(o) else None(), None());
			PictureContent(url, title, zoom)
		}
	}
}

parseImageDecorated2(imageData : string) -> Maybe<ImageDecorated> {
	imageDecorated = deserializeImageDecorated(imageData);
	if (!isSameStructType(imageDecorated, IllegalStruct()) && imageDecorated.filename != "") {
		Some(imageDecorated)
	} else {
		None()
	}
}

isWikiVideoExt(_ext) {
	ext = toLowerCase(_ext);
	ext == "flv" || ext == "mp4"
}