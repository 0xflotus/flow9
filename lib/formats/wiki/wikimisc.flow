import string;
import formats/wiki/wikimath;
import formats/html/html;

export {
	containsNaturalMath(src : string) -> bool;
	hasWritingWikiConstruction(src : string) -> bool;

	// replaces some characters, like <br> to \n, <i> to * and so on
	html2wiki(string) -> string;

	// replaces some text formating characters, like <b> to **, <i> to * and so on
	html2wiki2(string) -> string;

	htmlEscape = {
		r = \from,to -> \t -> strReplace(t, from, to);
		\text -> text |> escapeHtml |>  r("&amp;#39;", "&#39;");
	}
}

containsNaturalMath(src : string) {
	strCountOf(src, "`") > 1 // False positive are possible, but "`" is rare symbol. If we 100% accuracy the fn should be moved to wikiparser.flow and implemented via Wiki AST lookup
}

wikiBlankRepresentationCache : ref Maybe<string> = ref None();

wikiBlankRepresentation() {
	onlyOnce(wikiBlankRepresentationCache, \ -> {
		either(
			findmap(
				supportedTeXLikeElements(),
				\el -> if (el.type == WikiBlank()) Some(el.representation) else None()
			),
			"\\fillblank"
		);
	});
}

hasWritingWikiConstruction(src : string) -> bool {
	// #37571
	// GetAllTheUsedVars gives incorrect result as does not know anything about Wiki semantics.
	// \fillblank{$a} looks like read of $a but really we will write into $a.
	// But we need distinguish reading and writing when implementing vars based automatic rerendering.
	// Correct implementation of var extraction will take several days (similar to extractMedia).
	// So, this hacky function is introduced.
	// Really several more constructions write to variables, but it is not possible to imagine
	// DropTarget inside, for example, label.
	strIndexOf(src, wikiBlankRepresentation()) != -1
}

html2wiki(src : string) {
	str = ref strReplace(src, "&lt;", "<");
	str := strReplace(^str, "&gt;", ">");
	str := strReplace(^str, "<br>", "\n");
	str := strReplace(^str, "<br/>", "\n");
	str := strReplace(^str, "<i>", "*");
	str := strReplace(^str, "</i>", "*");
	str := strReplace(^str, "<em>", "*");
	str := strReplace(^str, "</em>", "*");
	str := strReplace(^str, "<b>", "**");
	str := strReplace(^str, "</b>", "**");
	^str
}

html2wiki2(src : string) {
	str = ref strReplace(src, "<i>", "*");
	str := strReplace(^str, "</i>", "*");
	str := strReplace(^str, "<em>", "*");
	str := strReplace(^str, "</em>", "*");
	str := strReplace(^str, "<b>", "**");
	str := strReplace(^str, "</b>", "**");
	^str
}
