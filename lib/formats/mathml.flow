export {
	// mml abbrevation means MathML - math markup language

	// returns header to be inserted into the heading of html generated
	mmlHeader () -> string;

	// encloses expression into the tag
	makeMmlExpression(expression : string) -> string;
	makeMmlNumber(number : string) -> string;
	makeMmlIdentifier(identifier : string) -> string;
	makeMmlOperator(operator : string) -> string;
	makeMmlText(text : string) -> string;
	makeMmlRow(text : string) -> string;
	makeMmlFrac(enumerator : string, denumerator : string) -> string;
	makeMmlSqrt(body : string) -> string;
	makeMmlRoot(degree : string, body : string) -> string;
	makeMmlOverscript(body : string, script : string) -> string;
	makeMmlUnderscript(body : string, script : string) -> string;
	makeMmlSubscript(body : string, script : string) -> string;
	makeMmlSuperscript(body : string, script : string) -> string;
	makeMmlDefineteControl(sign : string, to : string, from : string, body : string) -> string;
	makeMmlFenced(left : string, right : string, body : string) -> string;



	MathMlType ::= MathMlOperator, MathMlNumber, MathMlIdentifier, MathMlText;
		MathMlOperator : ();
		MathMlIdentifier : ();
		MathMlNumber : ();
		MathMlText : ();

	getMmlRepresentation(text : string, type : MathMlType) -> string;
}

mmlHeader() {
	// http://www.mathjax.org/download/mathjax-cdn-terms-of-service/
	// MathJax checks if browser supports MathMl and converts source to Html+Css if necessary
	"<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>"
}

makeMmlExpression(expression) {
	ot = "<math xmlns=\"http://www.w3.org/1998/Math/MathML\">";
	ct = "</math>";
	ot + expression + ct
}

makeMmlNumber(number) {
	"<mn>" + number + "</mn>"
}

makeMmlIdentifier(identifier) {
	"<mi>"  + identifier + "</mi>"
}

makeMmlOperator(operator) {
	"<mo>" + operator + "</mo>"
}

makeMmlText(text) {
    "<mtext>" + text + "</mtext>"
}

makeMmlRow(text) {
	"<mrow>" + text + "</mrow>"
}

makeMmlFrac(e, d) {
	"<mfrac>" + e + d + "</mfrac>"
}

makeMmlRoot(d, b) {
	"<mroot>" + b +  d + "</mroot>"
}

makeMmlSqrt(b) {
	"<msqrt>" + b + "</msqrt>"
}

makeMmlOverscript(body, script) {
	"<mover>" + body + script + "</mover>"
}
makeMmlUnderscript(body, script) {
	"<munder>" + body + script + "</munder>"
}

makeMmlSubscript(body, script) {
	"<msub>" + body + script + "</msub>"
}
makeMmlSuperscript(body, script) {
	"<msup>" + body + script + "</msup>"
}

makeMmlDefineteControl(signt, to, from, body) {
	("<munderover>" + signt + from + to + "</munderover>" + body)
	|> makeMmlRow
}

makeMmlFenced(ob, cb, body) {
	"<mfenced" + " open=\"" + ob + "\"" + " close=\"" + cb + "\"" + ">" + body + "</mfenced>"
}

getMmlRepresentation(text, type) {
	text |> switch(type : MathMlType) {
		MathMlIdentifier() : makeMmlIdentifier;
		MathMlOperator() : makeMmlOperator;
		MathMlText() : makeMmlText;
		MathMlNumber() : makeMmlNumber;
	}
}
