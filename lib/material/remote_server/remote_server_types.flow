import tuples;
import behaviour;
import date;
import material/material_manager;

export {
	DbRemoteServer : (
		manager : MaterialManager,	// Manager to draw inner dialogs
		remoteJwt : string,			// jwt from the remote server
		baseUrl : string, 			// Remote server base url
		alternativeUrls : [string],	// List of available alternative servers
		dirtyTables : [string],		// Names of dirty tables
		cleanTables : [string],		// Names of clean tables
		greyTables : [string],		// Names of tables which are clean, but was used in one request together with dirty tables
		usedClean : [string],		// Names of clean tables to which we successfully sent requests
									// List of requests to dirty/greys tables
		ditryRequestsLogB : DynamicBehaviour<[RsDitryRequest]>,
									// Callback on dirty request
		onDirtyRequest : (/*tablesNames*/ [string], /*operation*/ string, /*params*/ [KeyValue]) -> void,
		mode : RsMode				// Where to send requests
	);

	makeDbRemoteServer() -> DbRemoteServer;

	RsMode ::= RsModeDemo, RsModeSplit, RsModeRedirect;
		// Collecting statistics for Remote server, but work with the current server
		RsModeDemo();
		// Splitting requests to Remote and current servers (depends on used tables classes)
		RsModeSplit();
		// Redirecting all requests to the Remote server (without collecting any statistics)
		RsModeRedirect(baseUrl : string);

	// to store request info
	RsDitryRequest : (
		usedTables : [string],
		operation : string,
		params : [KeyValue],
		requestTime : Time,
		type : RsRequestType
	);

	RsRequestType ::= RsRequestRead, RsRequestWrite, RsRequestUnknown;
		RsRequestRead();
		RsRequestWrite();
		RsRequestUnknown();

	rsRequestType2string(type : RsRequestType) -> string;
}

makeDbRemoteServer() -> DbRemoteServer {
	DbRemoteServer(makeMaterialManager([]), "", "", [], [], [], [], [], make([]), nop3, RsModeDemo());
}

rsRequestType2string(type : RsRequestType) -> string {
	switch (type : RsRequestType) {
		RsRequestRead(): "Read";
		RsRequestWrite(): "Write";
		RsRequestUnknown(): "Unknown";
	}
}