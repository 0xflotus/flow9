import material/iscript/material_iscript_dialog;
import material/iscript/material_iscript_test_combinations;
import material/iscript/material_iscript_filter;
import material/iscript/material_iscript_cursors;
import material/iscript/material_focus_tree;
import material/internal/material_splitter;
import material/internal/material_textinput;
import material/internal/material_tabs;
import material/internal/material_datatable;
import material/internal/material_dialog_internal;
import fusion_utils;

export {
	MIScriptPanels2T(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;

	MIScriptStack(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> Material;
	MInputOutputValues(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> Material;
	MAliases(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> Material;
	MIScriptErrors(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> Material;
}

MIScriptPanels2T(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	contentForm = ref FEmpty();
	contentFormKey = ref 0;

	MSplitter(
		TFillXY(),
		(\p ->
			MDynamicTabs(
				fselect(
					manager.iscript.currentBatchTestsDirectoryB,
					FLift(\v -> concat(
						if (v != "") [MTab(MBatchTests2T(manager, p, m2t), const(_("Batch Tests")), [])] else [],
						[
							MTab(MIScriptStack(manager, m2t), const(_("Script")), []),
							MTab(MInputOutputValues(manager, m2t), const(_("Input/Output")), []),
							MTab(MAliases(manager, m2t), const(_("Aliases")), []),
							MTab(MFocusTree(manager, m2t), const(_("UI Tree")), []),
							MTab(MIScriptErrors(manager, m2t), const(_("Errors")), [])
						]
					))
				),
				manager.iscript.panelsCurrentTab,
				[]
			)
			|> (\f2 -> MFrame(0., 0., [MFill(MBackgroundColor(p.theme.lightBackground))], f2))
		)
		|> MGetFocusGroup
		|> disableMInteractivesBelow, // Prevent capturing mouse events by IScript on Script Panel
		TFillXY(),
		[
			MEnabled(manager.iscript.panelsShowSidebar),
			MSplitterValue(manager.iscript.panelsSplitterValue),
			MSplitterWidthHeight(manager.iscript.available, make(zeroWH)),
		]
	)
	|> (\f ->
		MLines2(
			MCreate(\ ->
				MBaselineCols([
					MSelect(
						isIScriptFilesystemDBPresent(manager),
						\v ->
							MMenu(
								MIconButton("folder", nop, [], [MTooltipText(const(_("Save or load scripts")))]),
								concatA([
									[
										MMenuSingleLine("New script",
											[MOnClick(\ -> {
												clearCurrentIScript(manager);
												setIScriptState(manager, IScriptPaused());
											}), MTooltipText(const(_("Clear current script")))]),
										MSeparatorLine(),
									],
									if (cpp)
										[
											MMenuSingleLine("Open script",
												[MOnClick(\ -> loadIScriptDialog(manager, false, m2t)), MTooltipText(const(_("Replace current script with script from file")))]),
											MMenuSingleLine("Save script",
												[MOnClick(\ -> saveIScript(manager, getValue(manager.iscript.currentFileNameB), m2t)),
													MEnabled(fselect(manager.iscript.scriptChangedB, FLift(\scriptChanged -> scriptChanged && getValue(manager.iscript.currentFileNameB) != "")))]),
											MMenuSingleLine("Save script as ...",
												[MOnClick(\ -> saveIScriptDialog(manager, m2t)), MEnabled(fselect(manager.iscript.script, FLift(\script -> !isIScriptEmpty(manager))))]),
											MSeparatorLine(),
											MMenuSingleLine("Open Batch Tests",
												[MOnClick(\ -> loadBatchTestsDialog(manager, m2t))]),
										]
									else
										[],
									if (cpp && v)
										[MSeparatorLine()]
									else
										[],
									if (v)
										[
											MMenuSingleLine("Open script from DB",
												[MOnClick(\ -> loadDBIScriptDialog(manager, false, m2t)), MTooltipText(const(_("Replace current script with script from file")))]),
											MMenuSingleLine("Save script to DB",
												[MOnClick(\ -> saveDBIScript(manager, getValue(manager.iscript.currentFileNameB), m2t)),
													MEnabled(fselect(manager.iscript.scriptChangedB, FLift(\scriptChanged -> scriptChanged && getValue(manager.iscript.currentFileNameB) != "")))]),
											MMenuSingleLine("Save script to DB as ...",
												[MOnClick(\ -> saveDBIScriptDialog(manager, m2t)), MEnabled(fselect(manager.iscript.script, FLift(\script -> !isIScriptEmpty(manager))))]),
											MSeparatorLine(),
											MMenuSingleLine("Open Batch Tests from DB",
												[MOnClick(\ -> loadDBBatchTestsDialog(manager, m2t))]),
										]
									else
										[]
								]),
								[MOpenOnClick(), MEnabled(isIScriptPausedB(manager))]
							)
					),
					TFillX(),
					MIconButton(
						"settings",
						\ -> showRecordSettingsDialog(manager, m2t), [],
						[
							MTooltipText(const(_("Open record settings"))),
							MEnabled(fnot(isIScriptReplayingB(manager)))
						]
					),
					MIconToggle(
						"grid_off",
						[MToggleFalseIcon("grid_on", [])],
						[
							MToggleValue(manager.iscript.panelsShowGrid),
							MTooltipText(const(_("Show Grid")))
						]
					),
					MIconButton(
						"note",
						\ -> showCombinationsDialog(manager, m2t),
						[],
						[
							MEnabled(fselect(manager.iscript.script, FLift(\script -> !isIScriptEmpty(manager)))),
							// MEnabled(const(true)),
							MTooltipText(const(_("Open test combinations dialog")))
						]
					),
					MIf(
						isIScriptAddingB(manager),
						MIconButton("close", \ -> nextDistinct(manager.iscript.state, IScriptPaused()), [], []),
						MMenu(
							MIconButton("add", nop, [], [MTooltipText(const(_("Add behaviour record")))]),
							[
								MMenuSingleLine(
									"Capture single interaction",
									[
										MOnClick(\ ->
											nextDistinct(
												manager.iscript.state,
												IScriptAddMFocusRecord(\focus ->
													addIScriptEventDialog(
														manager,
														focus,
														\rec -> addIScriptRecordWithDelay(manager, rec.first, rec.second),
														nop,
														m2t
													)
												)
											)
										),
										MEnabled(isIScriptPausedB(manager))
									]
								),
								MMenuSingleLine(
									"Capture group of interaction elements",
									[
										MOnClick(\ ->
											nextDistinct(
												manager.iscript.state,
												IScriptAddMFocusGroupRecord(\focus ->
													addIScriptEventDialog(
														manager,
														focus,
														\rec -> addIScriptRecordWithDelay(manager, rec.first, rec.second),
														nop,
														m2t
													)
												)
											)
										),
										MEnabled(isIScriptPausedB(manager))
									]
								),
								MMenuSingleLine(
									"Capture screenshot",
									[
										MOnClick(\ -> addIScriptScreenshot(manager, false))
									]
								),
								MMenuSingleLine(
									"Capture snapshot of logical UI state",
									[
										MOnClick(\ ->
											addIScriptShallowLogicalScreenshot(
												manager,
												switch (getValue(manager.iscript.state)) {
													IScriptRecording(__, __): timestamp() - getValue(manager.iscript.script).recordingStarted;
													default: 0.0;
												},
												^contentForm
											)
										)
									]
								),
								MMenuSingleLine(
									"Define alias for the element",
									[
										MOnClick(\ ->
											nextDistinct(
												manager.iscript.state,
												IScriptAddMFocusAlias(\foc ->
													defineGlobalAliasOnFocusDialog(
														manager,
														foc,
														\alias -> addGlobalAliasInIScript(manager, foc, alias),
														m2t
													)
												)
											)
										),
										MEnabled(isIScriptPausedB(manager))
									]
								),
								MMenuSingleLine(
									"Define alias for the group of elements",
									[
										MOnClick(\ ->
											nextDistinct(
												manager.iscript.state,
												IScriptAddMFocusAlias(\foc ->
													defineGlobalAliasOnFocusDialog(
														manager,
														foc,
														\alias -> addGlobalAliasInIScript(manager, foc, alias),
														m2t
													)
												)
											)
										),
										MEnabled(isIScriptPausedB(manager))
									]
								),
								MMenuSingleLine(
									"Import script",
									[
										MOnClick(\ -> loadIScriptDialog(manager, true, m2t)),
										MTooltipText(const(_("Add script from file to the current script")))
									]
								)
							],
							[MOpenOnClick()]
						)
					),
					MIconToggle(
						"stop",
						[MToggleFalseIcon("fiber_manual_record", [MRed(500)])],
						concat(
							[
								MToggleValue(manager.iscript.panelsRecordToggleValue),
								MEnabled(fnot(isIScriptReplayingB(manager))),
							],
							[
								MTooltipText(fselect(manager.iscript.panelsRecordToggleValue, FLift(\rec -> if (rec) _("Stop recording") else _("Start recording"))))
							]
						)
					),
					MIconButton(
						"settings_backup_restore",
						\ -> showReplaySettingsDialog(manager, m2t),
						[],
						[
							MTooltipText(const(_("Open replay settings")))
						]
					),
					MIconToggle(
						"stop",
						[
							MToggleFalseIcon("play_arrow", [MGreen(500)])
						],
						[
							MToggleValue(manager.iscript.panelsReplayToggleValue),
							MEnabled(fselect2(
								manager.iscript.state,
								manager.iscript.script,
								FLift2(\isrs, iScript -> {
									switch (isrs) {
										IScriptRecording(__, __): false;
										IScriptBatchReplaying(__): false;
										default: true;
									} && sizeTree(iScript.stack) > 0
								})
							)),
							MTooltipText(fselect(manager.iscript.panelsReplayToggleValue, FLift(\v -> if(v) _("Stop replaying") else _("Replay recording"))))
						]
					),
					MIconToggle(
						"stop",
						[
							MToggleFalseIcon("playlist_play", [MGreen(500)])
						],
						[
							MToggleValue(manager.iscript.panelsBatchReplayToggleValue),
							MEnabled(fselect2(
								manager.iscript.currentBatchTestsDirectoryB,
								manager.iscript.state,
								FLift2(\dir, state -> {
									switch(state) {
										IScriptRecording(__, __): false;
										IScriptReplaying(__): false;
										default: true;
									} && (dir != "")
								})
							)),
							MTooltipText(fselect(manager.iscript.panelsBatchReplayToggleValue, FLift(\v -> if(v) _("Stop batch tests") else _("Replay batch tests"))))
						]
					),
					MIconToggle(
						"arrow_forward",
						[
							MToggleFalseIcon("menu", [])
						],
						[
							MToggleValue(manager.iscript.panelsShowSidebar),
							MTooltipText(fselect(manager.iscript.panelsShowSidebar, FLift(\v -> if(v) _("Hide recording sidebar") else _("Show recording sidebar"))))
						]
					),
				])
				|> (\f2 -> MBorder(16., 0., 8., 0., f2))
				|> (\f2 -> MFrame(0., 0., [MFill(MBackgroundColor(manager.theme.lightBackground))], f2))
				|> (\f2 -> MScroll(f2, TFillXH(48.), []))
				|> (\f2 -> MAttachBoxCopy(f2, manager.iscript.topPanelWidthHeightB))
				|> disableMInteractivesBelow // Prevent capturing mouse events by IScript on Script Panel
			)
			|> (\f2 -> MShow(manager.iscript.showPanel, f2)),
			f
		)
	)
	|> (\f ->
		MActivate(
			f,
			[IScriptRecordingEnabled(const(false)), MZorder(manager.currentZorder), MFocusName("MIScriptPanel")]
		)
	)
	|> (\f ->
		MGroup2SameMetrics(
			f,
			TShow(
				manager.iscript.replayCursorVisibleB,
				TTranslate(manager.iscript.replayCursorPositionB, TSelect(manager.iscript.replayCursorShapeB, idfn))
			)
		)
	)
	|> (\f ->
		MInteractive(
			[
				MouseDown2(\h, mi -> captureIScriptMouseDownEvent(manager, h, mi, \ -> Point(0., 0.), "canvas")),
				MouseUp2(\h, mi -> captureIScriptMouseEvent(manager, h, mi, \ -> Point(0., 0.), "canvas", "mouseup")),
				MouseMove2(\h, mi -> captureIScriptMouseEvent(manager, h, mi, \ -> Point(0., 0.), "canvas", "mousemove")),
			],
			f
		)
	)
	|> (\f -> m2t(f, manager.focus))
}

compressScript(script : IScript) -> IScript {
	newStack = filterIScriptStackTree(script.stack, \delay, record -> {
		switch (record) {
			IScriptBehaviourRecord(__, __, type, __) : {
				switch (type) {
					ISMouseEvent() : false;
					ISMiscEvent() : false;
					default : true;
				}
			}
			default : true;
		}
	});

	// TODO: Reimplement
	// filteredInputs = foldIScriptStackTree(newStack, [], \acc : [IScriptRecord], delay, record -> {
	// 	if (length(acc) > 0) {
	// 		last = acc[length(acc) - 1];

	// 		switch (last) {
	// 			IScriptBehaviourRecord(lastDescriptor, __, lastType, __) : {
	// 				switch (record) {
	// 					IScriptBehaviourRecord(descriptor, __, type, __) : {
	// 						if (isSameStructType(type, lastType) && isSameStructType(type, ISInputValue([], "", false)) && IScriptId2s(descriptor.component.id) == IScriptId2s(lastDescriptor.component.id))
	// 							replace(acc, length(acc) - 1, record)
	// 						else
	// 							arrayPush(acc, record);
	// 					}
	// 					default : arrayPush(acc, record);
	// 				}
	// 			}
	// 			default : arrayPush(acc, record);
	// 		}
	// 	} else {
	// 		[record]
	// 	}
	// });

	IScript(script.recordingStarted, newStack);
}

MBatchTests2T(manager : MaterialManager, p : MFocusGroup, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	TSelect(
		manager.iscript.batchTestFileNamesB,
		\fs -> {
			map(fs, \filename -> {
			button = MIconButton(
				"open_in_browser",
				\ -> {
					iScriptFromFile(manager, getValue(manager.iscript.currentBatchTestsDirectoryB) + filename);
					next(manager.iscript.panelsCurrentTab, 1)
				},
				[MIconSize(20.)],
				[MTooltipText(const(_("Open script in SCRIPT tab")))]
			);
			MSingleLine(filename, [MSecondaryAction(button)])
		})
		|> (\f -> MList(f, [], []))
		|> (\f -> MList2T(manager, p, f, m2t))
	})
	|> (\f ->
	TLines([
		TBorder(16., 0., 16., 16.,
			TBaselineCols([
				MTooltip2T(manager, p,
					MIconButton("update", \ -> updateBatchTestFilenames(manager, getValue(manager.iscript.currentBatchTestsDirectoryB)), [], [])
					|> (\m -> MTooltip(m, MText("Reload", []), [])),
					m2t
				),
				TFillX()
			])
		),
		f
	]))
}

MIScriptStack(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> Material {
	searchB = make("");
	filterTypesB = make([FTNoIScript()]);
	filterPopupOpenedB = make(true);
	caseSensitiveB = make(false);
	posScaleB = make(zeroPositionScale);

	inputEnabled = make(false);

	visibleRecordsB = fselect4(
		manager.iscript.script,
		searchB,
		filterTypesB,
		caseSensitiveB,
		\rs : IScript, sb, ft, cs -> {
			iScriptStack = mapIScriptStack(rs.stack, \delay, record -> Pair(delay, record));

			strFiltered = if (strlen(sb) > 0) {
				aliases = getValue(manager.iscript.aliases);
				filter(iScriptStack, \r0: Pair<double, IScriptRecord> -> {
					caption = getIScriptRecordCaption(aliases, r0);
					if (cs)
						strContains(caption, sb)
					else
						strContains(toLowerCase(caption), toLowerCase(sb))
				});
			} else {
				iScriptStack;
			}

			recordFiltered = if (containsStruct(ft, FTIScriptRecords([]))) {
				recordFilter = extractStruct(ft, FTIScriptRecords([]));
				filter(strFiltered, \r0: Pair<double, IScriptRecord> -> exists(recordFilter.records, \v -> isSameStructType(v, r0.second)))
			} else strFiltered;

			recordTypeFiltered = if (containsStruct(ft, FTIScriptRecordTypes([]))) {
				recordTypeFilter = extractStruct(ft, FTIScriptRecordTypes([]));
				filter(recordFiltered, \r0: Pair<double, IScriptRecord> -> {
					var = r0.second;
					switch(var) {
						IScriptCheck(__, __, __) : exists(recordTypeFilter.types, \v -> isSameStructType(v, var.type));
						IScriptBehaviourRecord(__, __, __, __) : exists(recordTypeFilter.types, \v -> isSameStructType(v, var.type));
						default: false;
					}
				})
			} else recordFiltered;

			behaviourFiltered = if (containsStruct(ft, FTIScriptBehaviourDescriptors("", "", ""))) {
				behaviourFilter = extractStruct(ft, FTIScriptBehaviourDescriptors("", "", ""));
				filter(recordTypeFiltered, \r0: Pair<double, IScriptRecord> -> {
					var = r0.second;
					switch(var) {
						IScriptCheck(__, __, __) : checkBehaviour(var.behaviourDescriptor, behaviourFilter, cs);
						IScriptBehaviourRecord(__, __, __, __) : checkBehaviour(var.descriptor, behaviourFilter, cs);
						IScriptInputRecord(__, __, __, __) : checkBehaviour(var.behaviourDescriptor, behaviourFilter, cs);
						IScriptOutputRecord(__, __) : checkBehaviour(var.behaviourDescriptor, behaviourFilter, cs);
						default: false;
					}
				})
			} else recordTypeFiltered;

			behaviourFiltered;
		}
	);

	// fselect2(manager.iscript.aliases, visibleRecordsB, FLift2(\aliases, visibleRecords -> {
		fmap(visibleRecordsB, \r0 : Pair<double, IScriptRecord> -> {
			time = r0.first;
			r = r0.second;

			caption = getIScriptRecordCaption(getValue(manager.iscript.aliases), r0);

			if (caption != "") {
				hover = make(false);
				buttons =
					getIScriptRecordButtons(
						manager,
						m2t,
						r0,
						true,
						\nr -> addIScriptRecordWithDelay(manager, nr.first, nr.second),
						\mr -> replaceRecordInIScript(manager, Pair(time, r), mr),
						\ -> removeRecordFromIScript(manager, Pair(time, r))
					);

				MSingleLine(caption, [MSecondaryAction(MBaselineCols(buttons) |> addIScriptRecordHover(manager, r0, hover)), THovering(hover)])
			} else {
				MSeparatorLine()
			}
		})
	// }))
	|> (\f -> MDynamicList(f, [], []))
	|> (\f ->
		MLines([
			MBorder(16., 0., 16., 16.,
				MBaselineCols([
					MPositionScale(posScaleB,
						MGetFocusGroup(\parent ->
							MIconButton(
								"filter_list",
								\ -> {
									renderFilterPopup(manager, parent, m2t, filterTypesB, searchB, filterPopupOpenedB, posScaleB, caseSensitiveB)
								},
								[],
								[MShortcut("ctrl+f")]
							)
						)
					),
					TFillX(),
					MTextButton(
						"COMPRESS SCRIPT",
						\ -> {
							next(manager.iscript.script, compressScript(getValue(manager.iscript.script)));
							next(manager.iscript.scriptChangedB, true);
						},
						[],
						[MEnabled(fselect(manager.iscript.script, FLift(\__ -> !isIScriptEmpty(manager))))]
					)
				])
			),
			renderSearchChip(manager, searchB, caseSensitiveB),
			renderFilterChips(manager, filterTypesB),
			f
		])
	)
}

MInputOutputValues(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> Material {
	MProportionCols(
		[
			MActivateSelect(
				fmap(
					fselect(manager.iscript.script, getMInputValueRecords |> FLift),
					\r -> \p -> {
						typeHelper = r.second.valueTypeHelper;
						inputName = r.second.name;
						inputValues = getValue(manager.iscript.input);
						inputIndex = findiDef(inputValues, \input -> input.name == inputName, -1);
						askB = if (inputIndex == -1) make(false) else make(isNone(inputValues[inputIndex].value));

						pair = makeValueInputByTypeHint(r.second.possibleValues, r.second.valueTypeHelper, None(), fnot(askB));
						valueB = pair.first;
						item = pair.second;
						askSwitch = MEGSwitchControl("Ask for value during the replay", askB, []);

						TConstruct([
								makeSubscribe2(fpair(valueB, askB), \vaPair -> {
									value = vaPair.first;
									ask = vaPair.second;
									iScript = getValue(manager.iscript.script);
									inputValue = IScriptInputValue(
										inputName,
										typeHelper,
										if (ask) None() else Some(value)
									);

									next(manager.iscript.input, replace(inputValues, inputIndex, inputValue));
								})
							],
							TBorder(0.0, 8.0, 0.0, 8.0, TFrame(1.0, 0.0, [Stroke(black)], TPad(8.0, 8.0, TLines([
								MEGItem2T(p, MText("\"" + inputName + "\"", [MSubheading()]), [], m2t),
								TFixed(0.0, 8.0),
								MEGItem2T(p, askSwitch, [], m2t),
								MEGItem2T(p, item, [], m2t)
							]))))
						)
					}
				),
				\rs ->
					map(rs, \r -> MGetFocusGroup(r))
					|> (\f2 ->
						concat(
							[MEllipsisText("Input Values:", [MShowTooltip(const(true))])],
							f2
						)
					)
					|> MLines,
				[MFocusName("MInputValueRecords")]
			)
			|> (\f2 -> MBorder(16., 16., 0., 0., f2))
			|> (\f2 -> MGroup2(f2, TFillX()))
			|> (\f2 -> Pair(const(0.5), f2)),
			MActivateSelect(
				fmap(
					manager.iscript.output,
					\r -> \p -> {
						if (r.visible) {
							material = MLines2(
								MText(r.name, []),
								MText(eitherMap(r.value, toString, "No such behaviour"), [])
							);

							MEGItem2T(p, material, [], m2t)
						} else
							TEmpty();
					}
				),
				\rs ->
					map(rs, \r -> MGetFocusGroup(r))
					|> (\f2 ->
						concat(
							[MEllipsisText("Output Values:", [MShowTooltip(const(true))])],
							f2
						)
					)
					|> MLines,
				[MFocusName("MOutputValueRecords")]
			)
			|> (\f2 -> MBorder(16., 16., 0., 0., f2))
			|> (\f2 -> MGroup2(f2, TFillX()))
			|> (\f2 -> Pair(const(0.5), f2))
		]
	)
}

getMInputValueRecords(iScript : IScript) -> [Pair<double, IScriptInputRecord>] {
	filtermapIScriptStack(iScript.stack, \delay, record -> {
		switch (record : IScriptRecord) {
			IScriptInputRecord(__, __, __, __) : Some(Pair(delay, record));
			default: None();
		}
	});
}

getMOutputValueRecords(iScript : IScript) -> [Pair<double, IScriptOutputRecord>] {
	filtermapIScriptStack(iScript.stack, \delay, record -> {
		switch (record : IScriptRecord) {
			IScriptOutputRecord(__, __) : Some(Pair(delay, record));
			default: None();
		}
	});
}

MAliases(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> Material {
	elementNameWidth = 400;
	aliasWidth = 360;
	columns = [
		MColumn("Element name", "", elementNameWidth, []),
		MColumn("Alias", "", aliasWidth, []),
		MColumn("", "", 48, []),
		MColumn("", "", 48, [])
	];

	fselect(manager.iscript.aliases, FLift(\aliases -> {
		foldTree(aliases, [], \descriptor, alias, acc -> {
			elementTitle = descriptor.name + " [" + IScriptId2s(descriptor.id) + "]";

			arrayPush(acc, [
				MParagraph(elementTitle, [MWidth(i2d(elementNameWidth))]),
				MParagraph(alias, [MWidth(i2d(aliasWidth))]),
				MIconButton("edit", \ -> {
						defineGlobalAliasDialog(
							manager,
							descriptor.name,
							descriptor.id,
							\newAlias -> next(manager.iscript.aliases, setTree(aliases, descriptor, newAlias)),
							m2t
						)
					}, [], []
				),
				MIconButton("delete", \ -> next(manager.iscript.aliases, removeFromTree(aliases, descriptor)), [], [])
			])
		})
	}))
	|> (\m -> MDynamicDataTable(columns, m, []))

	// fselect(manager.iscript.aliases, FLift(\aliases -> {
	// 	foldTree(aliases, [], \descriptor, alias, acc -> {
	// 		elementTitle = descriptor.componentName + " [" + IScriptId2s(descriptor.id) + "]";
	// 		lineTitle = elementTitle + " = \"" + alias + "\"";

	// 		arrayPush(acc, MSingleLine(lineTitle, []));
	// 	})
	// }))
	// |> (\f -> MDynamicList(f, [], []))
	// |> (\f -> MDynamicList2T(manager, parent, f, m2t))


	// |> (\f ->
	// 	TLines2(
	// 		TBorder(16., 0., 16., 16.,
	// 			TBaselineCols([
	// 				MTextInput2T(
	// 					manager,
	// 					parent,
	// 					MTextInput(manager.iscript.panelsSearchInputContent, [MLabel("Search"), MFilterAction(\c -> nextDistinct(searchB, c))],
	// 						[
	// 							MEnabled(fselect(manager.iscript.state, FLift(\iss -> {
	// 								en = !isSameStructType(iss, IScriptRecording(makeCaptureOptions(), false));

	// 								c = getValue(manager.iscript.panelsSearchInputContent);

	// 								deferred(\ -> next(manager.iscript.panelsSearchInputContent, c));
	// 								if (!en) nextDistinct(searchB, "");

	// 								en
	// 							})))
	// 						]
	// 					),
	// 					m2t
	// 				),
	// 				TFixed(16.0, 0.0),
	// 				MTextButton2T(
	// 					manager,
	// 					parent,
	// 					MTextButton("COMPRESS SCRIPT", \ -> {
	// 							next(manager.iscript.script, compressScript(getValue(manager.iscript.script)));
	// 							next(manager.iscript.scriptChangedB, true);
	// 						},
	// 						[], [MEnabled(fselect(manager.iscript.script, FLift(\__ -> !isIScriptEmpty(manager))))]
	// 					)
	// 				)
	// 			])
	// 		),
	// 		f
	// 	)
	// )

	// |> (\f ->
	// 	TConstruct(
	// 		[
	// 			makeSubscribe(manager.iscript.state, \iss -> {
	// 				nextDistinct(inputEnabled, !isSameStructType(iss, IScriptRecording(makeCaptureOptions(), false)));
	// 				c = getValue(manager.iscript.panelsSearchInputContent);
	// 				deferred(\ -> next(manager.iscript.panelsSearchInputContent, c));
	// 				if (!getValue(inputEnabled)) nextDistinct(searchB, "");
	// 			})
	// 		],
	// 		f
	// 	)
	// )
}

MIScriptErrors(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> Material {
	MGetFocusGroup(\parent ->
		SelectTLines(
			fselect(manager.iscript.errors, list2array |> FLift),
			\index, id, e -> {
				MText(e.error, [MCaption()])
				|> (\f ->
					eitherMap(
						e.id,
						\identifier -> {
							hover = make(false);

							MConstruct(
								[
									makeSubscribe2focusHovered(manager, \ -> getMaterialFocusByIScriptId(manager.focus, identifier), hover)
								],
								MInteractive(
									[TMouseInside(hover, false)],
									MFrame(0., 0., [Fill(black), FillOpacity(0.)], f)
								)
							)
						},
						f
					)
				)
				|> (\f -> m2t(f, parent))
			}
		)
	)
}