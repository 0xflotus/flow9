import material/internal/material_button;

export {
	MExpander2T(manager : MaterialManager, parent : MFocusGroup, m : MExpander, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
	MAnimatedExpander2T(manager : MaterialManager, parent : MFocusGroup, m : MAnimatedExpander, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
}

MExpander2T(manager : MaterialManager, parent : MFocusGroup, m : MExpander, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	header = m.header;
	expander = m.expander;
	details = m.details;

	hideSeparator = contains(m.style, MExpanderHideSeparator());
	noDispose = contains(m.style, MNoDispose());
	bgStyle = extractStruct(m.style, MExpanderBackgroundStyle([], []));
	animated = contains(m.style, MDetailsAnimated());

	TCopySize2(
		MExpanderHeader(manager, parent, m2t(header, parent), expander, m.style, m2t),
		\tr, hd ->
			TLines2(
				hd
				|> (\f -> if (bgStyle.header != []) TGroup2(TRounded(2., 2., 0., 0., bgStyle.header, tr), f) else f),
				(\p ->
					m2t(details(), p)
					|> TAlignStart
					|> (\f -> if (bgStyle.details != []) TCopySize(f, \tr2 -> TRounded(0., 0., 2., 2., bgStyle.details, tr2), false) else f)
					|> (\f ->
						if (hideSeparator)
							f
						else
							TLines2(
								MSeparator2T(manager, parent, true)
								|> (\f2 -> TAvailable(f2, TGroup2(TWidth(tr), TFixed(0., 1.)))),
								f
							)
					)
				)
				|> (\f ->
					if (animated)
						MAnimatedExpander2T(manager, parent, MAnimatedExpander(f(parent), expander, [MExpandFromStart()]), m2t)
					else if (noDispose)
						MRenderOnce2T(manager, parent, expander, f)
					else
						MSelect2T(
							manager,
							parent,
							"MExpanderContent",
							[],
							expander,
							\ex, p ->
								if (ex)
									f(p)
								else
									TEmpty()
						)
				)
			)
	)
}

MExpanderHeader(
	manager : MaterialManager,
	parent : MFocusGroup,
	c : Tropic,
	expander : DynamicBehaviour<bool>,
	style : [MExpanderStyle],
	m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {

	expandByArrowOnly = contains(style, MExpandByArrowOnly());
	arrowColor = extractStruct(style, if (getLightBackground(parent)) MGrey(600) else MWhite());
	arrowOpacity = extractStruct(style, FillOpacity(0.54));
	enabledState = extractStruct(style, MEnabled(const(true)));
	narrowHeader = contains(style, MExpanderNarrowHeader());
	front = changeBoolIfRTL(contains(style, MExpanderFront()));
	mWidth = extractStruct(style, MWidth(-1.0)).width;
	icons = extractStruct(style, MExpanderIcon("keyboard_arrow_down", "keyboard_arrow_up"));

	align = fold(style, StartAlign(), \acc, st -> {
		switch (st : MExpanderStyle) {
			LeftAlign() : st;
			CenterAlign() : st;
			RightAlign() : st;
			EndAlign() : st;
			default : acc;
		};
	});

	iconStyle : [MIconStyle] = [MIconSize(24.0), arrowColor, arrowOpacity];

	icon = MIconToggle2T(
			manager,
			parent,
			MIconToggle(
				icons.closeIcon,
				concat(
					[MToggleFalseIcon(icons.openIcon, iconStyle)],
					ifArrayPush(iconStyle, narrowHeader, MIconButtonBorder(0.))
				),
				[MToggleValue(expander), enabledState, FAccessAttribute("aria-expanded", fif(expander, const("true"), const("false")))]
			),
			m2t
		)
		|> (if (narrowHeader) idfn else if (front) TBorderRight(16.0) else TBorderLeft(16.0));

	combinerL = if (getDefaultRtl()) TAlignRight else TAlignLeft;
	combinerR = if (getDefaultRtl()) TAlignLeft else TAlignRight;

	contents =
		if (front) {
			if (mWidth != 0.) {
				switch (align : CommonAlignment) {
					StartAlign() : TBaselineCols2A(icon, c) |> combinerL;
					EndAlign() : TBaselineCols2A(icon |> combinerL, c);
					LeftAlign() : TBaselineCols2A(icon, c) |> TAlignLeft;
					RightAlign() : TBaselineCols2A(icon |> TAlignLeft, c);
					CenterAlign() : TCenterX(TBaselineCols2A(icon, c));
				}
			} else {
				switch (align : CommonAlignment) {
					StartAlign() : TBaselineCols2A(icon, c) |> TAlignStart;
					EndAlign() : TBaselineCols2A(icon |> combinerL, c);
					LeftAlign() : TBaselineCols2A(icon, c);
					RightAlign() : TBaselineCols2A(icon |> TAlignLeft, c);
					CenterAlign() : TCenterX(TBaselineCols2A(icon, c));
				}
			}
		} else {
			if (mWidth != 0.) {
				switch (align : CommonAlignment) {
					StartAlign() : TBaselineCols2A(c |> combinerL, icon);
					EndAlign() : TBaselineCols2A(c, icon) |> combinerR;
					LeftAlign() : TBaselineCols2A(c |> TAlignLeft, icon);
					RightAlign() : TBaselineCols2A(c, icon) |> TAlignRight;
					CenterAlign() : TCenterX(TBaselineCols2A(c, icon));
				}
			} else {
				switch (align : CommonAlignment) {
					StartAlign() : TBaselineCols2A(c, icon) |> TAlignStart;
					EndAlign() : TBaselineCols2A(c, icon) |> combinerR;
					LeftAlign() : TBaselineCols2A(c, icon) |> TAlignStart;
					RightAlign() : TBaselineCols2A(c, icon) |> TAlignRight;
					CenterAlign() : TCenterX(TBaselineCols2A(c, icon));
				}
			}
		};

	contents
	|> (\t -> if (mWidth > 0.) TAvailableWidth(t, const(mWidth)) else t)
	|> (\f ->
		if (expandByArrowOnly)
			f
		else
			TCopySize(
				f,
				\t ->
					mouseDownAround(
						manager,
						None(),
						make(false),
						make(false),
						\ -> if (fgetValue(enabledState.enabled)) reverseBehaviour(expander),
						t
					),
				false
			)
	)
}

MAnimatedExpander2T(manager : MaterialManager, parent : MFocusGroup, m : MAnimatedExpander, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	vertical = !contains(m.style, MExpanderHorizontal());
	expandFromStart = contains(m.style, MExpandFromStart());

	TAnimatedExpander(manager, parent, m2t(m.content, parent), m.expanded, vertical, expandFromStart)
}
