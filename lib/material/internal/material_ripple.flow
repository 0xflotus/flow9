import fusion_utils;
import material/internal/material_clickable;
import material/internal/material_shadow;
import material/internal/material_mutable;

// Internal to material

export {
	MRippleOnDownDefault2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, rippleType : Transform<RippleType>) -> Tropic;
	MRippleOnDown2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, color : Transform<MColor>, opacity : Transform<double>,
		rippleType : Transform<RippleType>, focused : Transform<bool>, hovered : Transform<bool>, component : string) -> Tropic;

	MRipple2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, trigger : Transform<bool>, style : [MRippleStyle]) -> Tropic;
}

MRippleOnDownDefault2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, rippleType : Transform<RippleType>) -> Tropic {
	MRippleOnDown2T(
		manager,
		parent,
		content,
		const(if (getLightBackground(parent)) MBlack() else MWhite()),
		const(1.0),
		rippleType,
		const(false),
		const(false),
		parent.name
	)
}

MRippleOnDown2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, color : Transform<MColor>, opacity : Transform<double>,
	rippleType : Transform<RippleType>, focused : Transform<bool>, hovered : Transform<bool>, component : string) -> Tropic {
	down = make(false);
	point = make(zeroPoint);

	MRipple2T(
		manager,
		parent,
		mouseOnDownAround(manager, [TPressed(down), MMousePosition(point)], content),
		down,
		[
			MRipplePosition(point),
			MRippleColor(color),
			MRippleOpacity(opacity),
			MRippleType(rippleType),
			MRippleFocused(focused),
			MRippleHovered(hovered),
			MRippleShape(component),
			MRippleOverlay(true)
		]
	)
}

MRipple2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, trigger : Transform<bool>, style : [MRippleStyle]) -> Tropic {
	rippleType = extractStruct(style, MRippleType(const(MNoRipple()))).type;
	focused = extractStruct(style, MRippleFocused(const(false))).focused;
	hovered = extractStruct(style, MRippleHovered(const(false))).hovered;
	selected = extractStruct(style, MRippleSelected(const(false))).selected;
	triggered = fselectdelay(trigger, \tr -> Pair(if (tr) 0 else 600, tr), false);

	if (parent.theme.enableRipple && (rippleType != const(MNoRipple()) || focused != const(false) || hovered != const(false) ||
		selected != const(false))) {
		point = extractStruct(style, MRipplePosition(const(zeroPoint))).position;
		color = extractStruct(style, MRippleColor(const(if (getLightBackground(parent)) MBlack() else MWhite()))).color;
		opacity = extractStruct(style, MRippleOpacity(const(1.0))).opacity;
		shape = extractStruct(style, MRippleShape("")).component;
		overlay = extractStruct(style, MRippleOverlay(true)).overlay;

		TransformTAcc2(\t2a -> {
			b1 = content |> t2a;
			rippleWH = tryExtractStruct(style, MRippleWidthHeight(const(WidthHeight(0., 0.))));
			showRipple = fmin(fneq(rippleType, MNoRipple()), fmax(fmax(selected, focused), fmax(hovered, triggered)));

			wd = eitherMap(rippleWH, \b -> fselect(b.wh, FLift(\wh -> wh.width)), b1.metrics.width);
			hgt = eitherMap(rippleWH, \b -> fselect(b.wh, FLift(\wh -> wh.height)), b1.metrics.height);
			box = eitherMap(rippleWH, \b -> b.wh, fwidthheight(b1.metrics.width, b1.metrics.height));

			egrowth = makeMEasing(0.6, mStandartCurve, manager.manager.deltaTimer);
			efade = makeMEasing(0.6, mStandartCurve, manager.manager.deltaTimer);

			next(egrowth.percent, 0.0);
			next(efade.percent, 1.0);

			startingPoint = ref fgetValue(point);

			disp =
				[
					makeSubscribe2(trigger, \tr -> {
						if (tr) {
							startingPoint := fgetValue(point);

							efade.stop();
							egrowth.start();
						} else {
							efade.start();
						}
					})()
				];

			opacityPercent =
				fmultiply(
					fif(
						fmax(triggered, selected),
						fmax(fsubtract(const(0.16), fmultiply(efade.percent, const(0.16))), fif(selected, const(0.08), zero)),
						fif(focused, const(0.12), fif(hovered, const(0.04), zero))
					),
					fif(fselect(color, FLift(\c -> MColor2int(c) != black)), const(2.0), const(1.0))
				);
			rippleOpacity = fmultiply(opacity, opacityPercent);
			radiusPercent = fif(triggered, egrowth.percent, fif(fmax3(focused, hovered, selected), const(1.0), zero));
			radius = fmultiply(fselect(box, FLift(\b -> sqrt(b.width * b.width + b.height * b.height))), radiusPercent);
			position =
				fif(
					fmax(feq(rippleType, MRippleCenter()), fmin(fmax3(focused, hovered, selected), fnot(triggered))),
					fselect2(box, radius, FLift2(\b, r -> Point(b.width / 2.0 - r * 2.0, b.height / 2.0 - r * 2.0))),
					fselect(radius, FLift(\r -> Point(^startingPoint.x - r * 2.0, ^startingPoint.y - r * 2.0)))
				);

			rippleContent =
				FAlpha(
					rippleOpacity,
					FTranslate(
						fselect(position, FLift(\pt -> pt.x)),
						fselect(position, FLift(\pt -> pt.y)),
						FScale(
							radius,
							radius,
							FMutable(fselect(color, FLift(\c -> FCircle(1.0, [MFill(c)]))))
						)
					)
				);

			rippleFForm = \ -> {
				rippleContent
				|> (\f ->
					if (shape != "") {
						container = FMaterialShape(parent, [Fill(black)], shape);

						FMask(f, FMutable(fselect(box, container |> FLift)))
					} else {
						FCrop(zero, zero, wd, hgt, f)
					}
				)
			};

			contentFForm =
				if (isSome(rippleWH))
					FTranslate(
						fdivide(fmax(fsubtract(wd, b1.metrics.width), const(0.)), const(2.)),
						fdivide(fmax(fsubtract(hgt, b1.metrics.height), const(0.)), const(2.)),
						b1.form
					)
				else
					b1.form;

			TAcc(
				FDecorator(
					contentFForm,
					[
						Pair(
							showRipple,
							rippleFForm
						)
					],
					overlay
				),
				if (isSome(rippleWH))
					TFormMetrics(
						wd,
						hgt,
						faddition(b1.metrics.baseline, fdivide(fmax(fsubtract(hgt, b1.metrics.height), const(0.)), const(2.)))
					)
				else
					b1.metrics,
				b1.minWidth,
				b1.minHeight,
				b1.maxWidth,
				b1.maxHeight,
				b1.xFillers,
				b1.yFillers,
				b1.addFillers,
				b1.xConstant,
				b1.yConstant,
				concat(
					b1.disposers,
					disp
				)
			)
		})
	} else
		content
}