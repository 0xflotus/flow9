import fform/fformutils;

export {
	renderF3DScene(scene : F3DScene, onLoad : (native) -> [() -> void]) -> [() -> void];
	renderF3DObject(object : F3DObject, onLoad : (native) -> [() -> void]) -> [() -> void];
}

renderF3DScene(scene : F3DScene, onLoad : (native) -> [() -> void]) -> [() -> void] {
	clip = make3DScene();

	concat(
		onLoad(clip),
		[
			makeSubscribeUns(scene.objects, \ob ->
				map(ob, \o -> renderF3DObject(o, \c -> { addChild(clip, c); [\ -> removeChild(clip, c)] }))
				|> concatA
			)()
		]
	)
}

renderF3DObject(object : F3DObject, onLoad : (native) -> [() -> void]) -> [() -> void] {
	switch (object : F3DObject) {
		F3DPosition(innerObject, x, y, z) : {
			r = renderF3DObject(
				innerObject,
				\clip -> {
					concat(
						onLoad(clip),
						[
							makeSubscribe(x, \v -> set3DObjectX(clip, v))(),
							makeSubscribe(y, \v -> set3DObjectY(clip, v))(),
							makeSubscribe(z, \v -> set3DObjectZ(clip, v))()
						]
					)
				}
			);

			r;
		}
		F3DRotation(innerObject, x, y, z) : {
			r = renderF3DObject(
				innerObject,
				\clip ->
					concat(
						onLoad(clip),
						[
							makeSubscribe(x, \v -> set3DObjectRotationX(clip, v))(),
							makeSubscribe(y, \v -> set3DObjectRotationY(clip, v))(),
							makeSubscribe(z, \v -> set3DObjectRotationZ(clip, v))()
						]
					)
			);

			r;
		}
		F3DScale(innerObject, x, y, z) : {
			r = renderF3DObject(
				innerObject,
				\clip ->
					concat(
						onLoad(clip),
						[
							makeSubscribe(x, \v -> set3DObjectScaleX(clip, v))(),
							makeSubscribe(y, \v -> set3DObjectScaleY(clip, v))(),
							makeSubscribe(z, \v -> set3DObjectScaleZ(clip, v))()
						]
					)
			);

			r;
		}
		F3DLookAt(innerObject, x, y, z, update) : {
			r = renderF3DObject(
				innerObject,
				\clip ->
					concat(
						onLoad(clip),
						[
							make4Subscribe(x, y, z, update, \v1, v2, v3, __ -> set3DObjectLookAt(clip, v1, v2, v3))()
						]
					)
			);

			r;
		}
		F3DCamera() : {
			renderF3DCamera(object, onLoad);
		}
		F3DMesh(geometry, material) : {
			onLoad(make3DMesh(renderF3DGeometry(geometry), renderF3DMaterial(material)));
		}
		F3DLoader(objUrl, mtlUrl) : {
			uns = ref [];

			load3DObject(objUrl, mtlUrl, \obj -> {
				uns := onLoad(obj);
			});

			[
				\ -> dispUnsA(uns)
			]
		}
	}
}

renderF3DCamera(camera : F3DCamera, onLoad : (native) -> [() -> void]) -> [() -> void] {
	switch (camera : F3DCamera) {
		F3DPerspectiveCamera(fov, aspect, near, far): {
			clip = make3DPerspectiveCamera(fgetValue(fov), fgetValue(aspect), fgetValue(near), fgetValue(far));

			concat(
				onLoad(clip),
				[
					makeSubscribe2(fov, \v -> set3DCameraFov(clip, v))(),
					makeSubscribe2(aspect, \v -> set3DCameraAspect(clip, v))(),
					makeSubscribe2(near, \v -> set3DCameraNear(clip, v))(),
					makeSubscribe2(far, \v -> set3DCameraFar(clip, v))()
				]
			)
		}
	}
}

renderF3DGeometry(geometry : F3DGeometry) -> native {
	switch (geometry : F3DGeometry) {
		F3DBoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) : {
			make3DBoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments);
		}
		F3DCircleGeometry(radius, segments, thetaStart, thetaLength) : {
			make3DCircleGeometry(radius, segments, thetaStart, thetaLength);
		}
		F3DConeGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) : {
			make3DConeGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
		}
		F3DCylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) : {
			make3DCylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
		}
	}
}

renderF3DMaterial(material : F3DMaterial) -> native {
	switch (material : F3DMaterial) {
		F3DMeshBasicMaterial(color, parameters) : {
			make3DMeshBasicMaterial(color, parameters |> tree2pairs |> (\p -> map(p, \v -> [v.first, v.second])));
		}
	}
}