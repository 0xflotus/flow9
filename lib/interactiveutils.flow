
import form;

export {
	///////////////////////////////////////
	// Mouse and keys
	///////////////////////////////////////

	// This absorbs all mouse events in the given generated form
	absorbMouseEvents(f : Form) -> Form;
	// This absorbs all key events in the given generated form
	absorbKeyEvents(f : Form) -> Form;

	mouseClickHelper(fn : () -> bool) -> (bool, () -> MouseInfo) -> bool;
	mouseInsideClickHelper(fn : () -> bool) -> (bool, () -> MouseInfo) -> bool;
	mouseInsideClickHelperTrueWithCoord(fn : (double, double) -> void) -> (bool, () -> MouseInfo) -> bool;
	mouseOutsideClickHelper(fn : () -> bool) -> (bool, () -> MouseInfo) -> bool;

	keyClickHelper(fn : (KeyEvent) -> bool) -> (bool, KeyEvent) -> bool;
}


///////////////////////////////////////
// Mouse and keys
///////////////////////////////////////

// This absorbs all mouse events in the given form
absorbMouseEvents(f : Form) -> Form {
	mouseInsideHandler = \e -> {
		mi = e();
		mi.inside;
	};

	Interactive([
		MouseDown(\mi -> mi.inside()),
		MouseMove(mouseInsideHandler),
		MouseUp(mouseInsideHandler)
	], f);
}

// This absorbs all key events in the given generated form
absorbKeyEvents(f : Form) -> Form {
	keyInsideHandler = \handled, ke -> {
		true;
	};

	Interactive([
		KeyDown2(keyInsideHandler),
		KeyUp2(keyInsideHandler)
	], f);
}

mouseClickHelper(fn : () -> bool) -> (bool, () -> MouseInfo) -> bool {
	\handled, e -> {
		if (!handled) {
			mi = e();
			if (mi.inside) {
				fn()
			} else {
				false
			}
		} else {
			handled;
		}
	}
}

mouseInsideClickHelper(fn : () -> bool) -> (bool, () -> MouseInfo) -> bool {
	\handled, e -> {
		mi = e();
		if (mi.inside) {
			fn()
		} else {
			handled
		}
	}
}

mouseInsideClickHelperTrueWithCoord(fn : (double, double) -> void) -> (bool, () -> MouseInfo) -> bool {
	\handled, e -> {
		mi = e();
		if (mi.inside) {
			fn(mi.x, mi.y);
			true
		} else {
			handled
		}
	}
}

mouseOutsideClickHelper(fn : () -> bool) -> (bool, () -> MouseInfo) -> bool {
	\handled, e -> {
		mi = e();
		if (!mi.inside) {
			fn()
		} else {
			handled
		}
	}
}

keyClickHelper(fn : (KeyEvent) -> bool) -> (bool, KeyEvent) -> bool {
	\handled, ke -> {
		if (!handled) {
			fn(ke)
		} else {
			handled;
		}
	}
}

