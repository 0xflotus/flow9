import form;
import geometry;
import matrix;

export {
	apply2dPointTransform(p : Point, matrix : [[double]]) -> Point;
	apply2dPathTransform(path : [StaticGraphicOp], matrix : [[double]]) -> [StaticGraphicOp];
	apply2dTransform(g : Graphics, matrix : [[double]]) -> Graphics;
	
	make2dTransform_nop() -> [[double]];
	make2dTransform_translate(dx : double, dy : double) -> [[double]];
	make2dTransform_scale(sx : double, sy : double) -> [[double]]; // NOTE: negative scales allowed
	make2dTransform_rotate(degrees : double) -> [[double]];
	make2dTransform_rotate2(degrees : double, axisX : double, axisY : double) -> [[double]];

	// To combine matrices use multiplyMatrices() function from matrix.flow
}

apply2dPointTransform(p : Point, matrix : [[double]]) -> Point {
	m = p.x * matrix[0][2] + p.y * matrix[1][2] + matrix[2][2];
	Point(
		(p.x * matrix[0][0] + p.y * matrix[1][0] + matrix[2][0]) / m,
		(p.x * matrix[0][1] + p.y * matrix[1][1] + matrix[2][1]) / m
	)
}

apply2dPathTransform(path : [StaticGraphicOp], matrix : [[double]]) -> [StaticGraphicOp] {
	map(path, \op -> switch(op) {
		MoveTo(x, y): { p = apply2dPointTransform(Point(x,y), matrix); MoveTo(p.x, p.y) }
		LineTo(x, y): { p = apply2dPointTransform(Point(x,y), matrix); LineTo(p.x, p.y) }
		CubicBezierTo(x, y, cx, cy): { p = apply2dPointTransform(Point(x,y), matrix); cp = apply2dPointTransform(Point(cx,cy), matrix); CubicBezierTo(p.x, p.y, cp.x, cp.y) }
		QuadraticBezierTo(x, y, cx, cy): { p = apply2dPointTransform(Point(x,y), matrix); cp = apply2dPointTransform(Point(cx,cy), matrix); QuadraticBezierTo(p.x, p.y, cp.x, cp.y) }
		ClosePath(): op;
	})
}

apply2dTransform(g : Graphics, matrix : [[double]]) -> Graphics {
	Graphics(
		apply2dPathTransform(g.path, matrix),
		g.style
	)
}

make2dTransform_nop() {
	[
		[1.0, 0.0, 0.0],
		[0.0, 1.0, 0.0],
		[0.0, 0.0, 1.0],
	]
}

make2dTransform_translate(dx, dy) {
	[
		[1.0, 0.0, 0.0],
		[0.0, 1.0, 0.0],
		[ dx,  dy, 1.0],
	]
}


make2dTransform_scale(sx, sy) {
	[
		[ sx, 0.0, 0.0],
		[0.0,  sy, 0.0],
		[0.0, 0.0, 1.0],
	]
}

make2dTransform_rotate(degrees) {
	[
		[cosinus(degrees),   -sinus(degrees), 0.0],
		[  sinus(degrees),  cosinus(degrees), 0.0],
		[             0.0,               0.0, 1.0],
	]
}

make2dTransform_rotate2(degrees, axisX, axisY) {
	t1 = make2dTransform_translate(-axisX, -axisY);
	t2 = make2dTransform_rotate(degrees);
	t3 = make2dTransform_translate(axisX, axisY);
	multiplyMatrices(multiplyMatrices(t1, t2), t3)
}
