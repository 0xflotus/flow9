import string;

export {

	native initDeviceInfo : io(OnDeviceInfoReady : () -> void) -> void = MediaRecorderSupport.initDeviceInfo;

	makeMediaRecorder(destination : [MediaRecorderDestination], styles : [MediaRecorderStyle]) -> void;

	requestAudioInputDevices(OnDevicesReady : ([MediaRecorderInputDevice]) -> void) -> void;
	requestVideoInputDevices(OnDevicesReady : ([MediaRecorderInputDevice]) -> void) -> void;

	MediaRecorderDestination ::= MediaRecorderWebsocketURI, MediaRecorderFilePath;

	MediaRecorderWebsocketURI(uri : string);
	MediaRecorderFilePath(uri : string);

	MediaRecorderStyle ::= MediaRecorderTimeslice, MediaRecorderVideoMimeType,
		MediaRecorderRecordAudio, MediaRecorderRecordVideo, MediaRecorderVideoDeviceId, MediaRecorderAudioDeviceId,
		//EvenListeners
		MediaRecorderOnWebSocketError,
		MediaRecorderOnRecorderReady,
		MediaRecorderOnMediaStreamReady,
		MediaRecorderOnRecorderError;

	MediaRecorderRecordAudio(record: bool);	 
	MediaRecorderRecordVideo(record: bool);
	MediaRecorderAudioDeviceId(deviceId: string);
	MediaRecorderVideoDeviceId(deviceId: string);

	MediaRecorderTimeslice(timeslice : int);
	MediaRecorderVideoMimeType(mimeType : string);

	MediaRecorderOnWebSocketError(onError : (string) -> void);
	MediaRecorderOnRecorderReady(onControlsReady : (MediaRecorderControls) -> void);
	MediaRecorderOnMediaStreamReady(onMediaStreamReady : (native) -> void);
	MediaRecorderOnRecorderError(onError : (string) -> void);

	MediaRecorderControls(start : () -> void, resume : () -> void, pause : () -> void, stop : () -> void);

	MediaRecorderInputDevice(deviceId : string, label : string);

}

requestAudioInputDevices(OnDevicesReady : ([MediaRecorderInputDevice]) -> void) -> void {
	deviceInfoReady = \deviceIds, labels -> {
		mapi(deviceIds, \i, deviceId -> {
			MediaRecorderInputDevice(deviceId, labels[i]);
		})
		|>	OnDevicesReady;
	};

	requestAudioInputDevicesNative(deviceInfoReady);
}

requestVideoInputDevices(OnDevicesReady : ([MediaRecorderInputDevice]) -> void) -> void {
	deviceInfoReady = \deviceIds, labels -> {
		mapi(deviceIds, \i, deviceId -> {
			MediaRecorderInputDevice(deviceId, labels[i]);
		})
		|>	OnDevicesReady;
	};

	requestVideoInputDevicesNative(deviceInfoReady);
}

makeMediaRecorder(destination : [MediaRecorderDestination], styles : [MediaRecorderStyle]) -> void {

	websocketUri = extractStruct(destination, MediaRecorderWebsocketURI("")).uri;
	filePath = extractStruct(destination, MediaRecorderFilePath("")).uri;

	timeslice = extractStruct(styles, MediaRecorderTimeslice(5000)).timeslice;
	videoMimeType = extractStruct(styles, MediaRecorderVideoMimeType("")).mimeType;

	recordAudio = extractStruct(styles, MediaRecorderRecordAudio(true)).record;
	recordVideo = extractStruct(styles, MediaRecorderRecordVideo(true)).record;

	videoDeviceId = extractStruct(styles, MediaRecorderVideoDeviceId("")).deviceId;
	audioDeviceId = extractStruct(styles, MediaRecorderAudioDeviceId("")).deviceId;

	OnWebSocketError = extractStruct(styles, MediaRecorderOnWebSocketError(nop1)).onError;
	flowMediaRecorderReady = extractStruct(styles, MediaRecorderOnRecorderReady(nop1)).onControlsReady;
	OnMediaStreamReady = extractStruct(styles, MediaRecorderOnMediaStreamReady(nop1)).onMediaStreamReady;
	OnRecorderError = extractStruct(styles, MediaRecorderOnRecorderError(nop1)).onError;

	OnRecorderReady = \recorder -> {
		flowMediaRecorderReady(MediaRecorderControls(
			\ -> startRecording(recorder, timeslice),
			\ -> resumeRecording(recorder),
			\ -> pauseRecording(recorder),
			\ -> stopRecording(recorder)
		));
	};

	makeMediaRecorderNative(websocketUri, filePath, timeslice, videoMimeType, recordAudio, recordVideo, videoDeviceId, audioDeviceId,
							OnWebSocketError, OnRecorderReady, OnMediaStreamReady, OnRecorderError);

}

native requestAudioInputDevicesNative : io(OnDeviceInfoReady : ([string], [string]) -> void) -> void = MediaRecorderSupport.requestAudioInputDevices;

native requestVideoInputDevicesNative : io(OnDeviceInfoReady : ([string], [string]) -> void) -> void = MediaRecorderSupport.requestVideoInputDevices;

native startRecording : io(recorder : native, timeslice : int) -> void = MediaRecorderSupport.startRecording;
native resumeRecording : io(recorder : native) -> void = MediaRecorderSupport.resumeRecording;
native pauseRecording : io(recorder : native) -> void = MediaRecorderSupport.pauseRecording;
native stopRecording : io(recorder : native) -> void = MediaRecorderSupport.stopRecording;

native makeMediaRecorderNative : io(websocketUri : string, filePath : string, timeslice : int, videoMimeType : string,
	recordAudio : bool, recordVideo : bool, videoDeviceId : string, audioDeviceId : string,
	OnWebSocketError : (string) -> void, OnRecorderReady : (native) -> void, OnMediaStreamReady : (native) -> void,
	OnRecorderError : (string) -> void) -> void = MediaRecorderSupport.makeMediaRecorder;
