import maybe;
import form;


export {
	// Register a parser for the `` wiki notation that parses the string between the quotes and displays with the given color and font size. None is it does not parse
	setFormulaFormBuilder(fn : (ascii : string, fontColor : int, fontSize : double) -> Maybe<Form>) -> void;
	useFormulaFormBuilder(formula : string, fontColor : int, fontSize : double) -> Maybe<Form>;
	existFormulaFormBuilder() -> bool;
	// Register a parser for the `` wiki notation that parses the string between the quotes, and returns a textual 508 compliant description for it
	setFormulaTextBuilder(fn : (ascii : string, style : [FormulaToTextStyle]) -> Maybe<string>) -> void;
	useFormulaTextBuilder(formula : string, style : [FormulaToTextStyle]) -> Maybe<string>;
	FormulaToTextStyle ::= LiteraryDecimalPart;
	LiteraryDecimalPart : ();
}

formulaFormBuilder : ref Maybe<(string, int, double) -> Maybe<Form>> = ref None();

existFormulaFormBuilder() -> bool {
	^formulaFormBuilder != None();
}

setFormulaFormBuilder(fn : (string, int, double) -> Maybe<Form>) -> void {
	formulaFormBuilder := Some(fn);
}

useFormulaFormBuilder(formula : string, fontColor : int, fontSize : double) -> Maybe<Form> {
	switch(^formulaFormBuilder) {
		Some(fn): {
			fn(formula, fontColor, fontSize)
		}
		None(): None();
	}
}

formulaTextBuilder : ref Maybe<(string, [FormulaToTextStyle]) -> Maybe<string>> = ref None();

setFormulaTextBuilder(fn : (string, style : [FormulaToTextStyle]) -> Maybe<string>) -> void {
	formulaTextBuilder := Some(fn);
}

useFormulaTextBuilder(formula : string, style : [FormulaToTextStyle]) -> Maybe<string> {
	switch(^formulaTextBuilder) {
		Some(fn): {
			fn(formula, style)
		}
		None(): None();
	}
}