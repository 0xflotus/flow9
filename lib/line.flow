import gui;

export {
	alignBaseline : (line : [Form]) -> Triple<[Form], Behaviour<double>, Behaviour<double>>;

	alignBaseline2 : (line : [Form]) -> Triple<[Pair<Form, Behaviour<double>>], Behaviour<double>, Behaviour<double>>;

	Line(forms : [Form]) -> Form;
}


// Aligns all elements to the baseline, as well as calculates the height and the baseline
alignBaseline(line : [Form]) -> Triple<[Form], Behaviour<double>, Behaviour<double>> {
	tmp = line |> alignBaseline2;
	Triple(
		map(tmp.first, firstOfPair),
		tmp.second,
		tmp.third
	)
};

// Triple<[Pair<form, offset>], height(summary), baseline(summury)>
alignBaseline2(line : [Form]) -> Triple<[Pair<Form, Behaviour<double>>], Behaviour<double>, Behaviour<double>> {
	if (forall(line, isStaticForm)) { // static line
		metrics = map(line, getStaticFormSize);
		maxAsc = fold(metrics, 0.0, \ac, m -> max(ac, m.baseline));
		maxHeight = fold(metrics, 0.0, \ac, m -> max(ac, maxAsc + m.height - m.baseline));

		zipFn : (Form, FormMetrics) -> Pair<Form, Behaviour<double>> = \f, m -> {
			offset = maxAsc - m.baseline;
			if (offset > 0.0) Pair(Border(0.0, offset, 0.0, 0.0, f), const(offset)) else Pair(f, const(0.0))
		};

		Triple(
			zipWith(line, metrics, zipFn),
			const(maxHeight),
			const(maxAsc)
		);
	} else { // dynamic line
		dMetrics = map(line, getDynamicFormSize);
		themetrics = map(dMetrics, secondOfPair);
		merged = merge(themetrics);
		maxAsc = select(merged, \met -> fold(met, 0.0, \acc, m -> max(acc, m.baseline)))
			|> distinctUntilChanged;

		maxDesc = select(merged, \met -> fold(met, 0.0, \acc, m -> max(acc, m.height - m.baseline)))
			|> distinctUntilChanged;

		maxHeight = select2(maxAsc, maxDesc, \a,d -> a + d) |> distinctUntilChanged;

		Triple(
			map(dMetrics, unpairC(\f : Form, metrics : Behaviour<FormMetrics> -> {
				offset = select2(maxAsc, metrics, \ma, c -> ma - c.baseline);
				Pair(Translate(const(0.0), offset, f), offset)
			})),
			maxHeight,
			maxAsc
		);
	}
}

Line(forms : [Form]) -> Form {
	t = alignBaseline2(forms);
	Cols(map(t.first, firstOfPair))
}

