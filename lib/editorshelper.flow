// Â© Copyright 2014 Area9 Innovation. All rights reserved

import runtime;
import shape/shape_editor_types;
import wigi/toolbar_types;

export {
	SetSmartArtEditor : ((value : string, onOK : (string)-> void, onCancel : ()-> void, style : [ShapeEditorStyle]) ->  void) -> void;
	CallSmartArtEditor : (value : string, onOK : (string)-> void, onCancel : ()-> void, style : [ShapeEditorStyle]) ->  void;
	isSetSmartArtEditor: () -> bool;

	SetFormdesignerEditor : ((parameters : [KeyValue], onOK : (filename : string, content : string) -> void, onCancel : () -> void) ->  void) -> void;
	CallFormdesignerEditor : (parameters : [KeyValue], onOK : (filename : string, content : string) -> void, onCancel : () -> void) ->  void;
	isSetFormdesignerEditor: () -> bool;

	// value format: WigiElement object serialized to string
	// onOK(string): WigiElement object serialized to string
	SetWigiEditor : ((value : string, width : double, height : double, toolbarStyles: [WigiToolbarStyle], onOK : (string)-> void, onCancel : ()-> void) ->  void) -> void;
	CallWigiEditor : (value : string, onOK : (string)-> void, onCancel : ()-> void) ->  void;
	CallWigiEditorCustom : (value : string, width : double, height : double, toolbarStyles: [WigiToolbarStyle], onOK : (string)-> void, onCancel : ()-> void) ->  void;
	isSetWigiEditor : () -> bool;

	SetWikiEditor : ((value : string, editorSize : WidthHeight, previewFnM : Maybe<(string) -> Form>, onOK : (string)-> void, onCancel : ()-> void) -> void) -> void;
	CallWikiEditor : (value : string, editorSize : WidthHeight, previewFnM : Maybe<(string) -> Form>, onOK : (string)-> void, onCancel : ()-> void) -> void;
	isSetWikiEditor : () -> bool;

	SetSmartArt2htmlParser : (parser : (sa : string) -> Maybe<[?]>) -> void;
	CallSmartArt2htmlParser : (sa : string) -> Maybe<[?]>;
	isSetSmartArt2htmlParser : () -> bool;
}

SmartArtEditor : ref Maybe<(string, (string)-> void, ()-> void, [ShapeEditorStyle]) -> void> = ref None();

SetSmartArtEditor(editor){
	SmartArtEditor := Some(editor);
}

CallSmartArtEditor(value, onOK, onCancel, style) {
	eitherFn(^SmartArtEditor, \fn -> fn(value, onOK, onCancel, style), \-> println("SmartArt editor API is not initialized."))
}

isSetSmartArtEditor() -> bool {
	isSome(^SmartArtEditor)
}

////////////////////////////////

FormdesignerEditor : ref Maybe<([KeyValue], (string, string) -> void, () -> void) ->  void> = ref None();

SetFormdesignerEditor(editor){
	FormdesignerEditor := Some(editor);
}

CallFormdesignerEditor(parameters, onOK, onCancel) {
	eitherFn(^FormdesignerEditor, \fn -> fn(parameters, onOK, onCancel), \-> println("Formdesigner editor API is not initialized."))
}

isSetFormdesignerEditor() -> bool {
	isSome(^FormdesignerEditor)
}

////////////////////////////////

WigiEditor : ref Maybe<(string, double, double, [WigiToolbarStyle], (string)-> void, ()-> void) ->  void> = ref None();

SetWigiEditor(parser){
	WigiEditor := Some(parser);
}

CallWigiEditor(value, onOK, onCancel) {
	eitherFn(^WigiEditor, \fn -> fn(value, 700.0, 300.0, [DisableProof()], onOK, onCancel), \-> println("Wigi editor API is not initialized."))
}

CallWigiEditorCustom(value : string, width : double, height : double, toolbarStyles: [WigiToolbarStyle], onOK : (string)-> void, onCancel : ()-> void) ->  void {
	eitherFn(^WigiEditor, \fn -> fn(value, width, height, toolbarStyles, onOK, onCancel), \-> println("Wigi editor API is not initialized."))
}

isSetWigiEditor() -> bool {
	isSome(^WigiEditor)
}

////////////////////////////////

WikiEditor : ref Maybe<(string, WidthHeight, Maybe<(string) -> Form>, (string)-> void, ()-> void) -> void> = ref None();

SetWikiEditor(parser){
	WikiEditor := Some(parser);
}

CallWikiEditor(value, editorSize, previewFnM, onOk, onCancel) {
	eitherFn(^WikiEditor, \fn -> fn(value, editorSize, previewFnM, onOk, onCancel), \-> println("Wiki editor API is not initialized."))
}

isSetWikiEditor() -> bool {
	isSome(^WikiEditor)
}

////////////////////////////////

SmartArt2htmlParser : ref Maybe<((string) -> Maybe<[?]>)> = ref None();

SetSmartArt2htmlParser(parser) {
	SmartArt2htmlParser := Some(parser)
}

CallSmartArt2htmlParser(sa) { 
	eitherFn(^SmartArt2htmlParser, \fn -> fn(sa), \-> { println("SmartArt 2 html API is not initialized."); None()})
}

isSetSmartArt2htmlParser() -> bool {
	isSome(^SmartArt2htmlParser)
}