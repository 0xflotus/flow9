import string;

// http://blog.teamtreehouse.com/getting-started-speech-synthesis-api
export {
	// We have to call it to initialize voices.
	initSpeechSynthesis() -> void;

	// Create new utterance and add it to SpeechSynthesis. Utterance is paused by default.
	speechSynthesis(speak : string, styles : [SpeechSynthesisStyle]) -> void;

	// What voices exist that can speak this language? The language is a language tag
	// https://w3c.github.io/speech-api/speechapi.html#dfn-voicelang
	findSpeechSynthesisVoices(language : string, onDone : ([SpeechSynthesisVoice]) -> void) -> void;

	resumeSpeechSynthesis() -> void;

	pauseSpeechSynthesis() -> void;

	// Remove all utterances from SpeechSynthesis
	clearSpeechSynthesisQueue() -> void;

	// https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API
	// https://w3c.github.io/speech-api/speechapi.html#tts-section
	SpeechSynthesisStyle ::= SpeechSynthesisVoice, SpeechSynthesisVolume,
		SpeechSynthesisRate, SpeechSynthesisPitch,
		// Events
		SpeechSynthesisOnReady,
		SpeechSynthesisOnBoundary,
		SpeechSynthesisOnEnd,
		SpeechSynthesisOnError;

		// What voice to use. Use getSpeechSynthesisVoices() to get a list of possible voices
		SpeechSynthesisVoice(url : string, name : string, language : string);

		// 0: lowest volume, 1: highest
		SpeechSynthesisVolume(volume : double);

		// Speedup double from 0.1 to 10. 1: default rate, 2 is twice as fast, 0.5 is twice as slow
		SpeechSynthesisRate(rate : double);

		// From 0 and 2. 0 is the lowest pitch, 2 the highest pitch. 1 corresponds to the default pitch of the speech synthesis engine or specific voice.
		SpeechSynthesisPitch(pitch : double);

		SpeechSynthesisOnReady(onReady : () -> void );

		SpeechSynthesisOnBoundary(onBoundary : (charIndex : int, elapsedTime : double) -> void );

		SpeechSynthesisOnEnd(onEnd : () -> void);

		SpeechSynthesisOnError(onError : () -> void);

}

initSpeechSynthesis() -> void {
	getAvailableVoices(nop1);
}

speechSynthesis(speak : string, styles : [SpeechSynthesisStyle]) -> void {
	voice = extractStruct(styles, SpeechSynthesisVoice("", "", ""));
	pitch = extractStruct(styles, SpeechSynthesisPitch(1.0)).pitch;
	rate = extractStruct(styles, SpeechSynthesisRate(1.0)).rate;
	volume = extractStruct(styles, SpeechSynthesisVolume(1.0)).volume;

	onReady = extractStruct(styles, SpeechSynthesisOnReady(nop)).onReady;
	onBoundary = extractStruct(styles, SpeechSynthesisOnBoundary(nop2)).onBoundary;
	onEnd = extractStruct(styles, SpeechSynthesisOnEnd(nop)).onEnd;
	onError = extractStruct(styles, SpeechSynthesisOnError(nop)).onError;

	performSpeechSynthesis(speak, voice.url, voice.language, pitch, rate, volume, onReady, onBoundary, onEnd, onError);
}

findSpeechSynthesisVoices(language : string, onDone : ([SpeechSynthesisVoice]) -> void) -> void {
	getAvailableVoices(\voices -> {
		filteredVoices = fold(voices, [], \acc, v -> {
			lang = elementAt(v, 2, "");
			if (language == "" || startsWith(lang, language)) {
				url = elementAt(v, 0, "");
				name = elementAt(v, 1, "");
				arrayPush(acc, SpeechSynthesisVoice(url, name, lang))
			} else acc
		});
		onDone(filteredVoices);
	});
}

resumeSpeechSynthesis() -> void {
	resumeSpeechSynthesisNative();
}

pauseSpeechSynthesis() -> void {
	pauseSpeechSynthesisNative();
}

clearSpeechSynthesisQueue() -> void {
	clearSpeechSynthesisQueueNative();
}

native getAvailableVoices : io (callback : ([[string]]) -> void) -> void = SoundSupport.getAvailableVoices;
getAvailableVoices(callback : ([[string]]) -> void) -> void {
	callback([])
}

native performSpeechSynthesis : io (speak : string, voiceUri : string, lang : string, pitch : double, rate : double, volume : double,
	onReady : () -> void, onBoundary : (charIndex : int, elapsedTime : double) -> void, onEnd : () -> void,	
	onError : () -> void) -> void = SoundSupport.performSpeechSynthesis;
performSpeechSynthesis(speak : string, voiceUri : string, lang : string, pitch : double, rate : double, volume : double,
	onReady : () -> void, onBoundary : (charIndex : int, elapsedTime : double) -> void, onEnd : () -> void,
	onError : () -> void) -> void { }

native resumeSpeechSynthesisNative : io () -> void = SoundSupport.resumeSpeechSynthesisNative;
resumeSpeechSynthesisNative() -> void { }

native pauseSpeechSynthesisNative : io () -> void = SoundSupport.pauseSpeechSynthesisNative;
pauseSpeechSynthesisNative() -> void { }

native clearSpeechSynthesisQueueNative : io () -> void = SoundSupport.clearSpeechSynthesisQueueNative;
clearSpeechSynthesisQueueNative() -> void { }
