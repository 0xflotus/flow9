import wigi/wigi_engine_types;
import wigi/wigi2html_types;

export {
	WigifyStyle ::= WigiTemplatePreview, WigifyEngine, WigifyNamespace, WigifySkipRegisterToEngine, WidthHeight,
		SkipWigiEngineCallbacksCalling, WigiEditorPreview, WigifyNoScroll, WigifyNoScrollUseSize, WigiHtmlFontMapping,
		WigiAnnotationsManager;

			// This means that placeholder texts will be visible (used in templates preview)
			WigiTemplatePreview();
			// Provide an engine for all the state - otherwise, we use a dummy
			WigifyEngine(engine : WigiEngine);
			// Specify what namespaces to use
			WigifyNamespace(stateScope : WigiScope, serviceScope : WigiScope);
			// This option will prevent adding new formulas and values to engine
			WigifySkipRegisterToEngine();
			// Not for common use, false by default
			SkipWigiEngineCallbacksCalling(v : bool);
			// Sometimes, scroll should be external, so it disables internal one.
			// Note: only width of the size is honored, the height of MWigify will be height of content
			WigifyNoScroll();
			// Same as WigifyNoScroll but use MWigify's size argument as lower bound both for height and width
			WigifyNoScrollUseSize();
			// Use this style to provide highlighting of annotated text, dimming of non-annotated text
			// And define what content to build inside margin for annotations specified by array of Ids.
			// Integer key of tree is id of annotation.
			WigiAnnotationsManager(
				annotationsTree : Tree<int, DynamicBehaviour<[BasicCharacterStyle]>>,
				dimmingStyle : DynamicBehaviour<[BasicCharacterStyle]>,
				marginContent : (annotationIds : [int]) -> Form,
				onTextClick : (Maybe<int>) -> void,
				// To proper building of margin content we need to keep some fixed widht for it.
				// Ohtherwise it influnce on paragraphs rendering.
				marginContentWidth : double
			);
}
