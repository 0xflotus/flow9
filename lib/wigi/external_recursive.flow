import wigi/external_block;
import wigi/wigi2php_types;

export {
	// Register API to support external recursive in Wigi
	registerExternalRecursiveAPI(exType : string, api : ExternalRecursiveAPI) -> void;

	// unRegisterExternalBlockAPI(exType: string) -> void;

	ExternalRecursiveAPI: (
		// Return style with description how this element should be presented in menu
		getMenu : () -> [ExternalBlockAPIMenuStyle],
		// Make form from tree of parameters and children
		recursive2form : (
			content : Tree<string, string>,
			engine : WigiEngine,
			styles : [ExtRecAPIRecursive2FormStyle]
		) -> Form,
		// Show popup dialog to edit element properties
		editProperties : (
			content : Tree<string, string>,
			onOK : ExtRecUpdateRecursive,
			engine : WigiEngine,
			styles : [ExtRecAPIEditPropertiesStyle]
		) -> void,
		// the additional functions
		style : [ExternalRecursiveStyle]
	);

	ExtRecAPIRecursive2FormStyle ::= ExtRecWigiRecursiveStyles, ExtRecChildrenWigi, ExtRecChildrenView, ExtRecUpdateRecursive, ContextMenu,
			ExternalDeleteElement, ExtRecBaselineLevel;
		ExtRecWigiRecursiveStyles(styles : [WigiRecursiveStyle]);
		ExtRecChildrenWigi(children : [WigiElement]);
		ExtRecChildrenView(children : [() -> Form]);
		ExtRecUpdateRecursive(fn : (content : Tree<string, string>, children : [WigiElement]) -> void);
		ContextMenu(visible : DynamicBehaviour<bool>);
		// used to alter recursive's baseline level
		ExtRecBaselineLevel(level : DynamicBehaviour<double>);

	ExtRecAPIEditPropertiesStyle ::= ExtRecRootWigiDocument, ExtRecChildrenWigi;
		ExtRecRootWigiDocument(document : WigiElement);

	ExternalRecursiveStyle ::= Recursive2HTMLFn, Recursive2TextFn, ShowPropertiesDialogBeforeCreating,
			UseParentRecursiveAPI, FormulaKeys, ElementSpecificFixup, CalculateRecursiveFn,
			ExternalWithPageEditorSupport, Recursive2PhpFn, ExternalRecursiveCanDeleteChild;

		// Function to convert the element to text string.
		Recursive2TextFn(fn : (Tree<string, string>, [WigiElement], WigiEngine) -> string);
		// Function to convert the element to html string.
		Recursive2HTMLFn(fn : (Tree<string, string>, [Wigi2HtmlStyle], [WigiElement]) -> string);
		// It's used for inner WigiExternalREcursives, such as choice_item -> (choice), stepper_item -> (stepper), etc.
		UseParentRecursiveAPI(exType : string);
		// The function to calculate the recursive value. (tree of parameters, engine, scope, children) -> tree of parameters
		CalculateRecursiveFn(fn : (Tree<string, string>, WigiEngine, WigiScope, [WigiElement]) -> Tree<string, string>);
		// Function to convert recursive block to PHP
		Recursive2PhpFn(fn : (Tree<string, string>, PhpContext, [WigiElement], [PhpBlock]) -> PhpBlock);
		// Generally, External recursive treated as flexible about children's count,
		// but some actually have fixed children count, so this style allows to mark them accordingly
		ExternalRecursiveCanDeleteChild(fn : (Tree<string, string>, [WigiElement]) -> bool);

	externalRecursiveStyles(exType : string) -> [ExternalRecursiveStyle];

	// Resolve API by its identifier
	getExternalRecursiveAPI(exType : string) -> Maybe<ExternalRecursiveAPI>;

	// Just apply passed fn to each API
	applyFn2ExternalRecursives(fn: (string, ExternalRecursiveAPI) -> void) -> void;

	foldExternalRecursives(acc : ?, fn : (key : string, value : ExternalRecursiveAPI, acc : ?) -> ?) -> ?;

	dummyContextMenu = \ -> ContextMenu(make(false));
}

externalRecursives : ref Tree<string, ExternalRecursiveAPI> = ref makeTree();

registerExternalRecursiveAPI(exType : string, api : ExternalRecursiveAPI) -> void {
	externalRecursives := setTree(^externalRecursives, exType, api);
}

externalRecursiveStyles(exType : string) -> [ExternalRecursiveStyle] {
	eitherMap(getExternalRecursiveAPI(exType), \api -> api.style, [])
}

// unRegisterExternalBlockAPI(exType: string) -> void {
// 	externalBlocks := removeFromTree(^externalBlocks, exType)
// }

getExternalRecursiveAPI(exType : string) -> Maybe<ExternalRecursiveAPI> {
	lookupTree(^externalRecursives, exType)
}

applyFn2ExternalRecursives(fn : (string, ExternalRecursiveAPI) -> void) -> void {
	traverseInOrder(^externalRecursives, fn);
 	}

foldExternalRecursives(acc : ?, fn : (key : string, value : ExternalRecursiveAPI, acc : ?) -> ?) -> ? {
	foldTree(^externalRecursives, acc, fn)
}
