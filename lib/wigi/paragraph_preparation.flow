import wigi/types;
import textstyles2;
import paragraph3;
import basecolors;
import formats/wiki/wikiui;
import wigi/fontcolor;
import wigi/styles;

export {
	ListedParagraphInfo : (number : int, fontsize: double, indentStep : double, color : int);
	prepareParagraphForRendering(elements : [ParagraphElement], fullStyle : [WigiParagraphStyle], zoom : double,
			listInfo : Maybe<ListedParagraphInfo>, transformFn : (Form, int) -> Form) -> Form;
	isListed(fullStyle : [WigiParagraphStyle]) -> bool;
}

prepareParagraphForRendering(elements : [ParagraphElement], fullStyle : [WigiParagraphStyle], zoom : double,
		listInfo : Maybe<ListedParagraphInfo>, transformFn : (Form, int) -> Form) -> Form {
	newElements = ref elements;
	genIndent = extractStruct(fullStyle, GeneralIndent(0.0)).indent;
	firstLineIndent : FirstLineIndent= extractStruct(fullStyle, FirstLineIndent(0.0));
	newFirstLineIndent = if (isListed(fullStyle) || genIndent > 0.0) {
		if (firstLineIndent.indent > 0.0) {
			newElements := concat([Fixed(zoom * firstLineIndent.indent, 0.0)], ^newElements);
		}
		// add bullet or number if necessary
		listIndent = if (isListed(fullStyle)) {
			listed : Listed = extractStruct(fullStyle, dummyListed);
			markNum = switch(listed.type) {
				Bulleted(b): None();
				Numbered(i, type): Some(i);
			}
			// a form for bullet or number to be placed as the first ParagraphElement
			unpair(listIndex2Form(zoom, fullStyle, listInfo), \form : Form, width -> {
				form2 = eitherMap(markNum, \num -> transformFn(form, num), form);
				newElements := concat([form2], ^newElements);
				width
			})
		} else 0.0;

		if (genIndent > 0.0) {
			newElements := concat([Fixed(zoom * genIndent, 0.0)], ^newElements);
		}

		indent = - (genIndent + listIndent);

		if (listIndent > 0.0) indent - firstLineIndent.indent
		else if (firstLineIndent.indent < 0.0 && genIndent > 0.0) indent + firstLineIndent.indent
		else indent;
	} else {
		zoom * firstLineIndent.indent;
	}

	newIndent = FirstLineIndent(newFirstLineIndent);
	newFullStyle = if (newIndent != firstLineIndent) {
		switch (findi(fullStyle, eq(firstLineIndent))) {
			Some(i): replace(fullStyle, i, newIndent);
			None(): arrayPush(fullStyle, newIndent);
		}
	} else {
		fullStyle
	}

	renderParagraph(^newElements, extractParagraphStyle(newFullStyle));
}

isListed(fullStyle : [WigiParagraphStyle]) -> bool {
	extractStruct(fullStyle, dummyListed) != dummyListed;
}

listIndex2Form(zoom : double, paraFullStyle : [WigiParagraphStyle], listInfo : Maybe<ListedParagraphInfo>) -> Pair<Form, double> {
	listed : Listed = extractStruct(paraFullStyle, dummyListed);
	if (listed == dummyListed) {
		Pair(Empty(), 0.0);
	} else {
		info = either(listInfo, ListedParagraphInfo(1, 0.0, 0.0, -1));
		// set font size from listInfo
		mStyle = appendListStyles(listed.style, info.fontsize, info.color);

		fSize = extractStruct(mStyle, FontSize(11.0)).size;
		markStyle = getCharacterStyleFromWigiTextStyle(zoomFontSize(zoom, mStyle));
		circleColor = extractStruct(mStyle, Fill(-1)).color;

		iconSize = ref 0.0;
		pretty = ref false;
		numberedOffset = ref 0.0;

		markForm = switch(listed.type){
			// override color of dots to text color [http://process.area9.dk/cases/default.asp?45264]]
			// TODO add context "bullet" if and when context-aware version of getTranslation is implemented.
			Bulleted(b): Text(getTranslation(b), markStyle);

			Numbered(i, type): {
				num = if (i == -1) info.number else i;
				dotted = Text(i2s(num) + ".", markStyle);

				/*
					see case http://process.area9.dk/cases/default.asp?47914.
					Here comes magic numbers, we assume numbered paragraph unlikely will have number > 99.
					So that width for '99.' text, will be used to align numbers and paragraphs to look nice.
				*/
				numberedOffset := getStaticFormSizeCached(Text("99.", markStyle)).width;

				switch (type){
					SimpleNumber(): Text(i2s(num), markStyle);
					DottedNumber(): dotted;
					PrettyNumber(): {
						if (num >= 0 && num <= 99) {
 							pretty := true;
 							iconSize :=  72.0 / 96.0 * min(fSize, 80.0);
 							// picture is provided at prettyNumberIconSize*prettyNumberIconSize pixel size
							scale = const(^iconSize / prettyNumberIconSize);
							Scale(scale, scale, makePrettyNumberPicture(num, circleColor))
						} else {
							dotted
						}
					}
				}
			}
		}

		space = fSize / 2.0;

		if (^pretty){
			Pair(
				Scale(const(zoom), const(zoom),
					Baseline(const(fSize * 0.8),
						Cols([
							Align(0.0, 0.5, markForm),
							Fixed(space, fSize)
						])
					)
				)
				|> \f -> FixSize(zoom * (^iconSize + space) , zoom * fSize, f), // get rid of 'number' jumping
				zoom * (^iconSize + space)
			)
		} else {
			numbered = ^numberedOffset > 0.0;

			markForm2 = if (numbered) {
					Group([
						Fixed(^numberedOffset, 0.0),
						Available(const(^numberedOffset), zero,
							Align2(1.0, 0.0, markForm)
						)
					])
				} else {
					markForm;
				}

			Pair(
				Cols([markForm2, Fixed(zoom * space, 0.0)]),
				getStaticFormSizeCached(markForm2).width + zoom * space
			)
		}
	}
}

