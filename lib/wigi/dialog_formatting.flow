import behaviour;
import wigi/types;
import wigi/controller;

export {
	FormattingStyleVariables : (decimalPlacesFormattingB : DynamicBehaviour<int>, 
		useSeparatorFormattingB : DynamicBehaviour<bool>,	negativeFormattingB : DynamicBehaviour<int>, currencyCodeB : DynamicBehaviour<int>,
		dateFormatB : DynamicBehaviour<int>, timeFormatB : DynamicBehaviour<int>, 
		significantDigitsFormattingB : DynamicBehaviour<int>, scientificDigitsFormattingB : DynamicBehaviour<bool>,
		selectedFormattingSectionB : DynamicBehaviour<int>
	);


	// General type for style tabs
	StyleTab: (
		getForm : () -> ?,
		getResult : () -> WigiCellFormatting
	);


	makeFormattingStyleTab(formattingStyle : WigiCellFormatting, getStyleForm : (FormattingStyleVariables) -> ?) -> StyleTab;


	generateWigiTable(c : int, r : int, showGrid : DynamicBehaviour<bool>, sameRowHeight : DynamicBehaviour<bool>,
		showTableHeaders : DynamicBehaviour<bool>, visible_formula : string, tightWidth : bool, dontFitToWidth : bool) -> WigiTable;


	getCurrentTable(state : WigiEditorState) -> WigiTable;
	getCurrentColumnWidth(state : WigiEditorState) -> double;
	getCurrentRowHeight(state : WigiEditorState) -> double;
}

generateWigiTable(c : int, r : int, showGrid : DynamicBehaviour<bool>, sameRowHeight : DynamicBehaviour<bool>, showTableHeaders : DynamicBehaviour<bool>, visible_formula : string, tightWidth : bool, dontFitToWidth : bool) -> WigiTable {
	rules = [
		Pair(getValue(showGrid), WigiShowGrid()),
		Pair(getValue(sameRowHeight), WigiSameRowHeight()),
		Pair(getValue(showTableHeaders), WigiTableShowHeaders()),
		Pair(visible_formula != "", WigiTableVisibleFormula(visible_formula)),
		Pair(tightWidth, WigiTableTightWidth()),
		Pair(dontFitToWidth, WigiTableDontFitToAvailableWidth())
	];
	tableStyle = ifArrayPushMany([WigiTableBorder(1.0, 0.0, 0x7F808285)], rules);

	WigiTable(r, c, generate(0, r * c, \__ -> WigiCellSpan(1, 1)), tableStyle);
}


makeFormattingStyleTab(formattingStyle : WigiCellFormatting, getStyleForm : (FormattingStyleVariables) -> ?) -> StyleTab {
	// Initialize form
	decimalPlacesFormattingB = make(2);
	useSeparatorFormattingB = make(false);
	negativeFormattingB = make(0);
	currencyCodeB = make(0);
	dateFormatB = make(0);
	timeFormatB = make(0);
	significantDigitsFormattingB = make(0);
	scientificDigitsFormattingB = make(false);
	selectedFormattingSectionB = make(-1);

	negativeFormat2int = \negativeFormat: NegativeNumberStyle -> {
		switch(negativeFormat) {
			nnNormal(): 0;
			nnRed(): 1;
			nnBrackets(): 2;
			nnBracketsAndRed(): 3;
		}
	}
	currencyCode2int = \currencyCode -> {
		cCode2int = \code: CurrencyCodeStyle -> {
			switch(code) {
				ccUSD(): 1;
				ccEUR(): 2;
				ccGBP(): 3;
				ccYEN(): 4;
			}
		}
		eitherMap(currencyCode, cCode2int , 0)
	}

	switch(formattingStyle.style) {
		WigiCellFormattingGeneral(): {
			nextDistinct(selectedFormattingSectionB, 0);
		}
		WigiCellFormattingNumber(decimal, useSeparator, negativeFormat, scientific): {
			nextDistinct(decimalPlacesFormattingB, decimal);
			nextDistinct(useSeparatorFormattingB, useSeparator);
			nextDistinct(negativeFormattingB, negativeFormat |> negativeFormat2int);
			nextDistinct(scientificDigitsFormattingB, scientific);
			nextDistinct(selectedFormattingSectionB, 1);
		}
		WigiCellFormattingCurrency(decimal, currencyCode, negativeFormat): {
			nextDistinct(decimalPlacesFormattingB, decimal);
			nextDistinct(currencyCodeB, currencyCode |> currencyCode2int);
			nextDistinct(negativeFormattingB, negativeFormat |> negativeFormat2int);
			nextDistinct(selectedFormattingSectionB, 2);
		}
		WigiCellFormattingDate(dateFormat): {
			nextDistinct(dateFormatB, dateFormat);
			nextDistinct(selectedFormattingSectionB, 3);
		}
		WigiCellFormattingTime(timeFormat): {
			nextDistinct(timeFormatB, timeFormat);
			nextDistinct(selectedFormattingSectionB, 4);
		}
		WigiCellFormattingPercentage(decimal): {
			nextDistinct(decimalPlacesFormattingB, decimal);
			nextDistinct(selectedFormattingSectionB, 5);
		}
		WigiCellFormattingSignificant(digits, scientific): {
			nextDistinct(significantDigitsFormattingB, digits);
			nextDistinct(scientificDigitsFormattingB, scientific);
			nextDistinct(selectedFormattingSectionB, 6);
		}
	}

	getForm = \-> getStyleForm(FormattingStyleVariables(decimalPlacesFormattingB, useSeparatorFormattingB, negativeFormattingB, currencyCodeB, dateFormatB, timeFormatB,
		significantDigitsFormattingB, scientificDigitsFormattingB, selectedFormattingSectionB));

	// getResult
	getResult = \-> {
		int2negativeFormat = \i -> {
			if (i == 0) nnNormal()
			else if (i == 1) nnRed()
			else if (i == 2) nnBrackets()
			else if (i == 3) nnBracketsAndRed()
			else nnNormal()
		}
		int2currencyCode = \i -> {
			if (i == 0) None()
			else if (i == 1) Some(ccUSD())
			else if (i == 2) Some(ccEUR())
			else if (i == 3) Some(ccGBP())
			else if (i == 4) Some(ccYEN())
			else None()
		}
		int2cellFormatting = \section -> {
			if (section == 1) WigiCellFormatting(
				WigiCellFormattingNumber(
					getValue(decimalPlacesFormattingB),
					getValue(useSeparatorFormattingB),
					getValue(negativeFormattingB) |> int2negativeFormat,
					getValue(scientificDigitsFormattingB)
				)
			)
			else if (section == 2) WigiCellFormatting(
				WigiCellFormattingCurrency(
					getValue(decimalPlacesFormattingB),
					getValue(currencyCodeB) |> int2currencyCode,
					getValue(negativeFormattingB) |> int2negativeFormat
				)
			)
			else if (section == 3) WigiCellFormatting(
				WigiCellFormattingDate(
					getValue(dateFormatB)
				)
			)
			else if (section == 4) WigiCellFormatting(
				WigiCellFormattingTime(
					getValue(timeFormatB)
				)
			)
			else if (section == 5) WigiCellFormatting(
				WigiCellFormattingPercentage(
					getValue(decimalPlacesFormattingB)
				)
			)
			else if (section == 6) WigiCellFormatting(
				WigiCellFormattingSignificant(
					getValue(significantDigitsFormattingB),
					getValue(scientificDigitsFormattingB)
				)
			)
			else DefaultCellFormatting;
		}
		getValue(selectedFormattingSectionB) |> int2cellFormatting;
	}

	// Result
	StyleTab(getForm, getResult)
}


getCurrentTable(state : WigiEditorState) -> WigiTable {
	cursor = getValue(state.cursor);
	document = getValue(state.document);
	switch (getElementAtPosition(document, wigiFindParentRecursive(document, [dummyWigiTable], cursor))) {
		WigiRecursive(__, type, __): {
			switch(type) {
				WigiTable(__, __, __, __): type;
				default: dummyWigiTable;
			}
		}
		default: dummyWigiTable;
	}
}

getCurrentColumnWidth(state : WigiEditorState) -> double {
	t = getCurrentTable(state);
	columnWidths = extractStruct(t.style, WigiTableColumnWidths([])).widths;
	if (length(columnWidths) == 0) 0.0 else {
		cellPath = wigiFindParentRecursive(getValue(state.document), [dummyWigiTableCell, dummyWigiSpreadsheetCell], getValue(state.cursor));
		cellId = cellPath[length(cellPath) - 1];
		column = getTableColumnsRows(t).first[cellId];
		dsumPatched(generate(0, t.cellSpans[cellId].col, \i -> columnWidths[column + i]));
	}
}

getCurrentRowHeight(state : WigiEditorState) -> double {
	t = getCurrentTable(state);
	rowHeights = extractStruct(t.style, WigiTableRowHeights([])).heights;
	if (length(rowHeights) == 0) 0.0 else {
		cellPath = wigiFindParentRecursive(getValue(state.document), [dummyWigiTableCell, dummyWigiSpreadsheetCell], getValue(state.cursor));
		cellId = cellPath[length(cellPath) - 1];
		row = getTableColumnsRows(t).second[cellId];
		dsumPatched(generate(0, t.cellSpans[cellId].row, \i -> rowHeights[row + i]));
	}
}
