import wigi/types;
import wigi/wigi_engine;
import wigi/wigi_value2form;
import ui/buttons;

export {
	code2form(engine : WigiEngine, codeView : Form, code : WigiElement, showCode : DynamicBehaviour<bool>, showResult : DynamicBehaviour<bool>, updateCursorFn : () -> void, registerToEngine : bool) -> Form;
}

code2form(engine : WigiEngine, codeView : Form, code : WigiElement, showCode : DynamicBehaviour<bool>, showResult : DynamicBehaviour<bool>, updateCursorFn : () -> void, registerToEngine : bool) -> Form {
	expr = parseWigiCode(code);
	// TODO: Come up with a better name for this guys
	value = addFormulaToEngine(engine, globalWigiNamespace, "todo", globalWigiNamespace, expr, registerToEngine, true);
	Constructor(
		Line([
			toggleControl(showCode, updateCursorFn),
			Visibleb(showCode, codeView),
			toggleControl(showResult, updateCursorFn),
			Visibleb(showResult, 
				Select(value.first, \v : WigiValue -> {
					wigiValue2Form(v, [], engine.defaultStyles) // TODO: figure out the style
				})
			)
		]),
		\ -> {
			\ -> {
				applyall(value.second)
			}
		}
	)
}


toggleControl(show : DynamicBehaviour<bool>, updateCursorFn : () -> void) -> Form {
	mkIcon = \color, ch -> {
		t = Text(ch, [FontFamily("Demi"), Fill(color), FontSize(10.0)]);
		metrics = getStaticFormSizeCached(t);
		rIcon = metrics.height / 2.0;
		correction = if (flash) 0.0 else 1.0;
		Group([
			Circle(rIcon, rIcon, rIcon, [Stroke(color), StrokeWidth(1.5)]),
			Offset(correction, if (ch == "+") 0.0 else -1.0 + correction, Align2(0.5, 0.0, t))
		])
	};

	mkButton = \c -> SimpleButton(
		mkIcon(0x333333, c),
		mkIcon(0x0066d9, c),
		"",
		\ -> {
			next(show, !getValue(show));
			updateCursorFn();
		}
	);

	Select(show, \s -> {
		mkButton(if (s) "\u2013" else "+")
	});
}

parseWigiCode(code : WigiElement) -> WigiExpr {
	// TODO: We can do better than just values
	getWigiElementValue(code);
}
