import wigi/wigi_environment_types;
import wigi/selection;

export {
	// used in case recorder
	WigiRecorderEvent ::= WigiEvent, WigiChangeMode, WigiRuntimeEvent, WigiGlobalClipboardEvent, WigiSetSelection;
		WigiChangeMode(newMode : WigiMode);
			WigiMode ::= WigiPreviewMode, WigiEditorMode;
				WigiPreviewMode();
				WigiEditorMode();

		WigiRuntimeEvent(wigiName : WigiCellName, value : flow);
		// we can't change html content of system clipboard so this is workaround for recording tests
		WigiGlobalClipboardEvent(text : string, html : string);
		// wigi event does not exist forr unselecting text but it should be recorded in the test
		WigiSetSelection(selection : WigiSelection);

	// An enumeration of events that need to be handled by the view.
	// This is all wigi editor events.
	WigiEvent ::= WigiNone, WigiCursorLeft, WigiCursorRight, WigiCursorDown, WigiCursorUp, WigiPageUp, WigiPageDown,
				  WigiHome, WigiEnd, WigiSpace, WigiInsertText, WigiInsertElement, WigiSelectAll, WigiSelectWord, WigiSelectSentence,
				  WigiCopy, WigiCopySpecial, WigiCut, WigiPaste, WigiDelete, WigiDeleteElement, WigiBackspace, WigiEnter, WigiSetStyle,
				  WigiUndo, WigiRedo, WigiLeftWord, WigiRightWord, WigiUpWord, WigiDownWord, WigiDeleteWord,
				  WigiBackspaceWord, WigiTab, WigiInsertFormula, WigiZoomIn, WigiZoomOut, WigiResetZoom, WigiSetCursor,
				  WigiSetCellCursor, WigiInsertPageBreak, WigiChangeBlock, WigiChangeRecursive, WigiSetTableStyle, WigiModifyTable,
				  WigiSetStoryStyle, WigiModifyStoryStyle, WigiInsertNaturalMath, WigiInsertNativeWiki, WigiInsertHTML, WigiRenameRadioGroup,
				  WigiDeleteRadioGroup, WigiChangeRadioOptionValue, WigiDeleteRadioOption, WigiSetRadioGroupLayout, WigiSetRadioGroupWidth,
				  WigiSwapParagraph, WigiCleanUpParagrapshIndents;

		WigiNone();
		WigiCursorLeft(selecting : bool);
		WigiCursorRight(selecting : bool);
		WigiCursorDown(selecting : bool);
		WigiCursorUp(selecting : bool);
		WigiPageUp(selecting : bool);
		WigiPageDown(selecting : bool);
		WigiHome(selecting : bool);
		WigiEnd(selecting : bool);
		WigiSpace();
		WigiInsertText(text: string);
		WigiInsertElement(element : WigiElement);
		WigiSelectAll();
		WigiSelectWord();
		WigiSelectSentence();
		WigiCopy(formatting : bool); // true by default
		// copying with converting formulas to their calculated values
		WigiCopySpecial(formatting : bool);
		WigiCut();
		WigiPaste();
		WigiDelete();
		WigiDeleteElement(path: [int]);
		WigiBackspace();
		WigiEnter(shift: bool);
		WigiUndo();
		WigiRedo();
		WigiLeftWord(selecting : bool);
		WigiRightWord(selecting : bool);
		WigiUpWord(selecting : bool);
		WigiDownWord(selecting : bool);
		WigiDeleteWord();
		WigiBackspaceWord();
		WigiTab(shift: bool);
		WigiInsertFormula(name : string);
		WigiZoomIn();
		WigiZoomOut();
		WigiResetZoom();
		WigiSetCellCursor();
		WigiSetCursor(cursor : [int], selecting : bool);
		WigiInsertPageBreak();
		WigiChangeBlock(block : WigiBlock);
		WigiChangeRecursive(rec : WigiRecursive);
		WigiInsertNaturalMath();
		WigiInsertNativeWiki(wiki : string);
		WigiInsertHTML(html : WigiHTML);
		// Renames all WigiRadioOption if id is equal to name and all WigiRadioButton if block style WigiName matches to "name_*"
		WigiRenameRadioGroup(name : string);
		WigiDeleteRadioGroup();
		WigiChangeRadioOptionValue(value: int);
		WigiDeleteRadioOption();
		WigiSetRadioGroupLayout(layout: WigiRadioOptionAlign);
		WigiSetRadioGroupWidth(width : Maybe<double>);

		WigiSetStoryStyle(stylesToRemove: [WigiStoryStyle], stylesToAdd: [WigiStoryStyle]);
		// DO NOT USE IT! We can't record unittests for events with fn inside. Use WigiSetStoryStyle instead.
		WigiModifyStoryStyle(updater : ([WigiStoryStyle]) -> [WigiStoryStyle]);

		WigiSetStyle ::= WigiSetColor, WigiSetBackgroundColor, WigiSetFontSize, WigiModifyFontSize, WigiSetFontFamily, WigiSetUnderline, WigiSetDoubleUnderline,
						 WigiSetBaselineShift, WigiSetName, WigiSetParagraphStyle, WigiModifyParagraphStyle, WigiReplaceParagraphStyle, WigiSwitchFontFamily, WigiSetLock, WigiSetLanguage,
						 WigiClearParagraphFormatting, WigiClearTextFormatting, WigiSetLetterSpacing, WigiSetAnnotation;
			WigiSetColor(color: int);
			WigiSetBackgroundColor(color: int);
			WigiSetFontSize(fontSize : double);
			WigiModifyFontSize(baseSize : double, baseShift : double);
			WigiSetFontFamily(fontFamily : string);
			WigiSwitchFontFamily(style : FontFamilyStyle, turnOn : bool);
				FontFamilyStyle ::= SBold, SItalic;
					SBold();
					SItalic();

			WigiSetUnderline(setUnderline : bool);
			WigiSetDoubleUnderline(setUnderline : bool);
			WigiSetBaselineShift(shift : double);
			WigiSetName(name : string);
			WigiSetLock(lock : WigiLockType);
			WigiSetLanguage(name: string);
			WigiClearParagraphFormatting();
			WigiClearTextFormatting();
			WigiSetLetterSpacing(spacing : double);
			WigiSetAnnotation(annotationId : int);

			// This one is a bit tricky, because it is assymetrical. Left alignment is absence of other alignments
			// First, stylesToRemove will be removed, and then stylesToAdd will be added
			WigiSetParagraphStyle(stylesToRemove: [WigiParagraphStyle], stylesToAdd: [WigiParagraphStyle]);
			WigiReplaceParagraphStyle(styleToReplace: WigiParagraphStyle);
			// DO NOT USE IT! We can't record unittests for events with fn inside. Use WigiSetParagraphStyle or WigiReplaceParagraphStyle instead.
			WigiModifyParagraphStyle(updater : ([WigiParagraphStyle]) -> [WigiParagraphStyle]);

		WigiTableEvent ::= WigiSetTableStyle, WigiModifyTable;

		WigiSetTableStyle ::= WigiSetTableHighlight, WigiSetShowGrid, WigiSetSameRowHeight, WigiSetShowHeaders, WigiSetShowFormulaBar, WigiSetTableBorder,
							  WigiSetTableSize, WigiSetCellsTightWidth, WigiSetVisibleFormula, WigiSetColumnsRigid, WigiSetDontFitToAvailableWidth;
			WigiSetTableHighlight(column : string, row: string);
			WigiSetShowGrid(set : bool);
			WigiSetSameRowHeight(set : bool);
			WigiSetShowHeaders(set : bool);
			WigiSetShowFormulaBar(set : bool);
			WigiSetTableBorder(border : WigiTableBorder);
			WigiSetTableSize(columns : int, rows : int);
			WigiSetCellsTightWidth(set : bool);
			WigiSetVisibleFormula(formula : string);
			WigiSetColumnsRigid(isRigid : bool);
			WigiSetDontFitToAvailableWidth(set : bool);

		WigiModifyTable ::= WigiInsertColumn, WigiInsertRow, WigiDeleteColumn, WigiDeleteRow, WigiMergeCellsRight, WigiMergeCellsDown, WigiSplitCellsHorizontal,
							WigiSplitCellsVertical, WigiSetColumnWidth, WigiSetRowHeight, WigiSetTableCellStyle, WigiApplyTableCellTemplate, WigiDeleteTable;
			WigiInsertColumn(place : WigiTableInsertPlace, copyCellStyle : bool);
			WigiDeleteColumn();
			WigiInsertRow(place : WigiTableInsertPlace, copyCellStyle : bool);
			WigiDeleteRow();
			WigiMergeCellsRight();
			WigiMergeCellsDown();
			WigiSplitCellsHorizontal();
			WigiSplitCellsVertical();
			WigiSetColumnWidth(width : double);
			WigiSetRowHeight(width : double);
			WigiSetTableCellStyle(cellStyle : [WigiTableCellStyle]);
			WigiApplyTableCellTemplate(template : WigiRecursive);
			WigiDeleteTable();

			WigiTableInsertPlace ::= WigiTableInsertBefore, WigiTableInsertAfter, WigiTableInsertAtTheEnd;
				WigiTableInsertBefore();
				WigiTableInsertAfter();
				WigiTableInsertAtTheEnd();
		WigiSwapParagraph(up : bool);
		WigiCleanUpParagrapshIndents(pitch: double);

	canEventModifyState(event : WigiEvent) -> bool;
	isAllowedEvent(event : WigiEvent, lock : WigiLockType) -> bool;
}

// true if event processing might result in changing Wigi document
// false is only for events that do not change document for absolutely sure
canEventModifyState(event : WigiEvent) -> bool {
	switch (event : WigiEvent) {
		WigiNone(): false;
		WigiCursorLeft(__) : false;
		WigiCursorRight(__) : false;
		WigiCursorDown(__) : false;
		WigiCursorUp(__) : false;
		WigiPageUp(__) : false;
		WigiPageDown(__) : false;
		WigiHome(__) : false;
		WigiEnd(__) : false;
		WigiSpace(): true;
		WigiInsertText(__) : true;
		WigiInsertElement(__) : true;
		WigiSelectAll() : false;
		WigiSelectWord() : false;
		WigiSelectSentence() : false;
		WigiCopy(__): false;
		WigiCopySpecial(__): true;
		WigiCut(): true;
		WigiPaste(): true;
		WigiDelete(): true;
		WigiDeleteElement(__): true;
		WigiBackspace(): true;
		WigiEnter(__): true;
		WigiUndo(): true;
		WigiRedo(): true;
		WigiSetColor(__): true;
		WigiSetBackgroundColor(__): true;
		WigiSetFontSize(__): true;
		WigiSetFontFamily(__): true;
		WigiSetLetterSpacing(__) : true;
		WigiSwitchFontFamily(__, __): true;
		WigiModifyFontSize(__, __): true;
		WigiSetUnderline(__): true;
		WigiSetDoubleUnderline(__): true;
		WigiSetBaselineShift(__): true;
		WigiClearTextFormatting(): true;
		WigiSetName(__): true;
		WigiSetLock(__): true;
		WigiSetLanguage(__): true;
		WigiSetTableHighlight(__, __): true;
		WigiSetShowGrid(__): true;
		WigiSetDontFitToAvailableWidth(__): true;
		WigiSetSameRowHeight(__): true;
		WigiSetShowHeaders(__): true;
		WigiSetShowFormulaBar(__): true;
		WigiSetTableBorder(__): true;
		WigiSetTableSize(__, __): true;
		WigiSetParagraphStyle(__, __): true;
		WigiSetCellsTightWidth(__): true;
		WigiSetVisibleFormula(__): true;
		WigiClearParagraphFormatting(): true;

		WigiModifyParagraphStyle(__): true;
		WigiReplaceParagraphStyle(__): true;
		WigiSetStoryStyle(__, __): true;
		WigiModifyStoryStyle(__): true;
		WigiLeftWord(__) : true;
		WigiRightWord(__): true;
		WigiUpWord(__): true;
		WigiDownWord(__): true;
		WigiDeleteWord(): true;
		WigiBackspaceWord(): true;
		WigiTab(__): false;
		WigiInsertFormula(__): true;
		WigiZoomIn(): false;
		WigiZoomOut(): false;
		WigiResetZoom(): false;
		WigiSetCellCursor(): false;
		WigiSetCursor(__, __): false;
		WigiChangeBlock(__): true;
		WigiChangeRecursive(__): true;

		WigiInsertColumn(__, __): true;
		WigiDeleteColumn(): true;
		WigiInsertRow(__, __): true;
		WigiDeleteRow(): true;
		WigiMergeCellsRight(): true;
		WigiMergeCellsDown(): true;
		WigiSplitCellsHorizontal(): true;
		WigiSplitCellsVertical(): true;
		WigiSetColumnWidth(__): true;
		WigiSetRowHeight(__): true;
		WigiSetTableCellStyle(__): true;
		WigiApplyTableCellTemplate(__): true;
		WigiDeleteTable(): true;
		WigiSetColumnsRigid(__) : true;

		WigiInsertPageBreak(): true;
		WigiInsertNaturalMath(): true;
		WigiInsertNativeWiki(__): true;
		WigiInsertHTML(__): true;
		WigiRenameRadioGroup(__): true;
		WigiDeleteRadioGroup(): true;
		WigiChangeRadioOptionValue(__): true;
		WigiDeleteRadioOption(): true;
		WigiSetRadioGroupLayout(__): true;
		WigiSetRadioGroupWidth(__): true;
		WigiSwapParagraph(__): true;
		WigiCleanUpParagrapshIndents(__): true;
		WigiSetAnnotation(__) : true;
	}
}

// it is true if event is allowed to be processed within content of given lock type
isAllowedEvent(event : WigiEvent, lock : WigiLockType) -> bool {
	if (!isLockedWigi(lock)){
		true
	} else {
		allLocks = [WigiReadOnly(), WigiSelectOnly(), WigiAddOnly()];
		ifNoSelection = \s -> if (!s) allLocks else [];
		allowedLocks : [WigiLockType] = switch (event : WigiEvent) {
			WigiNone(): allLocks;
			WigiCursorLeft(s) : if (s) [WigiSelectOnly()] else allLocks;
			WigiCursorRight(s) : if (s) [WigiSelectOnly()] else allLocks;
			WigiCursorDown(s) : ifNoSelection(s);
			WigiCursorUp(s) : ifNoSelection(s);
			WigiPageUp(s) : ifNoSelection(s);
			WigiPageDown(s) : ifNoSelection(s);
			WigiHome(s) : ifNoSelection(s);
			WigiEnd(s) : ifNoSelection(s);
			WigiSpace(): [WigiAddOnly()];
			WigiInsertText(__): [WigiAddOnly()];
			WigiInsertElement(__): [WigiAddOnly()];
			WigiSelectAll() : [];
			WigiSelectWord() : [];
			WigiSelectSentence() : [];
			WigiCopy(__): [];
			WigiCopySpecial(__): [];
			WigiCut(): [];
			WigiPaste(): [];
			WigiDelete(): [];
			WigiDeleteElement(__): [];
			WigiBackspace(): [];
			WigiEnter(__): [];
			WigiUndo(): allLocks;
			WigiRedo(): allLocks;
			WigiSetColor(__): [];
			WigiSetBackgroundColor(__): [];
			WigiSetFontSize(__): [];
			WigiSetFontFamily(__): [];
			WigiSetLetterSpacing(__) : [];
			WigiSwitchFontFamily(__, __): [];
			WigiModifyFontSize(__, __): [];
			WigiSetUnderline(__): [];
			WigiSetDoubleUnderline(__): [];
			WigiClearTextFormatting(): [];
			WigiSetBaselineShift(__): [];
			WigiSetName(__): [];
			WigiSetLanguage(__): [];
			WigiSetTableHighlight(__, __): [];
			WigiSetShowGrid(__): [];
			WigiSetDontFitToAvailableWidth(__): [];
			WigiSetSameRowHeight(__): [];
			WigiSetShowHeaders(__): [];
			WigiSetShowFormulaBar(__): [];
			WigiSetTableBorder(__): [];
			WigiSetTableSize(__, __): [];
			WigiSetCellsTightWidth(__): [];
			WigiSetVisibleFormula(__): [];
			WigiSetParagraphStyle(__, __): [];
			WigiModifyParagraphStyle(__): [];
			WigiReplaceParagraphStyle(__): [];
			WigiClearParagraphFormatting(): [];
			WigiSetStoryStyle(__, __): [];
			WigiModifyStoryStyle(__): [];
			WigiLeftWord(s) : if (!s) allLocks else [];
			WigiRightWord(s): if (!s) allLocks else [];
			WigiUpWord(s): if (!s) allLocks else [];
			WigiDownWord(s): if (!s) allLocks else [];
			WigiDeleteWord(): [];
			WigiBackspaceWord(): [];
			WigiTab(__): [];
			WigiInsertFormula(__): [WigiAddOnly()];
			WigiZoomIn(): [];
			WigiZoomOut(): [];
			WigiResetZoom(): [];
			WigiSetCellCursor(): [];
			WigiSetCursor(__, s): if (!s) removeFirst(allLocks, WigiReadOnly()) else [WigiSelectOnly()];
			WigiChangeBlock(__): [];
			WigiChangeRecursive(__): [];

			WigiInsertColumn(__, __): [];
			WigiDeleteColumn(): [];
			WigiInsertRow(__, __): [];
			WigiDeleteRow(): [];
			WigiMergeCellsRight(): [];
			WigiMergeCellsDown(): [];
			WigiSplitCellsHorizontal(): [];
			WigiSplitCellsVertical(): [];
			WigiSetColumnWidth(__): [];
			WigiSetRowHeight(__): [];
			WigiSetTableCellStyle(__): [];
			WigiApplyTableCellTemplate(__): [];
			WigiDeleteTable(): [];
			WigiSetColumnsRigid(__) : [];

			WigiInsertPageBreak(): [];
			WigiInsertNaturalMath(): [];
			WigiInsertNativeWiki(__): [];
			WigiInsertHTML(__): [];
			WigiSetLock(__): [];
			WigiRenameRadioGroup(__): [];
			WigiDeleteRadioGroup(): [];
			WigiChangeRadioOptionValue(__): [];
			WigiDeleteRadioOption(): [];
			WigiSetRadioGroupLayout(__): [];
			WigiSetRadioGroupWidth(__): [];
			WigiSwapParagraph(__): [];
			WigiCleanUpParagrapshIndents(__): [];
			WigiSetAnnotation(__) : [];
		}

		contains(allowedLocks, lock);
	}
}
