import wigi/toolbar_utils;
import wigi/paragraph_control;

export {
	makeToolbarSubscribers(state : WigiEditorState, runtime : ToolbarRuntime, currentElement : DynamicBehaviour<WigiElement>, currentNumberedStyles : DynamicBehaviour<[Listed]>) -> () -> void;
}

makeToolbarSubscribers(state : WigiEditorState, runtime : ToolbarRuntime, currentElement : DynamicBehaviour<WigiElement>, currentNumberedStyles : DynamicBehaviour<[Listed]>) -> () -> void {
	disposers = ref [];

	refArrayPush(disposers, makeSystemClipboardBuffer(state, \state1, str -> wigiPaste(state1, str, None())));

	refArrayPush(disposers, subscribe2(state.fontSize, \sz -> {
		if (!^(runtime.updatingNow)) {
			selection = getValue(state.selection);
			if (selection.start != selection.end) {
				wigiSendEvent(state, WigiSetFontSize(sz)) |> ignore
			}
		}
	}));

	refArrayPush(disposers, subscribe2(state.fontColor, \fc -> {
		if (!^(runtime.updatingNow)) {
			selection = getValue(state.selection);
			if (selection.start != selection.end) {
				wigiSendEvent(state, WigiSetColor(fc)) |> ignore
			}
		}
	}));

	refArrayPush(disposers, subscribe2(state.letterSpacing, \ls -> {
		if (!^(runtime.updatingNow)) {
			selection = getValue(state.selection);
			if (selection.start != selection.end) {
				wigiSendEvent(state, WigiSetLetterSpacing(ls)) |> ignore
			}
		}
	}));

	refArrayPush(disposers, subscribe2(state.fontFamily, \ff -> {
		if (!^(runtime.updatingNow)) {
			selection = getValue(state.selection);
			if (selection.start != selection.end) {
				wigiSendEvent(state, WigiSetFontFamily(ff)) |> ignore
			}
		}
	}));



	refArrayPush(disposers, subscribe2(state.wpsName, \wsn -> {
		if (!^(runtime.updatingNow)) {
			updateToolbarState(runtime, state)
		}
	}));

	refArrayPush(disposers, subscribe2(state.wigiName, \n -> {
		if (!^(runtime.updatingNow)) {
			selection = getValue(state.selection);
			if (selection.start != selection.end) {
				wigiSendEvent(state, WigiSetName(n)) |> ignore
			}
		}
	}));

	refArrayPush(disposers, subscribe2(state.backgroundColor, \bc -> {
		if (!^(runtime.updatingNow)) {
			selection = getValue(state.selection);
			if (selection.start != selection.end) {
				wigiSendEvent(state, WigiSetBackgroundColor(bc)) |> ignore
			}
		}
	}));

	refArrayPush(disposers, subscribe2(state.language, \ln -> {
		if (!^(runtime.updatingNow)) {
			wigiSendEvent(state, WigiSetLanguage(ln)) |> ignore
		}
	}));

	// #39251, 39252 we need this delay not to lose the cursor from the formula bar
	cursor = throttle2u(state.cursor, 0) |> makeDisposable;
	refArrayPush(disposers, cursor.dispose);

	refArrayPush(disposers, select3u(cursor.value, state.document, state.selection, \c, d, sel -> {
		pos = if (sel.start == sel.end) c else sel.start;
		element = getElementAtPosition(d, pos);

		nextDistinct(currentNumberedStyles, getNumberedParagraphStyles(state));

		if (state.lock.status != LockIgnored())
			nextDistinct(state.lock.current, getLockAtPosition(d, pos));

		switch (element) {
			WigiParagraph(es, s): {
				parentPath = wigiFindParentRecursive(d, [
					dummyWigiTableCell,
					dummyWigiSpreadsheetCell,
					dummyWigiButton,
					dummyWigiHyperlink,
					dummyWigiVersions
				], c);
				if (parentPath != []) nextDistinct(currentElement, getElementAtPosition(d, parentPath))
				else nextDistinct(currentElement, WigiEmpty());
			}
			WigiBlock(t, s): {
				if (c != [] && c[length(c) - 1] > 0) {
					parentPath = wigiFindParentRecursive(d, [], c);
					if (parentPath != []) nextDistinct(currentElement, getElementAtPosition(d, parentPath))
					else nextDistinct(currentElement, element);
				} else nextDistinct(currentElement, element);
			}
			WigiText(t, s): {
				parentPath = wigiFindParentRecursive(d, [
					dummyWigiTableCell,
					dummyWigiSpreadsheetCell,
					dummyWigiButton,
					dummyWigiHyperlink,
					dummyWigiRadioOption,
					dummyWigiExternalRecursive,
					dummyWigiVersions
				], c);
				if (parentPath != []) nextDistinct(currentElement, getElementAtPosition(d, parentPath))
				else nextDistinct(currentElement, WigiEmpty());
			}
			WigiRecursive(__, __, __): nextDistinct(currentElement, element);
			default: nextDistinct(currentElement, WigiEmpty());
		}

		nextDistinct(state.blockAlignControls, isSome(maybeGetParentRadioOption(d, pos)));

		runtime.updatingNow := true;
		updateToolbarState(runtime, state);
		runtime.updatingNow := false;
	}).second);

	\ -> {
		applyall(^disposers);
	}
}

updateToolbarState(runtime: ToolbarRuntime, state : WigiEditorState) -> void {
	path = getValue(state.cursor);
	pos = getStartPositon(state);
	root = getValue(state.document);
	element = getElementAtPosition(root, pos);

	updateTextStyle = \s : [WigiTextStyle], text : string -> {
		defaultFontFamily : FontFamily = extractStruct(s, globalSystemDefaultFontFamily);
		// ignore font family of symbols
		style = if (text == "") either(getPreviousWigiTextStyle(root, getValue(state.cursor)), s) else s;
		nextDistinct(state.fontFamily, extractStruct(style, defaultFontFamily).name);
		next(state.fontSize, extractStruct(s, dwfs).size);
		nextDistinct(state.fontColor, extractStruct(s, globalSystemDefaultFill).color);
		nextDistinct(state.fillOpacity, extractStruct(s, globalSystemDefaultFillOpacity).opacity);
		nextDistinct(state.baselineShift, extractStruct(s, globalSystemDefaultBaselineShift).shift);
		nextDistinct(state.language, extractStruct(s, Language("none")).name);
		nextDistinct(state.letterSpacing, extractStruct(s, LetterSpacing(0.0)).spacing);
		backgroundColor : BackgroundFill = extractStruct(s, BackgroundFill(black));
		defBgOpacity = b2d(containsStruct(s, BackgroundFill(black)));
		backgroundOpacity : BackgroundFillOpacity = extractStruct(s, BackgroundFillOpacity(defBgOpacity));
		nextDistinct(state.backgroundColor, combineIntColor(backgroundOpacity.opacity, backgroundColor.color));
	}

	switch (element : WigiElement) {
		WigiEmpty(): {}
		WigiDocument(e, s): {
			updateWigiStyleToolbarName(state, s);
		}
		WigiRecursive(e, t, s): {
			updateParagraphStyle(runtime, state, path, element);
			updateWigiStyleToolbarName(state, s);
		}
		WigiStory(p, v, s): {
			updateWigiStyleToolbarName(state, s);
		}
		WigiParagraph(e, s): {
			updateWigiStyleToolbarName(state, s);
		}
		WigiText(text, st): {
			s = getWigiTextStyleFull(state.defaultStyles, root, getValue(state.cursor), st);
			updateTextStyle(s, text);

			updateParagraphStyle(runtime, state, path, element);
			updateWigiStyleToolbarName(state, s);
		}
		WigiBlock(t, s): {
			selection = getValue(state.selection);
			if (selection.start != selection.end) updateTextStyle(getWigiTextStyle(s), "");
			updateParagraphStyle(runtime, state, path, element);
			updateWigiStyleToolbarName(state, s);
		}
	}

	updateWpsName(state, root, pos);
}


updateWigiStyleToolbarName(state : WigiEditorState, style : [WigiStyle]) -> void {
	name : WigiName = extractStruct(style, WigiName(""));
	nextDistinct(state.wigiName, name.name);
}

updateParagraphStyle(runtime: ToolbarRuntime, state : WigiEditorState, path : [int], element : WigiElement) -> void {
	defaultParagraphStyle = \ -> {
		root = getValue(state.document);
		maybeParagraph = maybeGetParentWigiParagraph(root, path);
		switch (maybeParagraph) {
			None(): Pair([StartAlign()], dwis);
			Some(pair): {
				paragraph = pair.first;
				align = extractWigiParagraphAlignment(getWigiParagraphStyleFull(state.defaultStyles, root, path, paragraph.style));
				interlineSpacing = extractStruct(paragraph.style, dwis);
				Pair(align, interlineSpacing);
			}
		}
	}

	style = switch (element : WigiElement) {
		// special case for WigiSpreadsheetCell
		WigiRecursive(elements, type, __): switch (type : WigiRecursiveType) {
			WigiSpreadsheetCell(__, __, __): switch (elements[0] : WigiElement) {
				WigiStory(paragraphs, __, __): switch (^paragraphs[0] : WigiElement) {
					WigiParagraph(__, style): Pair(
						extractWigiParagraphAlignment(style),
						extractStruct(style, dwis)
					);
					default: defaultParagraphStyle();
				}
				default: defaultParagraphStyle();
			}
			default: defaultParagraphStyle();
		}
		default: defaultParagraphStyle();
	}

	nextDistinct(runtime.paragraphAlign, style.first);
	nextDistinct(state.interlineSpacing, style.second.d);
}


getStartPositon(state: WigiEditorState) -> [int] {
	sel = getValue(state.selection);
	path = getValue(state.cursor);
	if (sel.start == sel.end) path else sel.start;
}



getPreviousWigiTextStyle(root : WigiElement, path : [int]) -> Maybe<[WigiTextStyle]> {
	goBackward = \p -> {
		if (p != getStartPositionOfDocument(root)) getPreviousWigiTextStyle(root, p)
		else None();
	}

	p = doPositionDelta(root, path, -1);
	switch(getElementAtPosition(root, p)){
		WigiText(t, s): if (t == "" || isTextSymbol(t)) goBackward(p) else Some(s);
		default : goBackward(p);
	}
}


updateWpsName(state : WigiEditorState, root : WigiElement, pos : [int]) -> void {
	wpsName = eitherMap(
		maybeMap(
			maybeGetParentWigiParagraph(root, pos),
			firstOfPair
		),
		\paragraph -> {
			extractStruct(paragraph.style, defaultWigiStylesName);
		},
		defaultWigiStylesName
	);
	nextDistinct(state.wpsName, wpsName);
};
