import arrayutils; // subtractA
import string;

export {
	Symbol : (
		font : string,
		description : string,
		code: string
	);

	SymbolFamily : (
		description : string,
		symbols : [Symbol]
	);

	symbolSet : [SymbolFamily];
	
	isTextSymbol(text: string) -> bool;
	validFontFamily(symbol : string, fontFamily : string) -> bool;
}

makeLangSymbol(font, code) {
	Symbol(font, "Language Symbol", fromCharCode(code))
}
symbolSet : [SymbolFamily] = [
	SymbolFamily(
		"Miscellaneous Symbols",
		[
			Symbol("Book", "Copyright Sign", "\u00A9"),
			Symbol("Book", "Registered Sign", "\u00AE"),
			Symbol("Book", "Trade Mark Sign", "\u2122"),
			Symbol("Book", "Bullet", "\u2022"),
			Symbol("Book", "Cent Sign", "\u00A2"),
			Symbol("Book", "Euro Sign", "\u20AC"),
			Symbol("Book", "Em dash", "\u2014"),
			Symbol("Book", "No-Break Space", "\u00A0"),
			Symbol("MinionItalics", "i", "i"),
			Symbol("DejaVuSans", "l", "\u2113"),
			Symbol("DejaVuSans", "F", "\u2131"),
			Symbol("DejaVuSans", "M", "\u2133"),
			Symbol("MinionItalics", "P", "P"),
			Symbol("MinionItalics", "V", "V"),
			Symbol("DejaVuSans", "Dagger", "\u2020"),
			Symbol("DejaVuSans", "Double Dagger", "\u2021"),
			Symbol("DejaVuSans", "Filled Square", "\u25A0"),
		]
	),
	SymbolFamily(
		"Arrows",
		generate(0x2190, 0x21F4, \code -> Symbol("DejaVuSans", "Arrow", fromCharCode(code))),
	),
	SymbolFamily(
		"Basic Math Symbols",
		[
			Symbol("Minion", "Hyphen-Minus", "\u2013"),
			Symbol("Minion", "Multiplication Sign", "\u00D7"),
			Symbol("Minion", "Middle Dot", "\u00B7"),
			Symbol("Minion", "Division Sign", "\u00F7"),
			Symbol("Minion", "Plus-Minus Sign", "\u00B1"),
			Symbol("Minion", "Less-Than Or Equal To", "\u2264"),
			Symbol("Minion", "Greater-Than Or Equal To", "\u2265"),
			Symbol("Minion", "Not Equal To", "\u2260"),
			Symbol("Minion", "Less-Than", "<"),
			Symbol("Minion", "Greater-Than", ">"),
			Symbol("Minion", "Equal To", "="),
			Symbol("Minion", "Almost Equal To", "\u2248"),
			Symbol("Minion", "Infinity", "\u221E"),
			Symbol("Minion", "Degree Sign", "\u00B0"),
			Symbol("DejaVuSans", "Intersection", "\u2229"),
			Symbol("DejaVuSans", "Union", "\u222A"),
			Symbol("DejaVuSans", "Element of", "\u2208"),
			Symbol("DejaVuSans", "Not element of", "\u2209"),
			Symbol("DejaVuSans", "Subset of or equal to", "\u2286"),
			Symbol("DejaVuSans", "Neither subset of or equal to", "\u2288"),
			Symbol("DejaVuSans", "Superset of or equal to", "\u2287"),
			Symbol("DejaVuSans", "Neither superset of or equal to", "\u2289"),
			Symbol("DejaVuSans", "Subset of", "\u2282"),
			Symbol("DejaVuSans", "Not a subset of", "\u2284"),
			Symbol("DejaVuSans", "Superset of", "\u2283"),
			Symbol("DejaVuSans", "Not a superset of", "\u2285"),
			Symbol("DejaVuSans", "Empty set", "\u2205"),
			Symbol("DejaVuSans", "Set of prime numbers", "\u2119"),
			Symbol("DejaVuSans", "Set of natural numbers", "\u2115"),
			Symbol("DejaVuSans", "Set of integer numbers", "\u2124"),
			Symbol("DejaVuSans", "Set of rational numbers", "\u211A"),
			Symbol("DejaVuSans", "Set of real numbers", "\u211D"),
			Symbol("DejaVuSans", "Set of complex numbers", "\u2102"),
			Symbol("DejaVuSans", "Set of quaternions", "\u210D"),
			Symbol("DejaVuSans", "Left ceiling", "\u2308"),
			Symbol("DejaVuSans", "Right ceiling", "\u2309"),
			Symbol("DejaVuSans", "Left floor", "\u230A"),
			Symbol("DejaVuSans", "Right floor", "\u230B"),
		]
	),
	SymbolFamily(
		"Language Symbols",
		concatA([
			generate(0x00C0, 0x00FF, \c -> makeLangSymbol("Book", c)),
			map(
				[
					0x0100, 0x0112, 0x012A, 0x014C, 0x016A, 
					0x0101, 0x0113, 0x012B, 0x014D, 0x016B
				], //Upper- and lower a, e, i, o, u with macrons.
				\c -> makeLangSymbol("DejaVuSans", c)
			),
			[
				Symbol("DejaVuSans", "Small o dotted", "\u022F"),
				Symbol("DejaVuSans", "Small u dotted", "u\u0307"),
				Symbol("DejaVuSans", "Low-set stress mark", "\u02CC"),
			]
		])
	),
	SymbolFamily(
		"Greek Letters",
		concat3(
			generate(0x0391, 0x03A1, \code -> Symbol("Book", "Greek Capital Letter", fromCharCode(code))),
			generate(0x03A3, 0x03AA, \code -> Symbol("Book", "Greek Capital Letter", fromCharCode(code))),
			generate(0x03B1, 0x03CA, \code -> Symbol("Book", "Greek Small Letter", fromCharCode(code)))
		)
	)
];

isTextSymbol(text : string) -> bool{
	isSome(getTextSymbol(text));
}

validFontFamily(symbol : string, fontFamilyName : string) -> bool {
	if (contains(fontList, fontFamilyName)) {
		textSymbol = getTextSymbol(symbol);
		!isSome(textSymbol) || contains(getValidFonts(textSymbol), fontFamilyName);
	} else true
}

getTextSymbol(text : string) -> Maybe<Pair<string, Symbol>> {
	if (text == "") {
		None();
	} else {
		ch = strLeft(text, 1);
		fold(symbolSet, None(), \acc, family -> {
			if (isNone(acc))
				fold(family.symbols, None(), \acc2, s -> 
					if (isNone(acc2) && s.code == ch) Some(Pair(family.description, s)) else acc2)
			else acc
		})
	}
}


mainFonts = ["Book", "Italic", "Medium", "MediumItalic", "Demi", "Condensed"];
dejaFonts = ["DejaVuSans", "DejaVuSansOblique"];
minionFonts = ["Minion", "MinionItalics" ];
fontList = arrayPush(concat3(mainFonts, dejaFonts, minionFonts), "FeltTipRoman");
greekFonts = concat3(["Book", "Italic", "Medium", "MediumItalic"], dejaFonts, minionFonts);

getValidFonts(text : Maybe<Pair<string, Symbol>>) -> [string] {
	switch(text) {
		Some(pair): {
			unpair(pair, \family, s -> {
				code = getCharCodeAt(s.code, 0);
				d = s.description;
				if (family == "Arrows") {
					dejaFonts

				} else if (family == "Language Symbols") {
					if (code >= 0x00C0 && code <= 0x00FF) mainFonts	
					else []

				} else if (family == "Greek Letters") {
					greekFonts

				} else if (family == "Basic Math Symbols") {
					if (d == "Hyphen-Minus") fontList
					else if (d == "Middle Dot") arrayPush(mainFonts, "Minion")
					else if (d == "Intersection" || d == "Union") dejaFonts
					else if (d == "Division Sign" || d == "Plus-Minus Sign" 
							|| d == "Degree Sign" || d == "Multiplication Sign") subtractA(fontList, ["Minion", "FeltTipRoman"])
					else arrayPush(dejaFonts, "Minion")

				} else if (family == "Miscellaneous Symbols") {
					if (d == "Trade Mark Sign") ["Book", "Medium", "Demi", "DejaVuSans"]
					else if (d == "Copyright Sign" || d == "Registered Sign") concat(mainFonts, dejaFonts)
					else if (d == "No-Break Space") subtractA(fontList, minionFonts)
					else if (d == "Cent Sign" || d == "Euro Sign") mainFonts
					else if (d == "l" || d == "F" || d == "M") dejaFonts
					else fontList
				} else {
					println("Unknown font family: " + family);
					[]
				}
			})
		}
		None() : {
			[];
		}
	}
}
