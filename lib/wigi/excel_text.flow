import wigi/wigi_expr;
import wigi/excel_common;

export {
	wigiConcatenate(l : [WigiValue]) -> WigiValue;
	wigiUpperLower(l : [WigiValue], isUpper : bool) -> WigiValue;
	wigiTrim(l : [WigiValue]) -> WigiValue;
	wigiLen(l : [WigiValue]) -> WigiValue;
	wigiExact(l : [WigiValue]) -> WigiValue;
	wigiMid(l : [WigiValue]) -> WigiValue;
	wigiReplaceExcel(l : [WigiValue]) -> WigiValue;
	wigiLeftRight(l : [WigiValue], isLeft : bool) -> WigiValue;
	wigiChar(l : [WigiValue]) -> WigiValue;
	wigiCode(l : [WigiValue]) -> WigiValue;
	wigiFind(l : [WigiValue]) -> WigiValue;
	wigiProper(l : [WigiValue]) -> WigiValue;
	wigiRept(l : [WigiValue]) -> WigiValue;
	wigiText(args : [WigiValue]) -> WigiValue;
	wigiTagMatch(l : [WigiValue]) -> WigiValue;
}


wigiRept(l : [WigiValue]) -> WigiValue {
	if (length(l) != 2) WigiError("Wrong number of arguments. Expected 2, but got " + i2s(length(l)))
	else {
		wigiTemplateTextFunction([l[0]], -1, \arr : [WigiValue] -> {
			switch(l[1]) {
				WigiInt(d) : WigiString(fold(generate(0, d, \i -> arr[0]), "", \acc, v -> acc + getWigiText(v)));
				default : WigiError("Invalid type of the second argument");
			}
		})
	}
}

wigiProper(l : [WigiValue]) -> WigiValue {
	if (length(l) != 1) WigiError("Wrong number of arguments. Expected 1, but got " + i2s(length(l)))
	else {
		switch(l[0]) {
			WigiString(vr) : WigiString(fold(strSplit2(toLowerCase(vr), [" ","'","-"]), "", \a, b -> a + toUpperCase(strLeft(b, 1)) + substring(b,1,strlen(b))));
			default : WigiError("Invalid type of the argument. Expected string type.")
		}
	}
}

wigiFind(l : [WigiValue]) -> WigiValue {
	wigiTemplateTextFunction(l, 2, \arr : [WigiValue] -> {
		index = strIndexOf(getWigiText(arr[1]), getWigiText(arr[0]));
		if (index == -1) WigiError("Substring not found")
		else WigiInt(index+1)
	})
}

wigiCode(l : [WigiValue]) -> WigiValue {
	if (length(l) != 1) WigiError("Wrong number of arguments. Expected 1, but got " + i2s(length(l)))
	else {
		switch(l[0]) {
			WigiString(vr) : WigiInt(s2a(vr)[0]);
			default : WigiError("Invalid type of the argument. Expected string type.")
		}
	}
}

wigiChar(l : [WigiValue]) -> WigiValue {
	if (length(l) != 1) WigiError("Wrong number of arguments. Expected 1, but got " + i2s(length(l)))
	else {
		switch(l[0]) {
			WigiInt(vr) : WigiString(fromCharCode(vr));
			default : WigiError("Invalid type of the argument. Expected int type.")
		}
	}
}

wigiLeftRight(l : [WigiValue], isLeft : bool) -> WigiValue {
	if (length(l) == 1) wigiTemplateTextFunction(l, -1, \arr : [WigiValue] -> {
		if (isLeft) WigiString(strLeft(getWigiText(arr[0]), 1))
		else WigiString(substring(getWigiText(arr[0]), strlen(getWigiText(arr[0]))-1, 1))
	})
	else {
		if (length(l) != 2) WigiError("Wrong number of arguments. Expected 2, but got " + i2s(length(l)))
		else {
				wigiTemplateTextFunction(l, -1, \arr : [WigiValue] -> {
					switch(l[1]) {
						WigiInt(v) : {
							if (v < 0) WigiError("Second argument must be greater than or equal to zero.")
							else if (v == 0) WigiString("")
							else if (v>strlen(getWigiText(arr[0])) || v==strlen(getWigiText(arr[0]))) WigiString(getWigiText(arr[0]))
							else if (isLeft) WigiString(strLeft(getWigiText(arr[0]), trunc(wigiValue2Double(l[1]))))
							else WigiString(substring(getWigiText(arr[0]), strlen(getWigiText(arr[0]))-trunc(wigiValue2Double(l[1])), strlen(getWigiText(arr[0]))-1))
						}
						default : WigiError("Invalid type of second argument. Expected int type")
					}
				})
		}
	}
}

wigiReplaceExcel(l : [WigiValue]) -> WigiValue {
	if (length(l) != 4) WigiError("Wrong number of arguments. Expected 4, but got " + i2s(length(l)))
	else {
		wigiTemplateTextFunction([l[0], l[3]], -1, \arr : [WigiValue] -> {
			isValidArrElement = \v -> {
						switch(v) {
							WigiInt(vr) : true;
							default : false
						}
			}
			if(forall([l[1], l[2]], isValidArrElement)) {
				WigiString(strLeft(getWigiText(arr[0]), trunc(wigiValue2Double(l[1]))-1)+ getWigiText(l[3]) +
					substring(getWigiText(arr[0]), trunc(wigiValue2Double(l[1]))+trunc(wigiValue2Double(l[2]))-1, strlen(getWigiText(arr[0]))-1))
			}
			else WigiError("Invalid type of arguments. [17]")
		})
	}
}


wigiMid(l : [WigiValue]) -> WigiValue {
	if (length(l) != 3) WigiError("Wrong number of arguments. Expected 3, but got " + i2s(length(l)))
	else {
		wigiTemplateTextFunction([l[0]], -1, \arr : [WigiValue] -> {
			isValidArrElement = \v -> {
						switch(v) {
							WigiInt(vr) : true;
							default : false
						}
			}
			if (forall(tail(l), isValidArrElement)) {
				WigiString(substring(getWigiText(arr[0]), trunc(wigiValue2Double(l[1]))-1, trunc(wigiValue2Double(l[2]))))
			}
			else WigiError("Invalid type of arguments. [18]")
		})
	}
}

wigiExact(l : [WigiValue]) -> WigiValue {
	wigiTemplateTextFunction(l, 2, \arr : [WigiValue] -> {
		WigiBool(getWigiText(arr[0]) == getWigiText(arr[1]))
	})
}

wigiLen(l : [WigiValue]) -> WigiValue {
	wigiTemplateTextFunction(l, 1, \arr : [WigiValue] -> {
		WigiInt(strlen(getWigiText(arr[0])))
	})
}

wigiTrim(l : [WigiValue]) -> WigiValue {
	wigiTemplateTextFunction(l, 1, \arr : [WigiValue] -> {
		WigiString(trim(getWigiText(arr[0])))
	})
}

wigiUpperLower(l : [WigiValue], isUpper : bool) -> WigiValue {
	wigiTemplateTextFunction(l, 1, \arr : [WigiValue] -> {
		WigiString(if(isUpper) toUpperCase(getWigiText(arr[0])) else toLowerCase(getWigiText(arr[0])))
	})
}

wigiConcatenate(l : [WigiValue]) -> WigiValue {
	wigiTemplateTextFunction(l, -1, \arr : [WigiValue] -> {
		WigiString(fold(arr, "", \a, b -> a + getWigiText(b)))
	})
}

isDateFormat(arg : WigiValue) {
	switch (arg) {
		WigiString(str): {
			parts = strSplit(toLowerCase(str), "/");
			if (length(parts) > 0 && length(parts) <= 3) {
				fold(parts, true, \acc, part -> {
					l = strlen(part);
					acc && l > 0 &&
						((trim2(part, "d") == "" && l < 5) ||
						(trim2(part, "m") == "" && l < 6) ||
						(trim2(part, "y") == "" && (l == 2 || l == 4)))

				})
			} else {
				false
			}
		};
		default : false
	}
}

wigiText(args : [WigiValue]) -> WigiValue {
	if (length(args) == 1) {
		WigiString(wigiValue2String(args[0]))
	} else if (length(args) == 2) {
		if (isDateFormat(args[1])) {
			wigiTemplateDateFunction(args, 2, \arr -> {
				switch(arr[1]) {
					WigiString(str) :  {
						template = "%" + strReplace(toUpperCase(str), "/", "/%");
						switch (arr[0]) {
							WigiString(s): parseDateString(
								s,
								\d -> WigiString(date2formatString(d, template)),
								\__ -> WigiError("#VALUE!")
							);
							WigiDate(y, m, d): WigiString(date2formatString(Date(y, m, d), template));
							default : WigiError("#VALUE!");
						}
					}
					default : WigiError("Wrong format.")
				}
			})
		} else {
			WigiError("Unknown format.")
		}
	} else {
		WigiError("Wrong number of arguments.")
	}
}

wigiTagMatch(l : [WigiValue]) -> WigiValue {
	wigiTemplateTextFunction(l, -1, \arr : [WigiValue] -> {
		if (length(arr) > 3 && length(arr) < 2) {
			WigiError("Wrong number of arguments. 2 or 3 is required")
		} else {
			separators = switch (elementAt(arr, 2, WigiString(","))) {
				WigiArray(seps) : {
					map(seps, wigiValue2String)
				}
				WigiString(singleSep) : {
					[singleSep]
				}
				default: [","]
			}
			prepareTags = \set : WigiValue -> {
				map(strSplit2WithoutLeave(wigiValue2String(set), separators), trim)
			}
			WigiBool(isIntersecting(prepareTags(arr[0]), prepareTags(arr[1])))
		}
	})
}
