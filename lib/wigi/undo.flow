import wigi/editor_types;
import wigi/storage;
import wigi/wigi_compare;

export {
	wigiUndo(state : WigiEditorState) -> void;
	wigiRedo(state : WigiEditorState) -> void;
	stateForUndoStack(state : WigiEditorState, event : WigiEvent) -> WigiStateSnapshot;
	addToUndoStack(state : WigiEditorState, snapshot : WigiStateSnapshot, event : WigiEvent, handled : bool) -> void;
}

emptySnapshot : WigiStateSnapshot = WigiStateSnapshot(WigiEmpty(), [], WigiSelection([], []), []);

getWigiStateSnapshot(state : WigiEditorState) -> WigiStateSnapshot {
	WigiStateSnapshot(
		wigiForStorage(getValue(state.document), false),
		getValue(state.cursor),
		getValue(state.selection),
		switch (getValue(state.selectionAnchor)){
			None() : [];
			Some(arr) : arr;
		}
	);
}

stateForUndoStack (state : WigiEditorState, event : WigiEvent) -> WigiStateSnapshot {
	isInsertTextSequence = \e -> {
		isSameStructType(^(state.prevEvent), WigiInsertText("")) && isSameStructType(^(state.prevEvent), event)
	}

	snapshot = if (canEventModifyState(event) && event != WigiUndo() && event != WigiRedo() && !isInsertTextSequence(event)) {
		getWigiStateSnapshot(state);
	} else {
		emptySnapshot;
	}
	state.prevEvent := event;
	snapshot;
}

addToUndoStack(state : WigiEditorState, stateBeforeEvent : WigiStateSnapshot, event : WigiEvent, handled : bool) -> void {
	if (handled && stateBeforeEvent != emptySnapshot) {
		stateAfterEvent = getWigiStateSnapshot(state);
		// add a new item to undo stack if document changed on processing the event
		if (isDocumentChanged(stateBeforeEvent, stateAfterEvent)) {
			next(state.undoStack, Cons(stateBeforeEvent, getValue(state.undoStack)));

			// TODO: Consider to limit the undo stack to 100 elements, or something
			// println("Undo stack length: " + i2s(foldList(getValue(state.undoStack), 0, \acc, l -> acc + 1)));

			nextDistinct(state.redoStack, makeList());
		}
	}
}

wigiUndo(state : WigiEditorState) -> void {
	doUndoRedoAction(state, true);
}

wigiRedo(state : WigiEditorState) -> void {
	doUndoRedoAction(state, false);
}

doUndoRedoAction(state : WigiEditorState, isUndo : bool) -> void {
	stackFrom = if (isUndo) state.undoStack else state.redoStack;
	stackTo   = if (isUndo) state.redoStack else state.undoStack;
	currentState = getWigiStateSnapshot(state);
	stack = getValue(stackFrom);
	switch (stack) {
		EmptyList():{}
		Cons(stackHead, stackTail) :{
			switch (stackHead : WigiUndoType) {
				WigiStateSnapshot(d, c, s, sa) :{
					restoreState(state, stackHead);
					next(stackFrom, stackTail);
					next(stackTo, Cons(currentState, getValue(stackTo)));
				}
			}
		}
	}
}

restoreState(state : WigiEditorState, snapshot : WigiStateSnapshot) -> void {
	// save undo/redo before setting a document
	undoList = getValue(state.undoStack);
	redoList = getValue(state.redoStack);

	setWigiEditorDocument(state, snapshot.document);

	// restore undo/redo after setting a document
	next(state.undoStack, undoList);
	next(state.redoStack, redoList);

	next(state.cursor, snapshot.cursor);
	next(state.selection, snapshot.selection);
	next(state.selectionAnchor,
			if (snapshot.selectionAnchor == []) None()
			else Some(snapshot.selectionAnchor)
	);
}

isDocumentChanged(beforeState : WigiStateSnapshot, afterState : WigiStateSnapshot) -> bool{
	!compareWigi(beforeState.document, afterState.document);
}
