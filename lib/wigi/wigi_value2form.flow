import wigi/wigi_expr;
import wigi/plumbing;
import wigi/types;
import wigi/modify;
import form;
import stringmath;
import wigi/excel_math;
import textstyles2;
import date;
import paragraph;
import basecolors;

export {
	wigiValue2Form(value : WigiValue, textStyle : [WigiTextStyle], defaultStyles : [WigiStyles]) -> Form;
	wigiValue2FormCustom(value : WigiValue, textStyle : [WigiTextStyle], defaultStyles : [WigiStyles], formattingStyle: WigiCellFormatting) -> Form;
}

makeScientificNotation(scientific: bool) -> (double) -> Triple<bool, double, int> {
	\number -> {
		if (scientific) {
			exponent = if (number != 0.0) floor(log10(abs(number))) else 0;
			coefficient = abs(number) / dpow(10.0, i2d(exponent));
			Triple(number < 0.0, coefficient, exponent)
		} else {
			Triple(number < 0.0, abs(number), 0)
		}
	}
}

// make nice Form for number
makeNumberForm(prefix: string, numberStr: string, exponent: int, suffix: string, style: [CharacterStyle]) -> Form {
	Cols(concat3(
		[Text(prefix + numberStr, style)],
		if (exponent != 0) {
			fontSize : FontSize = extractStruct(style, FontSize(0.0));
			[
				Text(" x 10", style),
				Text(i2s(exponent), style |> withFontMultiplier(SuperSubscriptScalingCoeff))
			]
		} else [],
		[Text(suffix, style)]
	))
}


applyCurrencyCodeAndNegativeFormat(number: double, decimal: int, currencyCode: Maybe<CurrencyCodeStyle>, negativeFormat: NegativeNumberStyle, useSeparator: bool, scientific: bool, characterStyle: [CharacterStyle]) -> Form {
	// 1. Split to sign, coefficient & exponent
	// makeScientificNotation

	// 2. decimal (Triple<bool, double, int>) -> Triple<bool, string, int>
	applyDecimal = \p -> {
		untriple(p, \negative, coefficient, exponent -> {
			coefficientStr = decimals(coefficient, decimal, true);
			//exponentStr = if (exponent != 0) " x 10^" + i2s(exponent) else "";
			Triple(negative, coefficientStr, exponent)
		})
	}

	// 3. useSeparator (Triple<bool, string, int>) -> Triple<bool, string, int>
	applySeparator = \p -> {
		untriple(p, \negative, coefficient, exponent -> {
			coefficientWithDividers = if (useSeparator) {
				dividerPos = strIndexOf(coefficient, ".");
				integerPart = if (dividerPos == -1) coefficient else strLeft(coefficient, dividerPos);
				fractionalPart = if (dividerPos == -1) "" else strRight(coefficient, dividerPos);
				reverse(stringFoldi(reverse(integerPart), "", \i, acc, code -> {
					divider = if (((i % 3) == 0) && (i > 0)) "," else "";
					acc + divider + fromCharCode(code);
				})) + fractionalPart;
			} else {
				coefficient
			}
			Triple(negative, coefficientWithDividers, exponent)
		})
	}

	// 4. currencyCode (Triple<bool, string, int>) -> Triple<bool, string, int>
	applyCurrencySymbol = \p -> {
		untriple(p, \negative, numberStr, exponent -> {
			currencySymbol = eitherMap(currencyCode, \code -> {
				switch(code) {
					ccUSD(): "$";
					ccEUR(): "€";
					ccGBP(): "£";
					ccYEN(): "¥";
				}
			}, "");
			Triple(negative, currencySymbol + numberStr, exponent)
		})
	}

	// 5. negativeFormat and characterStyle (Triple<bool, string, int>) -> Form
	applyNegativeFormat = \p -> {
		untriple(p, \negative, numberStr, exponent -> {
			if (negative) {
				switch(negativeFormat) {
					nnNormal(): makeNumberForm("-", numberStr, exponent, "", characterStyle);
					nnRed(): makeNumberForm("", numberStr, exponent, "", characterStyle |> withFillColor(red));
					nnBrackets(): makeNumberForm("(", numberStr, exponent, ")", characterStyle);
					nnBracketsAndRed(): makeNumberForm("(", numberStr, exponent, ")", characterStyle |> withFillColor(red));
				}
			} else {
				makeNumberForm("", numberStr, exponent, "", characterStyle);
			}
		})
	}

	number |> makeScientificNotation(scientific) |> applyDecimal |> applySeparator |> applyCurrencySymbol |> applyNegativeFormat
}

applyCellFormattingStyleDate(day: int, month: int, year: int, style: WigiCellFormattingStyle, characterStyle: [CharacterStyle]) -> Form {
	year1 = if (year >= 50 && year < 100) 1900 + year
			else if (year >= 0 && year < 50) 2000 + year
			else year;
	myMakeText = \text -> Text(text, characterStyle);
	date = Date(year1, month, day);
	defaultFormat = i2s(day) + "/" + i2s(month) + "/" + i2s(year1);
	switch(style) {
		WigiCellFormattingDate(dateFormat): {
			if (dateFormat == 0) i2s(month) + "/" + i2s(day)										// MM/DD   (Ex: 1/30)
			else if (dateFormat == 1) i2s(day) + "-" + monthString(date, false)						// DD-Mon  (Ex: 30-Jan)
			else if (dateFormat == 2) i2s(month) + "/" + i2s(day) + "/" + i2s(year1)				// MM/DD/YYYY  (Ex: 1/30/2014)
			else if (dateFormat == 3) i2s(month) + "/" + i2s(day) + "/" + i2s(year1 % 2000)			// MM/DD/YY  (Ex: 1/30/14)
			else if (dateFormat == 4) i2s(day) + "/" + i2s(month) + "/" + i2s(year1)				// DD/MM/YYYY  (Ex: 30/1/2014)
			else if (dateFormat == 5) i2s(day) + "/" + i2s(month) + "/" + i2s(year1 % 2000)			// DD/MM/YY  (Ex: 30/1/14)
			else if (dateFormat == 6) monthString(date, true) + " " + i2s(day) + ", " + i2s(year1)	// Month Day, YYYY  (Ex: January 30, 2014)
			else defaultFormat
		}
		default: defaultFormat;
	} |> myMakeText
}

applyCellFormattingStyleTime(hour:int, minute: int, sec: int, style: WigiCellFormattingStyle, characterStyle: [CharacterStyle]) -> Form {
	myMakeText = \text -> Text(text, characterStyle);
	time = Time(0, 0, 0, hour, minute, sec);
	defaultFormat = i2s(hour) + ":" + i2s(minute) + ":" + i2s(sec);
	switch(style) {
		WigiCellFormattingTime(timeFormat): {
			if (timeFormat == 0) getTimeOnlyString(time, true, false)		// HH:MM:SS on 24-hour clock (Ex: 16:30:20)
			else if (timeFormat == 1) getTimeOnlyString(time, false, false)	// HH:MM on 24-hour clock (Ex: 16:30)
			else if (timeFormat == 2) getTimeOnlyString(time, true, true)	// HH:MM:SS PM (Ex: 4:30:20 PM)
			else if (timeFormat == 3) getTimeOnlyString(time, false, true)	// HH:MM PM (Ex: 4:30 PM)
			else defaultFormat
		}
		default: defaultFormat;
	} |> myMakeText
}

applyCellFormattingStyleSignificant(number: double, digits: int, scientific: bool, characterStyle: [CharacterStyle]) -> Form {
	// http://www.vertex42.com/ExcelTips/significant-figures.html
	roundSignificant = \d -> {
		if (digits < 1) {
			d2s(d)
		} else {
			exponent = if (d != 0.0) floor(log10(abs(d))) else 0;
			n = digits - (1 + exponent);
			value = wigiRound([WigiDouble(d), WigiInt(n)]);
			result = wigiValue2Double(value);
			if (n >= 0) decimals(result, n, true) else d2s(result)
		}
	}
	applySignificant = \p -> {
		untriple(p, \negative, coefficient, exponent -> {
			makeNumberForm(
				if (negative) "-" else "",
				roundSignificant(coefficient),
				exponent,
				"",
				characterStyle
			)
		})
	}

	number |> makeScientificNotation(scientific) |> applySignificant
}

applyCellFormattingStyleInt(number: int, style: WigiCellFormattingStyle, characterStyle: [CharacterStyle]) -> Form {
	switch(style) {
		WigiCellFormattingGeneral(): Text(i2s(number), characterStyle);
		WigiCellFormattingNumber(decimal, useSeparator, negativeFormat, scientific): applyCurrencyCodeAndNegativeFormat(i2d(number), decimal, None(), negativeFormat, useSeparator, scientific, characterStyle);
		WigiCellFormattingCurrency(decimal, currencyCode, negativeFormat): applyCurrencyCodeAndNegativeFormat(i2d(number), decimal, currencyCode, negativeFormat, true, false, characterStyle);
		WigiCellFormattingDate(dateFormat): applyCellFormattingStyleDate(number, 1, 0, style, characterStyle);
		WigiCellFormattingTime(timeFormat): applyCellFormattingStyleTime(number, 0, 0, style, characterStyle);
		WigiCellFormattingPercentage(decimal): Text(decimals(i2d(number) * 100.0, decimal, true) + "%", characterStyle);
		WigiCellFormattingSignificant(digits, scientific): applyCellFormattingStyleSignificant(i2d(number), digits, scientific, characterStyle)
	}
}

applyCellFormattingStyleDouble(number: double, style: WigiCellFormattingStyle, characterStyle: [CharacterStyle]) -> Form {
	switch(style) {
		WigiCellFormattingGeneral(): Text(d2st(number, 9), characterStyle);
		WigiCellFormattingNumber(decimal, useSeparator, negativeFormat, scientific): applyCurrencyCodeAndNegativeFormat(number, decimal, None(), negativeFormat, useSeparator, scientific, characterStyle);
		WigiCellFormattingCurrency(decimal, currencyCode, negativeFormat): applyCurrencyCodeAndNegativeFormat(number, decimal, currencyCode, negativeFormat, true, false, characterStyle);
		WigiCellFormattingDate(dateFormat): applyCellFormattingStyleDate(trunc(number), 1, 0, style, characterStyle);
		WigiCellFormattingTime(timeFormat): applyCellFormattingStyleTime(trunc(number), 0, 0, style, characterStyle);
		WigiCellFormattingPercentage(decimal): Text(decimals(number * 100.0, decimal, true) + "%", characterStyle);
		WigiCellFormattingSignificant(digits, scientific): applyCellFormattingStyleSignificant(number, digits, scientific, characterStyle)
	}
}

wigiValue2Form(value : WigiValue, textStyle : [WigiTextStyle], defaultStyles : [WigiStyles]) -> Form {
	wigiValue2FormCustom(value, textStyle, defaultStyles, DefaultCellFormatting)
}

wigiValue2FormCustom(value : WigiValue, textStyle : [WigiTextStyle], defaultStyles : [WigiStyles], formattingStyle: WigiCellFormatting) -> Form {
	defaultTextStyles = if (length(defaultStyles) > 0) defaultStyles[0].textStyle else [];
	style = fold(defaultTextStyles, textStyle, \acc, st -> if (exists(acc, \t -> isSameStructType(t, st))) acc else arrayPush(acc, st));

	checkUnderlines = \text -> addUnderlineToForm(addDoubleUnderlineToForm(text, style), style);

	switch (value : WigiValue) {
		WigiBool(v): Text(b2s(v), getCharacterStyleFromWigiTextStyle(style));
		WigiInt(v): applyCellFormattingStyleInt(v, formattingStyle.style, getCharacterStyleFromWigiTextStyle(style));
		WigiDouble(v): applyCellFormattingStyleDouble(v, formattingStyle.style, getCharacterStyleFromWigiTextStyle(style));
		WigiLambda(a, b): Text(toString(value), getCharacterStyleFromWigiTextStyle(style));
		WigiString(v): Paragraph([TextFragment(v, getCharacterStyleFromWigiTextStyle(style))], [TightWidth()]);
		WigiDate(y, m, d): applyCellFormattingStyleDate(d, m, y, formattingStyle.style, getCharacterStyleFromWigiTextStyle(style));
		WigiTime(h, m, s): applyCellFormattingStyleTime(h, m, s, formattingStyle.style, getCharacterStyleFromWigiTextStyle(style));
		WigiBuiltInName(name) : Text(name, getCharacterStyleFromWigiTextStyle(style));
		WigiError(m): Text(m, arrayPush(getCharacterStyleFromWigiTextStyle(style), Fill(0xff0000)));
		WigiDefaultValue(): Empty();
		WigiArray(vs): Cols(interleave(map(vs, \v -> wigiValue2Form(v, style, defaultStyles)), Text(", ", getCharacterStyleFromWigiTextStyle(style))));
		WigiRecord(vs): Lines(map(vs, \p ->
			Cols([Text(p.first + ":", getCharacterStyleFromWigiTextStyle(style)), wigiValue2Form(p.second, style, defaultStyles)])
		));
		WigiElementValue(e): joinWigiPages(map(useWigify(e, defaultStyles), \p -> p.form));
	} |> checkUnderlines;
}
