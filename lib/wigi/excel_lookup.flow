import wigi/wigi_expr;
import wigi/excel_common;

export {
	wigiMatch(l : [WigiValue]) -> WigiValue;
	wigiChoose(l : [WigiValue]) -> WigiValue;
	wigiLookUp(l : [WigiValue]) -> WigiValue;
	wigiColumns(l : [WigiValue]) -> WigiValue;
	wigiRows(l : [WigiValue]) -> WigiValue;
	wigiIndex(l : [WigiValue]) -> WigiValue;
	wigiRow(l : [WigiValue]) -> WigiValue;
	wigiColumn(l : [WigiValue]) -> WigiValue;

	// Returns the transpose of an array
	wigiTranspose(l : [WigiValue]) -> WigiValue;
	// Flatten array of arrays into one long array. Equivalent to contacA
	wigiFlatten(l : [WigiValue]) -> WigiValue;
}

wigiMatch(l : [WigiValue]) -> WigiValue {
	if (length(l) < 2 || length(l) > 3) WigiError("Wrong number of arguments. Expected 2-3, but got " + i2s(length(l)))
	else {
		matchType = if (length(l) == 3) wigiValue2Int(l[2]) else 1;
		ensureWigiArray(l[1], \els0 : [WigiValue] -> {
			sample = wigiMatchPrepareValue(l[0]);
			els1 = map(els0, wigiMatchPrepareValue);
			if (matchType == 0) {
				// TODO: support wildcards "?" and "*" in sample
				switch(findi(els1, \e -> e == sample)) {
					Some(i): WigiInt(i+1);
					None(): WigiError("#N/A")
				}
			} else {
				els2 = filter(mapi(els1, \i, e -> Pair(i+1, e)), \ie -> ie.second.structname == sample.structname);

				lessThan = switch(sample) {
					WigiString(v): \e -> cast(e : WigiValue -> WigiString).v < v;
					WigiDouble(v): \e -> cast(e : WigiValue -> WigiDouble).v < v;
					default: \e -> e == sample
				}
				satisfy = if (matchType > 0) \ie -> ie.second == sample || lessThan(ie.second)
				else \ie -> ie.second == sample || !lessThan(ie.second);

				switch(wigiMatchSearch(els2, satisfy)) {
					Some(ie): WigiInt(ie.first);
					None(): WigiError("#N/A")
				}
			}
		})
	}
}

wigiMatchPrepareValue(val : WigiValue) -> WigiValue {
	switch(val) {
		WigiString(v): WigiString(toUpperCase(v));
		WigiInt(v): WigiDouble(i2d(v));
		default: val
	}
}

// binary search of farthest item that satisfy condition
wigiMatchSearch(els : [??], satisfy : (??) -> bool) -> Maybe<??> {
	firstUnsatisfy = wigiMatchSearch2(els, satisfy, 0, length(els));
	if (firstUnsatisfy == 0) None()
	else Some(els[firstUnsatisfy-1])
}

wigiMatchSearch2(els : [??], satisfy : (??) -> bool, l : int, r : int) -> int {
	if (l >= r) l
	else {
		m = (l + r)/2;
		samp = els[m];
		if (satisfy(samp)) wigiMatchSearch2(els, satisfy, m+1, r)
		else wigiMatchSearch2(els, satisfy, l, m)
	}
}

// http://office.microsoft.com/en-001/excel-help/column-HP005209016.aspx?CTT=5&origin=HP005201149
wigiColumn(l : [WigiValue]) -> WigiValue {
	if (length(l) != 1) WigiError("Wrong number of arguments. Expected 1, but got " + i2s(length(l)))
	else {
		switch(l[0]) {
			WigiString(s) : {
				if (isRangeVariable(s)) WigiInt(s2a(toUpperCase(strLeft(s, 1)))[0]-64)
				else WigiError("Invalid cell name");
			}
			default : WigiError("Invalid type of the argument. Excpected string");
		}
	}
}

// http://office.microsoft.com/en-001/excel-help/row-HP005209244.aspx?CTT=5&origin=HP005201149
wigiRow(l : [WigiValue]) -> WigiValue {
	if (length(l) != 1) WigiError("Wrong number of arguments. Expected 1, but got " + i2s(length(l)))
	else {
		switch(l[0]) {
			WigiString(s) : {
				if (isRangeVariable(s)) WigiInt(s2i(substring(s,1,strlen(s)-1)))
				else WigiError("Invalid cell name");
			}
			default : WigiError("Invalid type of the argument. Excpected string");
		}
	}
}

// http://office.microsoft.com/en-001/excel-help/choose-HP005209013.aspx?CTT=5&origin=HP005201149
wigiChoose(l : [WigiValue]) -> WigiValue {
	if (length(l) < 2) WigiError("Wrong number of arguments. Expected at least 2 argument, but got " + i2s(length(l)))
	else {
		switch(l[0]) {
			WigiInt(v) : {
				arrValues = tail(l);
				wigiTemplateTextFunction(arrValues, -1, \arr : [WigiValue] -> {
					if (v < 1 || v > length(arrValues)) WigiError("Index out of range")
					else arr[v-1]
				})
			}
			default : WigiError("Invalid type of the first argument. Only integer type is valid")
		}
	}
}

// http://office.microsoft.com/en-001/excel-help/lookup-HP005209163.aspx?CTT=5&origin=HP005201149
wigiLookUp(l : [WigiValue]) -> WigiValue {
	if (length(l) != 3) WigiError("Wrong number of arguments. Expected 3, but got " + i2s(length(l)))
	else {
		wigiTemplateMathFunction([l[0]], 1, \arr0 : [WigiValue] -> {
			wigiTemplateStatFunction([l[1]], 1, \arr1 : [WigiValue], arg1 : [WigiValue] -> {
				ensureWigiArray(l[2], \arr2 : [WigiValue] -> {
					if (length(arr1) != length(arr2)) WigiError("The length of an arrays are different")
					else {
						f = findi(arr1, \a -> wigiValue2Double(a) == wigiValue2Double(arr0[0]));
						switch(f) {
							None() : WigiError("The value: " + toString(arr0[0]) + " not found");
							Some(v) : arr2[v];
						}
					}
				})
			})
		})
	}
}

ensureWigiArray(array : WigiValue, fn : ([WigiValue]) -> WigiValue) -> WigiValue {
	switch(array) {
		WigiArray(vs): fn(wigiTemplateFlattenArray(vs));
		default: WigiError("Invalid type of first argument. Expected: WigiArray")
	}
}

// http://office.microsoft.com/en-001/excel-help/columns-HP005209017.aspx?CTT=5&origin=HP005201149
wigiColumns(l : [WigiValue]) -> WigiValue {
	if (length(l) != 1) WigiError("Wrong number of arguments. Expected 1, but got " + i2s(length(l)))
	else {
		 switch(l[0]) {
		 	WigiArray(wa) : {
		 			isValidArrElement = \v -> {
								switch(v) {
									WigiArray(a) : true;
									default : false
								}
							}
					if (forall(wa, isValidArrElement)) WigiInt(length(wa))
					else WigiError("Invalid type of arguments. [7]");
			}
			default : WigiError("Invalid type of arguments. [8]");
		}
	}
}

// http://office.microsoft.com/en-001/excel-help/rows-HP005209246.aspx?CTT=5&origin=HP005201149
wigiRows(l : [WigiValue]) -> WigiValue {
	if (length(l) != 1) WigiError("Wrong number of arguments. Expected 1, but got " + i2s(length(l)))
	else {
		switch(l[0]) {
			WigiArray(wa) : {
				isValidArrElement = \v -> {
										switch(v) {
											WigiArray(a) : true;
											default : false
										}
									}
				if (forall(wa, isValidArrElement)) {
					switch(wa[0]) {
						WigiArray(ar) : WigiInt(length(ar));
						default : WigiError("Invalid type of arguments. [9]");
					}
				}
				else WigiError("Invalid type of arguments. [10]");

			}
			default : WigiError("Invalid type of arguments. [11]");
		}
	}
}

// http://office.microsoft.com/en-001/excel-help/index-HP005209138.aspx?CTT=5&origin=HP005201149
wigiIndex(l : [WigiValue]) -> WigiValue {
	if (length(l) != 3) WigiError("Wrong number of arguments. Expected 3, but got " + i2s(length(l)))
	else {
		switch(l[0]) {
			WigiArray(wa) : {
				isValidArrElement = \v -> {
										switch(v) {
											WigiArray(a) : true;
											default : false
										}
									}
				if (forall(wa, isValidArrElement)) {
					wigiTemplateIntFunction(tail(l), -1, \arr -> {
						switch(wa[0]) {
							WigiArray(warr) : {
								colIndex = trunc(wigiValue2Double(l[1]));
								rowIndex = trunc(wigiValue2Double(l[2]));
								if ((colIndex < 1) || (colIndex > length(wa))) WigiError("Row index out of bounds")
								else if ((rowIndex < 1) || (rowIndex > length(warr))) WigiError("Column index out of bounds")
								else {
									switch(wa[colIndex-1]) {
										WigiArray(r) : r[rowIndex-1];
										default : WigiError("Invalid type of arguments. [12]");
									}
								}
							}
							default : WigiError("Invalid type of arguments. [13]")
						}
					})
				}
				else WigiError("Invalid type of arguments. [14]");
			}
			default : WigiError("Invalid type of arguments. [15]");
		}
	}
}

wigiTranspose(l : [WigiValue]) -> WigiValue {
	if (length(l) != 1) WigiError("Wrong number of arguments. Expected 1, but got " + i2s(length(l)))
	else {
		switch (l[0]) {
			WigiArray(wa): {
				isArrayOfArrays = forall(wa, \a -> isSameStructType(a, WigiArray([])));

				// Each of wa[i] should be WigiArray of the same length
				matrix: [[WigiValue]] = map(wa, \a -> {
					switch (a) {
						WigiArray(aa): aa;
						default: {
							// println("wigiTranspose got something that is not an array of arrays:");
							// println(a);
							[]
						}
					}
				});

				if (isArrayOfArrays) {
					// Let's check if all arrays are of same length (i.e. we have a real matrix)
					count = length(matrix[0]);
					if (forall(matrix, \row -> length(row) == count)) {
						// Safe to transpose
						WigiArray(generate(0, count, \i -> {
							WigiArray(mapi(wa, \j, aa -> matrix[j][i]))
						}))
					} else {
						// println("wigiTranspose received something that is not a matrix:");
						// println(l[0]);

						l[0]
					}
				} else {
					// do not transpose, just wrap with WigiArray
					WigiArray(map(wa, \aa -> WigiArray([aa])));
				}
			}
			default: {
				// println("wigiTranspose received something that is not an array:");
				// println(l[0]);

				l[0]
			}
		}
	}
}

wigiFlatten(l : [WigiValue]) -> WigiValue {
	if (length(l) != 1) WigiError("Wrong number of arguments. Expected 1, but got " + i2s(length(l)))
	else {
		switch (l[0]) {
			WigiArray(wa): {
				fold(wa, [], \acc, w -> {
					switch(w) {
						WigiArray(wwa): concat(acc, wwa);
						default: arrayPush(acc, w);
					}
				})
				|> WigiArray
			}
			default: {
				l[0]
			}
		}
	}
}