import ui/imagedecoratedstructs;
import tropic/tropic;
import tropic/tropic2form;

export {
	FormOrTropic(form : Maybe<Form>, tropic : Maybe<Tropic>);
	extractForm(f : FormOrTropic) -> Form;
	extractTropic(f : FormOrTropic) -> Tropic;

	ImageDecoratedEditorAPI : (
		imageDecoratedEditor : (
			formOrTropic : FormOrTropic,
			imageSizeControl : Maybe<ImageSizeControl>,
			decorations : [ImageDecoration],
			onOk : (decorations : [ImageDecoration]) -> void,
			onClose : () -> void
		) -> void
	);

	SetImageDecoratedEditorAPI(api : ImageDecoratedEditorAPI) -> void;

	CallImageDecoratedEditor(
		form : FormOrTropic,
		imageSizeControl : Maybe<ImageSizeControl>,
		decorations : [ImageDecoration],
		onOk : (decorations : [ImageDecoration]) -> void,
		onClose : () -> void
	) -> void;
}

extractForm(f : FormOrTropic) -> Form {
	either(
		f.form,
		switch (f.tropic) {
			Some(value): tropic2form(value, emptyStylesheet);
			None(): Empty()
		}
	)
}
extractTropic(f : FormOrTropic) -> Tropic {
	either(
		f.tropic,
		switch (f.form) {
			Some(value): TForm(value);
			None(): TEmpty()
		}
	)
}

// by default - dummy ImageDecoratedEditorAPI
defaultImageDecoratedEditorAPI = ImageDecoratedEditorAPI(\__, __, __, __, __ -> {});

currentImageDecoratedEditorAPI : ref ImageDecoratedEditorAPI = ref defaultImageDecoratedEditorAPI;

SetImageDecoratedEditorAPI(api : ImageDecoratedEditorAPI) -> void {
	currentImageDecoratedEditorAPI := api
}

CallImageDecoratedEditor(
	form : FormOrTropic,
	imageSizeControl : Maybe<ImageSizeControl>,
	decorations : [ImageDecoration],
	onOk : (decorations : [ImageDecoration]) -> void,
	onClose : () -> void
) -> void {
	^currentImageDecoratedEditorAPI.imageDecoratedEditor(form, imageSizeControl, decorations, onOk, onClose)
}