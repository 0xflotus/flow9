import string;

export {

	native initWebRTC : io(OnReady: () -> void) -> void = WebRTCSupport.initWebRTC;

	makeMediaSender(serverUrl : string, roomId : string, styles : [WebRTCStyle]) -> void;
	makeMediaSenderFromStream(serverUrl : string, roomId : string, stream : native, styles : [WebRTCStyle]) -> void;
	native stopMediaSender : io(mediaSender : native) -> void = WebRTCSupport.stopMediaSender;

	WebRTCStyle ::=
		WebRTCSTUNServer, WebRTCTURNServer,
		WebRTCRecordAudio, WebRTCRecordVideo, WebRTCVideoDeviceId, WebRTCAudioDeviceId,
		//EventListeners
		WebRTCOnMediaSenderReady,
		WebRTCOnNewParticipant,
		WebRTCOnParticipantLeave,
		WebRTCOnMediaStreamReady,
		WebRTCOnRecorderError;

	WebRTCSTUNServer(url : string);
	WebRTCTURNServer(url: string, username: string, password: string);
	WebRTCRecordAudio(record: bool);	 
	WebRTCRecordVideo(record: bool);
	WebRTCAudioDeviceId(deviceId: string);
	WebRTCVideoDeviceId(deviceId: string);

	WebRTCOnMediaSenderReady(onMediaSenderReady : (native) -> void);
	WebRTCOnNewParticipant(onNewParticipant : (string, native) -> void);
	WebRTCOnParticipantLeave(onParticipantLeave : (string) -> void);
	WebRTCOnMediaStreamReady(onMediaStreamReady : (native) -> void);
	WebRTCOnRecorderError(onError : (string) -> void);

	WebRTCInputDevice(deviceId : string, label : string);

}

makeMediaSender(serverUrl : string, roomId : string, styles : [WebRTCStyle]) -> void {
	stunServers = extractStructMany(styles, WebRTCSTUNServer(""));
	stunUrls = map(stunServers, \server -> server.url);

	turnServers = extractStructMany(styles, WebRTCTURNServer("", "", ""));
	turnUrls = map(turnServers, \server -> server.url);
	turnUsernames = map(turnServers, \server -> server.username);
	turnPasswords = map(turnServers, \server -> server.password);

	recordAudio = extractStruct(styles, WebRTCRecordAudio(true)).record;
	recordVideo = extractStruct(styles, WebRTCRecordVideo(true)).record;

	audioDeviceId = extractStruct(styles, WebRTCAudioDeviceId("")).deviceId;
	videoDeviceId = extractStruct(styles, WebRTCVideoDeviceId("")).deviceId;

	OnMediaSenderReady = extractStruct(styles, WebRTCOnMediaSenderReady(nop1)).onMediaSenderReady;
	OnNewParticipant = extractStruct(styles, WebRTCOnNewParticipant(nop2)).onNewParticipant;
	OnParticipantLeave = extractStruct(styles, WebRTCOnParticipantLeave(nop1)).onParticipantLeave;
	OnMediaStreamReady = extractStruct(styles, WebRTCOnMediaStreamReady(nop1)).onMediaStreamReady;
	OnWebRTCError = extractStruct(styles, WebRTCOnRecorderError(nop1)).onError;

	makeMediaSenderNative(serverUrl, roomId, stunUrls, turnUrls, turnUsernames, turnPasswords, recordAudio, recordVideo, videoDeviceId, audioDeviceId,
							OnMediaSenderReady, OnNewParticipant, OnParticipantLeave, OnMediaStreamReady, OnWebRTCError);

}

makeMediaSenderFromStream(serverUrl : string, roomId : string, stream : native, styles : [WebRTCStyle]) -> void {
	stunServers = extractStructMany(styles, WebRTCSTUNServer(""));
	stunUrls = map(stunServers, \server -> server.url);

	turnServers = extractStructMany(styles, WebRTCTURNServer("", "", ""));
	turnUrls = map(turnServers, \server -> server.url);
	turnUsernames = map(turnServers, \server -> server.username);
	turnPasswords = map(turnServers, \server -> server.password);

	OnMediaSenderReady = extractStruct(styles, WebRTCOnMediaSenderReady(nop1)).onMediaSenderReady;
	OnNewParticipant = extractStruct(styles, WebRTCOnNewParticipant(nop2)).onNewParticipant;
	OnParticipantLeave = extractStruct(styles, WebRTCOnParticipantLeave(nop1)).onParticipantLeave;
	OnEError = extractStruct(styles, WebRTCOnRecorderError(nop1)).onError;

	makeMediaSenderFromStreamNative(serverUrl, roomId, stunUrls, turnUrls, turnUsernames, turnPasswords, stream,
							OnMediaSenderReady, OnNewParticipant, OnParticipantLeave, OnEError);

}

native makeMediaSenderNative : io(serverUrl : string, roomId : string, stunUrls : [string], turnUrls : [string], turnUsernames : [string], turnPasswords : [string],
	recordAudio : bool, recordVideo : bool, videoDeviceId : string, audioDeviceId : string,
	OnMediaSenderReady : (native) -> void, OnNewParticipant : (string, native) -> void, OnParticipantLeave : (string) -> void, OnMediaStreamReady : (native) -> void,
	OnEError : (string) -> void) -> void = WebRTCSupport.makeMediaSender;

native makeMediaSenderFromStreamNative : io(serverUrl : string, roomId : string, stunUrls : [string], turnUrls : [string], turnUsernames : [string], turnPasswords : [string],
	stream : native,
	OnMediaSenderReady : (native) -> void, OnNewParticipant : (string, native) -> void, OnParticipantLeave : (string) -> void,
	OnEError : (string) -> void) -> void = WebRTCSupport.makeMediaSenderFromStream;
