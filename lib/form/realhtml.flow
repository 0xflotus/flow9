import form/form;
import sys/target;
import form/realhtmlworkaround;
export {
	//  A wrapper for RealHTML form with channels to send/receive cross domain messages with JS window.postMessage
	// function.
	//  targetOrigin :
	// Specifies what the origin of embedded page must be for the event to be dispatched, either as the literal string "*"
	// (indicating no preference) or as a URI. If at the time the event is scheduled to be dispatched the scheme,
	// hostname, or port of otherWindow's document does not match that provided in targetOrigin,
	// the event will not be dispatched

	//	An example of JS for embedded cross-domain page
/*
<script type="text/javascript" src="/flow/js/toflow.js"></script>
<script type="text/javascript">
	function receiveMessage(e) {
		// When sendChannel is changed in flow code, this is where the message goes:
		console.log("Message from panel received: " + e.data);
	}
	window.addEventListener('message', receiveMessage);
</script>
*/
	//	Sending messages to flow code:
	//		postToFlow("message to flow")
	// You can send any object which is converted to a JSON string and
	// received by the flow side through the receiveChannel.

	RealHTMLCrossDomain(url : string, domain : string, wh : Behaviour<WidthHeight>,
		sendChannel : DynamicBehaviour<string>,
		receiveChannel : DynamicBehaviour<string>,
		targetOrigin : string,
		key : string,
		onLoaded : () -> void,
		zoomEnabled : Behaviour<bool>) -> Form;

	// + onError, which is not very reliable, see form.flow, OnError style for RealHtml
	RealHTMLCrossDomain2(url : string, domain : string, wh : Behaviour<WidthHeight>,
		sendChannel : DynamicBehaviour<string>,
		receiveChannel : DynamicBehaviour<string>,
		targetOrigin : string,
		key : string,
		onLoaded : () -> void,
		onError : (string) -> void,
		zoomEnabled : Behaviour<bool>) -> Form;

	isCustomCacheSupported() -> bool;
}

RealHTMLCrossDomain(url, domain, wh, sendChannel, receiveChannel, targetOrigin, key, onLoaded, zoomEnabled) {
	RealHTMLCrossDomain2(url, domain, wh, sendChannel, receiveChannel, targetOrigin, key, onLoaded, ignore, zoomEnabled);
}

RealHTMLCrossDomain2(url : string, domain : string, wh : Behaviour<WidthHeight>, sendChannel : DynamicBehaviour<string>,
	receiveChannel : DynamicBehaviour<string>, targetOrigin : string, key : string, onLoaded : () -> void, onError : (string) -> void, zoomEnabled : Behaviour<bool>) -> Form {
	sendToJS = ref \m : string -> {};
	getHostCall = \hc -> {
		sendToJS := \msg : string -> {
			hc("postMessage", [msg, targetOrigin]);
			{}
		};
	};
	flowCallBack = \args -> {
		if (length(args) == 2 && args[0] == "postMessage") {
			next(receiveChannel, args[1]);
		}
		""
	};
	Constructor(
		makeRealHTML(key,
			RealHTML2(url, wh, [FlowCallback(flowCallBack), PageHostcallSetter(getHostCall),
				OverridePageDomain(domain), UpdateCachedContent(true), OnPageLoaded(onLoaded), OnError(onError), ZoomEnabled(zoomEnabled)])
		),
		\ -> { subscribe(sendChannel, \m -> ^sendToJS(m)) }
	);
}

isCustomCacheSupported() {
	ios(); // Is supported only for iOS for now.
}
