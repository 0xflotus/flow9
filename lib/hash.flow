// Â© Copyright 2011 Area9 Innovation. All rights reserved
import runtime;
import string;

export {
	hashString(key : string) -> int;
	fastHashString(key : string) -> int;
	veryFastHashString(key : string, cutoff : int) -> int;
	fastHashStringRecursionFree(key : string) -> int;
}

// http://en.wikipedia.org/wiki/Fowler_Noll_Vo_hash
hashString(key) {
	hash = 0x811C9DC5;

	fold(string2utf8(key), hash, \acc, b -> {
		bitXor(acc, b) * 16777619;
	});
}

/*
import bits;

hashByte(k : int, b : int) -> int {
	bitXor(k, bitAnd(b, 0xff)) * 16777619;
}

hashInt(k : int, i : int) -> int {
	h1 = hashByte(k, i);
	h2 = hashByte(h1, bitUshr(i, 8));
	h3 = hashByte(h2, bitUshr(i, 16));
	hashByte(h3, bitUshr(i, 24));
}
*/

fastHashString(key : string) -> int {
	fastHashStringTailRecursion(key, strlen(key), strlen(key), 0x811C9DC5, 0, 0)
}

veryFastHashString(key : string, cutoff : int) -> int {
	fastHashStringTailRecursion(key, strlen(key), cutoff, 0x811C9DC5, 0, 0)
}

fastHashStringTailRecursion(key : string, len : int, cutoff : int, acc : int, ind : int, i : int) -> int {
	if (i == cutoff || i == len) {
		acc 
	} else {
		fastHashStringTailRecursion(
			key, len, cutoff, 
			bitXor(acc, getCharCodeAt(key, ind)) * 1677761,
			(ind + 1021) % len,
			i + 1
		)
	}
}

fastHashStringRecursionFree(key : string) -> int {
	len = strlen(key);
	hash0 = 0x811C9DC5;
	if (len == 0) hash0 else {
		ind0 = 0;
		hash1 = bitXor(hash0, getCharCodeAt(key, ind0)) * 1677761;
		if (len == 1) hash1 else {
			ind1  = (ind0 + 1021) % len;
			hash2 = bitXor(hash1, getCharCodeAt(key, ind1)) * 1677761;
			if (len == 2) hash2 else {
				ind2  = (ind1 + 1021) % len;
				hash3 = bitXor(hash2, getCharCodeAt(key, ind2)) * 1677761;
				if (len == 3) hash3 else {
					ind3  = (ind2 + 1021) % len;
					hash4 = bitXor(hash3, getCharCodeAt(key, ind3)) * 1677761;
					if (len == 4) hash4 else {
						ind4  = (ind3 + 1021) % len;
						hash5 = bitXor(hash4, getCharCodeAt(key, ind4)) * 1677761;
						//ind5  = (ind4 + 1021) % len;
						//hash5
						if (len == 5) hash5 else {
							ind5  = (ind4 + 1021) % len;
							hash6 = bitXor(hash5, getCharCodeAt(key, ind5)) * 1677761;
							//ind5  = (ind4 + 1021) % len;
							hash6
						}
					}
				}
			}
		}
	}
}
