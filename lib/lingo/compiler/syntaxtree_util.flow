import lingo/compiler/syntaxtree_types;
import string;

export {
	// Very effective tree compression: We keep just the rules of the given name.
	// The rest is collapsed away
	snatchSyntaxNodes(tree : SyntaxTree, rules : [int]) -> [SyntaxTree];

	// Extract the text for this node
	grabSTText(s : SyntaxTree, file : string) -> string;

	// Debug printing
	printSyntaxTree(st : SyntaxTree, s : string) -> void;

	printSyntaxTrees(a : [SyntaxTree], s : string) -> void;

}

snatchSyntaxNodes(tree : SyntaxTree, rules : [int]) -> [SyntaxTree] {
	children = mapConcat(concatA(tree.children), \c -> snatchSyntaxNodes(c, rules));
	if (contains(rules, tree.rule)) {
		[SyntaxTree(tree.rule, tree.choice, tree.start, tree.end, [children])]
	} else {
		children;
	}
}

grabSTChildren(s : SyntaxTree, rule : int) -> [SyntaxTree] {
	filter(concatA(s.children), \st -> st.rule == rule);
}

grabSTText(s : SyntaxTree, file : string) -> string {
	substring(file, s.start, s.end - s.start);
}


printSyntaxTree(st : SyntaxTree, s : string) -> void {
	doPrintSyntaxTree(st, s, 0);
}

doPrintSyntaxTree(st : SyntaxTree, s : string, indent : int) -> void {
	in = strLeft("                                                                                ", indent);
	t1 = substring(s, st.start, st.end - st.start);
	t2 = strReplace(t1, "\n", "\\n");
	println(in + i2s(st.rule) + "#" + i2s(st.choice) + ": '" + t2 + "'");
	iteri(st.children, \i, cs -> {
		println(in + i2s(i) + ":");
		iter(cs, \c -> {
			doPrintSyntaxTree(c, s, indent + 2);
		});
	});
}

printSyntaxTrees(a : [SyntaxTree], s : string) -> void {
	iter(a, \st -> printSyntaxTree(st, s))
}

