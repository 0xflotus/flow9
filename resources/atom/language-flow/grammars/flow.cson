fileTypes: [
  "flow"
]
foldingStartMarker: "/\\*\\*|\\{\\s*$"
foldingStopMarker: "\\*\\*/|^\\s*\\}"
name: "Flow"
patterns: [
  {
    include: "#comments"
  }
  {
    include: "#constants"
  }
  {
    match: "\\b(if|else|switch|default|native|import|forbid|export|unittest)\\b"
    name: "keyword.control.untitled"
  }
  {
    begin: "\""
    end: "\""
    name: "string.quoted.double.untitled"
    patterns: [
      {
        match: "\\%[^%]*(\\b(if|else|endif)\\b)[^%]*\\%"
        captures:
          "0":
            name: "constant.character.escape.untitled"
          "1":
            name: "keyword.control.untitled"
      }
      {
        match: "%([^%]*)%"
        name: "constant.character.escape.untitled"
      }
      {
        match: "\\\\."
        name: "constant.character.escape.untitled"
      }
    ]
  }
  {
    match: "(\\b(bool|double|int|void|string|io|ref|flow|mutable)\\b)|\\?|\\{|\\}"
    name: "storage.type.flow"
  }
  {
    match: "\\+|\\*|\\-|\\!|\\%|\\:|/|\\:=|==|=|\\'|\\\\|!=|<=|>=|<|>|&&|\\|\\||\\:\\:=|\\|>|->|\\.|\\^"
    name: "keyword.operator.flow"
  }
  {
    match: ";|\\[|\\]|\\{|\\}"
    name: "keyword.control.untitled"
  }
  {
    match: "^(\\w+\\W*)\\s*(\\(|=)"
    captures:
      "1":
        name: "support.class.js"
  }
]
repository:
  comments:
    patterns: [
      {
        captures:
          "0":
            name: "punctuation.definition.comment.flow"
        match: "/\\*\\*/"
        name: "comment.block.empty.flow"
      }
      {
        include: "#comments-inline"
      }
    ]
  "comments-inline":
    patterns: [
      {
        begin: "/\\*"
        captures:
          "0":
            name: "punctuation.definition.comment.flow"
        end: "\\*/"
        name: "comment.block.flow"
      }
      {
        captures:
          "1":
            name: "comment.line.double-slash.flow"
          "2":
            name: "punctuation.definition.comment.flow"
        match: "\\s*((//).*$\\n?)"
      }
    ]
  constants:
    patterns: [
      {
        match: "\\b(true|false)\\b"
        name: "constant.language.flow"
      }
      {
        match: "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b"
        name: "constant.numeric.flow"
      }
    ]
scopeName: "source.flow"
