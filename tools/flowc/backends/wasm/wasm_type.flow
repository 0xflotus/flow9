export {
    	/* 
    WasmTypeDescriptor adapts FiType for wasm use - both in compiler and at runtime. 

	At runtime, we need to have information about the memory layout of unboxed
	values. This is need to be able to do deep comparison, implement toString/toBinary,
	makeStructValue, cast to/from flow, and similar dynamic operations.
	*/
	WasmTypeDescriptor ::= WasmTypeVoid, WasmTypeBool, WasmTypeInt, WasmTypeDouble,
		WasmTypeString, WasmTypeFlow, WasmTypeNative,  
		WasmTypeArray, WasmTypeRef, WasmTypeStruct, WasmTypeUnion,
		WasmTypeFunction, WasmTypeJSCallback;

	WasmTypeVoid();
	WasmTypeBool();
	WasmTypeInt();
	WasmTypeDouble();
	WasmTypeString();
	WasmTypeArray(type : WasmTypeDescriptor);
	WasmTypeFlow();
	WasmTypeStruct(name : string, fields : [WasmStructField]);
		// TODO: We probably do not need a name here, but for now, that is simplest
		WasmStructField(name : string, type : WasmTypeDescriptor);
	WasmTypeUnion(name : string, structs : [string]);
	WasmTypeRef(type : WasmTypeDescriptor);
	WasmTypeNative();
	// TODO: Closure?
	WasmTypeFunction(args : [WasmFunArg], returnType : WasmTypeDescriptor);
			WasmFunArg(name : string, type : WasmTypeDescriptor);

	// this is callback we get FROM js
	WasmTypeJSCallback(args : [WasmFunArg], returnType : WasmTypeDescriptor);
}