export {
	// https://webassembly.github.io/spec/core/binary/instructions.html
	// https://github.com/sunfishcode/wasm-reference-manual/blob/master/WebAssembly.md#instructions

	// Control instructions
	native wasm_unreachable : () -> void = wasm.unreachable;
	native wasm_nop : () -> void = wasm.nop;
	// block:   0x02  rt:blocktype  (in:instr)∗   block rt in* end
	// loop:    0x03  rt:blocktype  (in:instr)∗   loop rt in* end
	// if:      0x04  rt:blocktype  (in:instr)∗   if rt in* (else in*) end
	// br:      0x0C  l:labelidx
	// br_if    0x0D  l:labelidx
	// br_table 0x0E  l∗:vec(labelidx)  lN:labelidx
	native wasm_return : () -> void = wasm.return;
	// call           0x10  x:funcidx
	// call_indirect  0x11  x:typeidx

	// Stack manipulation - Parametric instructions
	native wasm_drop : () -> void = wasm.drop;
	native wasm_select : () -> void = wasm.select; // ($T[1], $T[1], $condition: i32) : ($T[1])

	// Variable instructions
	native wasm_get_local : (local : int) -> void = wasm.get_local;
	native wasm_set_local : (local : int) -> void = wasm.set_local;
	native wasm_tee_local : (local : int) -> void = wasm.tee_local;
	native wasm_get_global : (global : int) -> void = wasm.get_global;
	native wasm_set_global : (global : int) -> void = wasm.set_global;

	// Constant instructions
	native wasm_i32_const : (constant : int) -> void = wasm.i32.const;
	native wasm_i64_const : (low32 : int, high32 : int) -> void = wasm.i64.const;
	native wasm_f32_const : (value : double) -> void = wasm.f32.const;
	native wasm_f64_const : (value : double) -> void = wasm.f64.const;


	// Memory instructions - TODO

	// There are direct loads, and there are extending loads

	native wasm_i32_load8_s: (address: int) -> int = wasm.i32.load8_s;
	native wasm_i32_load8_u: (address: int) -> int = wasm.i32.load8_u;
	native wasm_i32_load16_s: (address: int) -> int = wasm.i32.load16_s;
	native wasm_i32_load16_u: (address: int) -> int = wasm.i32.load16_u;
	native wasm_i32_load: (address: int) -> int = wasm.i32.load;
	native wasm_f32_load: (address: int) -> double = wasm.f32.load;
	native wasm_f64_load: (address: int) -> double = wasm.f64.load;

	// Also, there are direct stores, and "wrapping" stores

	native wasm_i32_store8: (address: int, value: int) -> void = wasm.i32.store8;
	native wasm_i32_store16: (address: int, value: int) -> void = wasm.i32.store16;
	native wasm_i32_store: (address: int, value: int) -> void = wasm.i32.store;
	native wasm_f32_store: (address: int, value: double) -> void = wasm.f32.store;
	native wasm_f64_store: (address: int, value: double) -> void = wasm.f64.store;

	// Memory

	// Grow this number of pages. Returns previous number of pages
	native wasm_memory_grow : (delta : int) -> int = wasm.memory.grow;
	// How big is the memory in number of pages? A page is 64 kb
	native wasm_memory_size : () -> int = wasm.memory.size;


	// Integer Arithmetic
	native wasm_i32_and:(val1 : int, val2 : int) -> int = wasm.i32.and;
	native wasm_i32_or:(val1 : int, val2 : int) -> int = wasm.i32.or;
	native wasm_i32_xor:(val1 : int, val2 : int) -> int = wasm.i32.xor;
	native wasm_i32_shl:(val1 : int, val2 : int) -> int = wasm.i32.shl;
	native wasm_i32_shr_s:(val1 : int, val2 : int) -> int = wasm.i32.shr_s;
	native wasm_i32_shr_u:(val1 : int, val2 : int) -> int = wasm.i32.shr_u;
	native wasm_i32_rotl:(val1 : int, val2 : int) -> int = wasm.i32.rotl;
	native wasm_i32_rotr:(val1 : int, val2 : int) -> int = wasm.i32.rotr;
	// Count Leading Zeros
	native wasm_i32_clz:(val1 : int, val2 : int) -> int = wasm.i32.clz;

	// Count Trailing Zeros
	native wasm_i32_ctz:(val1 : int, val2 : int) -> int = wasm.i32.ctz;

	// Population Count
	native wasm_i32_popcnt:(val1 : int, val2 : int) -> int = wasm.i32.popcnt;

	// Conversions - '/' is replaced by '__'
	native wasm_f64_convert_s_i32:(val : int) -> double = wasm.f64.convert_s__i32;
	
	native wasm_call_indirect1 : (?, int, int) -> void = wasm_compiler.call_indirect;
	native wasm_call_indirect1ret : (?, int, int) -> ?? = wasm_compiler.call_indirect;
	native wasm_call_indirect2 : (?, ??, int, int) -> void = wasm_compiler.call_indirect;
	native wasm_call_indirect2ret : (?, ??, int, int) -> ??? = wasm_compiler.call_indirect;
	native wasm_call_indirect3ret : (?, ??, ???, int, int) -> ???? = wasm_compiler.call_indirect;
}



// Add
// i32.add
// i64.add

// Subtract
// i32.sub
// i64.sub

// Multiply
// i32.mul
// i64.mul

// Divide, Signed
// i32.div_s
// i64.div_s

// Divide, Unsigned
// i32.div_u
// i64.div_u

// Remainder, Signed
// i32.rem_s
// i64.rem_s

// Remainder, Unsigned
// i32.rem_u
// i64.rem_u

// i64.and

// Bitwise Or
// i64.or

// Bitwise Exclusive-Or
// i64.xor

// Shift Left
// i32.shl
// i64.shl

// Shift Right, Signed
// i64.shr_s

// Shift Right, Unsigned
// i64.shr_u

// Rotate Left
// i64.rotl

// Rotate Right
// i64.rotr

// Count Leading Zeros
// i64.clz

// Count Trailing Zeros
// i64.ctz

// Population Count
// i64.popcnt

// Equal To Zero
// i64.eqz



// Floating-Point instructions

// Add
// f32.add
// f64.add

// Subtract
// f32.sub
// f64.sub

// Multiply
// f32.mul
// f64.mul

// Divide
// f32.div
// f64.div

// Square Root
// f32.sqrt
// f64.sqrt

// Minimum
// f32.min
// f64.min

// Maximum
// f32.max
// f64.max

// Ceiling
// f32.ceil
// f64.ceil

// Floor - round to infinite minus
// f32.floor
// f64.floor

// Truncate - round towards 0
// f32.trunc
// f64.trunc

// Round To Nearest Integer
// f32.nearest
// f64.nearest

// Absolute Value
// f32.abs
// f64.abs

// Negate
// f32.neg
// f64.neg

// CopySign
// f32.copysign
// f64.copysign


// Integer Comparison Instructions
// (i32|i64)*(eq, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u)

// Floating-Point Comparison Instructions
// (f32|f64)*(eq, ne, lt, le, gt, ge)

// Conversion Instructions
// i32.wrap/i64
// i64.extend_s/i32
// i64.extend_u/i32
// i32.trunc_s/f32
// i32.trunc_s/f64
// i64.trunc_s/f32
// i64.trunc_s/f64
// i32.trunc_u/f32
// i32.trunc_u/f64
// i64.trunc_u/f32
// i64.trunc_u/f64
// f32.demote/f64
// f64.promote/f32

// f32.convert_s/i32
// f32.convert_s/i64
// f64.convert_s/i32
// f64.convert_s/i64

// f32.convert_u/i32
// f32.convert_u/i64
// f64.convert_u/i32
// f64.convert_u/i64

// i32.reinterpret/f32
// i64.reinterpret/f64
// f32.reinterpret/i32	
// f64.reinterpret/i64

