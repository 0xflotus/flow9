Behaviour<?> ::= ConstBehaviour<?>, DynamicBehaviour<?>;
DynamicBehaviour(value : ref ?);
ConstBehaviour : (constv : ?);

make : (?) -> DynamicBehaviour<?>;

make(value) {
	DynamicBehaviour(ref value);
}

next(b : DynamicBehaviour<?>, value : ?) -> void {}

subscribe2(b : Behaviour<?>, fb: (?) -> void) -> () -> void {
	\ -> {}
}

TextInputState ::= TextSize, Selection;

TextSize(width : double, height : double);
Selection(start : int, end : int);

TTextInput() -> void {
	stateChange = make([]);
	selectionB = make(Selection(1, 1)); 

	getSmartTextSize : () -> TextSize = \ -> {
		if (true) {
			TextSize(0.0, 0.0)
		} else {
			TextSize(1.0, 0.0)
		}
	};

	next(stateChange, [getSmartTextSize()]);
	subscribe2(selectionB, \selection : Selection -> {
		next(stateChange, [selection]);
	});		
	{}
}
