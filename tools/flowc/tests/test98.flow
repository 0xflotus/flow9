import form/form;
import rendersupport;

ClipCapabilities(move : bool, filters : bool, interactive : bool, scale : bool, alpha : bool);

RenderResult(
	clips : [native],
	widthHeight : Behaviour<WidthHeight>,
	baseline : Behaviour<double>,
	pending : Behaviour<int>,
	disposers :[() -> void],
	capabilities : ClipCapabilities
);

allClipCapabilities = ClipCapabilities(true, true, true, true, true);

zeroSize = const(zeroWH);

emptyRenderResult = RenderResult([], zeroSize, const(0.0), const(0), [], allClipCapabilities);

optimizeAndRenderForm(parent : native, form : Form, available : Behaviour<WidthHeight>, zorder : [int], tabOrder: [int]) -> RenderResult {
	emptyRenderResult
}

// Render a form with the given space available
renderForm(rform : Form, available : Behaviour<WidthHeight>, zorder : [int], tabOrder: [int]) -> RenderResult {
	res = switch (rform : Form) {
	default: emptyRenderResult;
	Camera(filename, parameters, listeners, controls): {
		vidWidth = ref 1;
		vidHeight = ref 1;
		pending = make(1);
		widthHeight = make(WidthHeight(i2d(^vidWidth), i2d(^vidHeight)));

		video = ref [];
		disposers2 = map(controls, \c -> switch (c: RecordControl) {
			Recording(status): {
				0;
			}
		});

		RenderResult([^video[1]], widthHeight, const(i2d(^vidHeight)), pending, [\ -> {
		}], ClipCapabilities(true, false, false, false, false));
	}
	Mutable2(behaviour, stack): {
		widthHeight = make(zeroWH);
		baseline = make(0.0);
		clip = makeClip();
		pending = make(0);
		dodisplay = \form -> {
			{
				result = optimizeAndRenderForm(clip, form, available, zorder, tabOrder);

				g = getGraphics(clip);
				setLineStyle(g, 1.0, floor(random() * i2d(0xffffff)), 1.0);
				moveTo(g, 0.0, 0.0);
				lineTo(g, getValue(result.widthHeight).width, getValue(result.widthHeight).height);
				endFill(g);
			}
		};
		RenderResult([clip], widthHeight, baseline, pending, [\ -> {
		}], allClipCapabilities);
	}
	TextInput(state, listeners, stateaccess): {
		fontFamily = {
			style = fold(state, [], \acc, s ->
				switch (s : TextInputState) {
					Content(c, style): style;
					default: acc;
				}
			);
			getFontFamily(style)
		};

		widthHeight = make(WidthHeight(0.0, 0.0));

		baseline = const(0.0); // Not accurate, but we can not ask for this from text inputs

		RenderResult([], widthHeight, baseline, const(0), [], ClipCapabilities(true, false, true, false, false));
	}
	}

	res;
}

getFontFamily(style : [CharacterStyle]) -> string {
	"";
}