Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

FcType ::= FcTypeStruct, FcTypeFunction;

FcTypeStruct(name : string, typars : [FcType], args : [FcStructArg], info : int);

	FcStructArg(name : string, type : FcType);
FcTypeFunction(args : [FcType]);

look() -> Maybe<FcTypeStruct> {
	None();
}

foo(ci, n : string) {
	mstructdef : Maybe<FcTypeStruct> = look();
	switch (mstructdef) {
		None(): {
			FcTypeStruct(n, [], [], ci);
		}
		Some(structdef): {
			// Check the arguments
			structdef.args;
			if (false) {
				structdef;
			} else {
				// Instantiate the typars in the type
				itype = instantiateTypeTyPars(structdef);
				istructdef : FcTypeStruct = switch (itype : FcType) {
					//FcTypeStruct(__, __, __, __): itype;
					default: structdef;
				}
				FcTypeStruct(n, istructdef.typars, [], ci);
			}
		}
	}
}

instantiateTypeTyPars(s : FcType) -> FcType {
	s;
}
