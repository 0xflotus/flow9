Behaviour ::= ConstBehaviour, DynamicBehaviour;

// The runtime representation of a behaviour
DynamicBehaviour();
ConstBehaviour();

nextDistinct(d : DynamicBehaviour) -> void {
}

Disposable(value : ?);

// a = debugtyping;
distinctUntilChangedu() -> Disposable<Behaviour> {
	provider = DynamicBehaviour();
	nextDistinct(provider);
	Disposable(provider)
}
