//import tools/flowc/fcexp;

native length : ([?]) -> int = Native.length;

Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

FcType ::= FcTypeStruct, FcTypeFunction, FcTypeVoid;

FcTypeVoid();
FcTypeStruct(args : [FcStructArg]);
	FcStructArg();
FcTypeFunction(args : [FcFunctionArg]);
	FcFunctionArg();

foo(mstructdef : Maybe<FcTypeStruct>, es) {
	switch (mstructdef) {
		None(): {
			FcTypeStruct([]);
		}
		Some(structdef): {
			if (length(structdef.args) != length(es)) {
				structdef;
			} else {
				// Instantiate the typars in the type
				itype = instantiateTypeTyPars(structdef);
				istructdef = cast(itype : FcType -> FcTypeStruct);
				argtypes = [];
				FcTypeStruct(argtypes);
			}
		}
	}
}

instantiateTypeTyPars(t : FcType) -> FcType {
	t;
}
