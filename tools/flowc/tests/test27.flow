	Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

native lookupTree : (tree : Tree<?, ??>, key : ?) -> Maybe<??> = Native.fast_lookupTree;

Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
	TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
	TreeEmpty : ();


native length : ([?]) -> int = Native.length;

findi : (a : [?], fn : (?) -> bool) -> Maybe<int>;

findiex(a, fn, i) { //findi'
	if (i >= length(a)) None()
	else if (fn(a[i])) Some(i)
	else findiex(a, fn, i + 1);
}

findi(a, fn) {
	findiex(a, fn, 0)
}

substituteConditions(lines : [string], key2value : Tree<string, string>) -> string {
	ifLineNumberM = findi(lines, \line -> false);
	switch (ifLineNumberM) {
		Some(ifLineNumber): {
			valueM = lookupTree(key2value, "");
			switch (valueM) {
				Some(value): "";
				None(): "";
			}
		}
		None(): "";
	}
}

