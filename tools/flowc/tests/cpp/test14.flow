import tools/flowc/flow_parser;

d2i(d) { cast(d : double -> int); }

printError(e : ExpectError) {
	q = \ss -> "\"" + ss + "\"";
	s = "ExpectError("
		+ q(e.met) + ", ["
		+ strGlue2(map(list2array(e.expected), q), ",")
		+ "], "
		+ i2s(e.pos)
		+ ")";
	println(s);	
}

strGlue2(arr: [string], sep: string) {
	if (arr == []) ""
	else if (length(arr) == 1) arr[0]
	else arr[0] + sep + strGlue2(tail(arr), sep);
}

countNodes(st : SyntaxTree) -> int {
	fold(st.children, 1, \acc, arr -> {
		fold(arr, acc, \acc2, st2 -> {
			acc2 + countNodes(st2)
		})
	})
}

testIt() {
	g = "#include lib/renderform.flow";
	t1 = timestamp();
	res = parse_flow(g);
	t2 = timestamp();
	printError(res.second);
	println("SyntaxTree contains " + i2s(countNodes(res.first)) + " nodes");
	println("t = " + i2s(d2i(t2 - t1)) + " ms");
}


main() {
	testIt();
	testIt();
	testIt();
	// quit(0);
}
