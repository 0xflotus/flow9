// testing refs, mutables and structs comparison

import runtime;

check(ok : bool) {
	println(if (ok) "OK!" else "FAILURE!!!");
}

test1() {
	a = ref "1";
	// println(^a);
	b = a;
	b := "2";
	// println(^a);
	// println(^b);
	c = (^a) + (^b);
	check(c == "22");
}

MyStruct(i : ref int, mutable j : int);

MyStruct_setJ(s : MyStruct, v : int) -> MyStruct {
	s.j ::= v;
	s
}

test2() {
	a = ref 0;
	s = MyStruct(a, 0);
	v1 = ^(s.i); // 0
	a := 1;
	v2 = ^(s.i); // 1
	s.i := 2;
	v3 = ^a; // 2
	v4 = s.j; // 0
	s.j ::= 1;
	v5 = s.j; // 1
	check(v1 == 0 && v2 == 1 && v3 == 2 && v4 == 0 && v5 == 1);
	s2 = MyStruct(s.i, s.j);
	check((s == s2) && !(s != s2));
}

// testing switch
test3() {
	s = MyStruct(ref 0, 0);
	x : Maybe = Some(s);
	f = \ss : Some<MyStruct> -> { ss.value };
	switch (x) {
		None(): s;
		Some(ss): {
			ss.j ::= 1;
			// testing that x is downcasted: Maybe -> Some
			check(x.value == s);
			check(f(x) == s);
			ss;
		}
	};
	ff = \ss -> {
		m : Maybe<MyStruct> = Some(ss);
		m
	};
	switch (ff(s)) {
		None(): {}
		Some(ss): {
			check(ss == s);
		}
	}
	{}
}

test4() {
	s = MyStruct(ref 0, 0);
	MyStruct_setJ(s, 1);
	check(s.j == 1);
	MyStruct_setJ(MyStruct_setJ(s, 2), 2);
	check(s.j == 2);
}

// testing cast from None()

MyStruct5(v : ref Maybe<MyStruct51>);
MyStruct51();

test5() {
	s = MyStruct5(ref None());
	check(isNone(^(s.v)));
}

// testing idfn()

test6() {
	a = [1,2,3];
	check(map(a, idfn) == a);
	check(forall(map(a, \x -> (x >= 1) && (x <= 3)), idfn));
}

main() {
	test1();
	test2();
	test3();
	test4();
	test5();
	test6();
}