// this test makes intensive calculations with md5() and measures performance

import ds/array;

native println : io (string) -> void = Native.println;
i2s(i) { cast(i : int -> string); }
d2i(d) { cast(d : double -> int); }

check(ok : bool) {
	println(if (ok) "OK!" else "FAILURE!!!");
}

native timestamp : io () -> double = Native.timestamp;

// 32 bit operations
native bitNot : (int) -> int = Native.bitNot;
native bitAnd : (int, int) -> int = Native.bitAnd;
native bitOr : (int, int) -> int = Native.bitOr;
native bitXor : (int, int) -> int = Native.bitXor;

native bitShl : (a : int, n : int) -> int = Native.bitShl;
native bitUshr : (a : int, n : int) -> int = Native.bitUshr;
	
// Convert a string to an array of character codes in UCS-2 format
native s2a : (string) -> [int] = Native.s2a;


// A simple loop from start to end, including end.
fori : (start : int, end : int, fn : (i : int) -> void) -> void;
	
fori(start, end, fn) {
	if (start <= end) {
		fn(start);
		fori(start + 1, end, fn);
	}
}
// A simple loop from start to end, not including end, and collect all products to a nice little array
generate : (start : int, end : int, fn : (i : int) -> ?) -> [?];
	
generate(start, end, fn) {
	if (start >= end) []
	else map(enumFromTo(start, end-1), fn);
}
	
str2blks( str : string, convert16to8 : bool ) -> [[int]] {
	bytes = s2a(str);
	
	l = length(bytes);
	
	bits = l * 8;
	
	getByte = \i -> {
		if (i < l) {
			bytes[i];
		} else if (i == l) {
			0x80;
		} else {
			0;
		}
	}
	
	nblk = ((l + 8) / 64) + 1;
	
	blks = generate(0, nblk, \b -> {
		generate(0, 16, \i -> {
			r = if (b == nblk - 1 && i == 14) {
				bits;
			} else {
				index = 4 * i + b * 64;
				bitOr(bitOr(bitOr(getByte(index), bitShl(getByte(index + 1), 8)), bitShl(getByte(index + 2), 16)), bitShl(getByte(index + 3), 24));
			}
			r;
		});
	});

	blks;
}

rhex(a) {
	nibble = \n -> {
		if (n < 10) {
			i2s(n);
		} else {
			[ "a", "b", "c", "d", "e", "f" ] [ n - 10];
		}
	}
	byte = \d -> {
		nibble(d / 16) + nibble(d % 16);
	}
	byte(bitAnd(a, 0xff)) + byte(bitAnd(bitUshr(a, 8), 0xff)) + byte(bitAnd(bitUshr(a, 16), 0xff)) + byte(bitAnd(bitUshr(a, 24), 0xff));
}

bitRol(a, b) {
	bitOr(bitShl(a, b), bitUshr(a, 32 - b));
}

md5cmn(q, a, b, x, s, t){
	bitRol(a + q + x + t, s) + b;
}

md5ff(a : int, b : int, c : int, d : int, x, s, t){
	md5cmn(bitOr(bitAnd(b, c), bitAnd(bitNot(b), d)), a, b, x, s, t);
}

md5gg(a : int, b : int, c : int, d : int, x, s, t){
	md5cmn(bitOr(bitAnd(b, d), bitAnd(c, bitNot(d))), a, b, x, s, t);
}

md5hh(a : int, b : int, c : int, d : int, x, s, t){
	md5cmn(bitXor(bitXor(b, c), d), a, b, x, s, t);
}

md5ii(a : int, b : int, c : int, d : int, x, s, t){
	md5cmn(bitXor(c, bitOr(b, bitNot(d))), a, b, x, s, t);
}

md5(s)
	md5encodingControl(s, true);
	
aaa = ref 0x67452301;
bbb = ref 0xefcdab89;
ccc = ref 0x98BADCFE;
ddd = ref 0x10325476;
	

md5encodingControl( str : string, convert16to8 : bool) -> string {
	blocks = str2blks(str, convert16to8);

	// a = ref 0x67452301;
	// b = ref 0xefcdab89;
	// c = ref 0x98BADCFE;
	// d = ref 0x10325476;
	aaa := 0x67452301;
	bbb := 0xefcdab89;
	ccc := 0x98BADCFE;
	ddd := 0x10325476;
	
	iteri(blocks, \bn, x -> {
		olda = ^aaa;
		oldb = ^bbb;
		oldc = ^ccc;
		oldd = ^ddd;
		
		aaa := md5ff(^aaa, ^bbb, ^ccc, ^ddd, x[0], 7 , -680876936);
		ddd := md5ff(^ddd, ^aaa, ^bbb, ^ccc, x[1], 12, -389564586);
		ccc := md5ff(^ccc, ^ddd, ^aaa, ^bbb, x[2], 17,  606105819);
		bbb := md5ff(^bbb, ^ccc, ^ddd, ^aaa, x[3], 22, -1044525330);
		aaa := md5ff(^aaa, ^bbb, ^ccc, ^ddd, x[4], 7 , -176418897);
		ddd := md5ff(^ddd, ^aaa, ^bbb, ^ccc, x[5], 12,  1200080426);
		ccc := md5ff(^ccc, ^ddd, ^aaa, ^bbb, x[6], 17, -1473231341);
		bbb := md5ff(^bbb, ^ccc, ^ddd, ^aaa, x[7], 22, -45705983);
		aaa := md5ff(^aaa, ^bbb, ^ccc, ^ddd, x[8], 7 ,  1770035416);
		ddd := md5ff(^ddd, ^aaa, ^bbb, ^ccc, x[9], 12, -1958414417);
		ccc := md5ff(^ccc, ^ddd, ^aaa, ^bbb, x[10], 17, -42063);
		bbb := md5ff(^bbb, ^ccc, ^ddd, ^aaa, x[11], 22, -1990404162);
		aaa := md5ff(^aaa, ^bbb, ^ccc, ^ddd, x[12], 7 ,  1804603682);
		ddd := md5ff(^ddd, ^aaa, ^bbb, ^ccc, x[13], 12, -40341101);
		ccc := md5ff(^ccc, ^ddd, ^aaa, ^bbb, x[14], 17, -1502002290);
		bbb := md5ff(^bbb, ^ccc, ^ddd, ^aaa, x[15], 22,  1236535329);
		aaa := md5gg(^aaa, ^bbb, ^ccc, ^ddd, x[1], 5 , -165796510);
		ddd := md5gg(^ddd, ^aaa, ^bbb, ^ccc, x[6], 9 , -1069501632);
		ccc := md5gg(^ccc, ^ddd, ^aaa, ^bbb, x[11], 14,  643717713);
		bbb := md5gg(^bbb, ^ccc, ^ddd, ^aaa, x[0], 20, -373897302);
		aaa := md5gg(^aaa, ^bbb, ^ccc, ^ddd, x[5], 5 , -701558691);
		ddd := md5gg(^ddd, ^aaa, ^bbb, ^ccc, x[10], 9 ,  38016083);
		ccc := md5gg(^ccc, ^ddd, ^aaa, ^bbb, x[15], 14, -660478335);
		bbb := md5gg(^bbb, ^ccc, ^ddd, ^aaa, x[4], 20, -405537848);
		aaa := md5gg(^aaa, ^bbb, ^ccc, ^ddd, x[9], 5 ,  568446438);
		ddd := md5gg(^ddd, ^aaa, ^bbb, ^ccc, x[14], 9 , -1019803690);
		ccc := md5gg(^ccc, ^ddd, ^aaa, ^bbb, x[3], 14, -187363961);
		bbb := md5gg(^bbb, ^ccc, ^ddd, ^aaa, x[8], 20,  1163531501);
		aaa := md5gg(^aaa, ^bbb, ^ccc, ^ddd, x[13], 5 , -1444681467);
		ddd := md5gg(^ddd, ^aaa, ^bbb, ^ccc, x[2], 9 , -51403784);
		ccc := md5gg(^ccc, ^ddd, ^aaa, ^bbb, x[7], 14,  1735328473);
		bbb := md5gg(^bbb, ^ccc, ^ddd, ^aaa, x[12], 20, -1926607734);
		aaa := md5hh(^aaa, ^bbb, ^ccc, ^ddd, x[5], 4 , -378558);
		ddd := md5hh(^ddd, ^aaa, ^bbb, ^ccc, x[8], 11, -2022574463);
		ccc := md5hh(^ccc, ^ddd, ^aaa, ^bbb, x[11], 16,  1839030562);
		bbb := md5hh(^bbb, ^ccc, ^ddd, ^aaa, x[14], 23, -35309556);
		aaa := md5hh(^aaa, ^bbb, ^ccc, ^ddd, x[1], 4 , -1530992060);
		ddd := md5hh(^ddd, ^aaa, ^bbb, ^ccc, x[4], 11,  1272893353);
		ccc := md5hh(^ccc, ^ddd, ^aaa, ^bbb, x[7], 16, -155497632);
		bbb := md5hh(^bbb, ^ccc, ^ddd, ^aaa, x[10], 23, -1094730640);
		aaa := md5hh(^aaa, ^bbb, ^ccc, ^ddd, x[13], 4 ,  681279174);
		ddd := md5hh(^ddd, ^aaa, ^bbb, ^ccc, x[0], 11, -358537222);
		ccc := md5hh(^ccc, ^ddd, ^aaa, ^bbb, x[3], 16, -722521979);
		bbb := md5hh(^bbb, ^ccc, ^ddd, ^aaa, x[6], 23,  76029189);
		aaa := md5hh(^aaa, ^bbb, ^ccc, ^ddd, x[9], 4 , -640364487);
		ddd := md5hh(^ddd, ^aaa, ^bbb, ^ccc, x[12], 11, -421815835);
		ccc := md5hh(^ccc, ^ddd, ^aaa, ^bbb, x[15], 16,  530742520);
		bbb := md5hh(^bbb, ^ccc, ^ddd, ^aaa, x[2], 23, -995338651);
		aaa := md5ii(^aaa, ^bbb, ^ccc, ^ddd, x[0], 6 , -198630844);
		ddd := md5ii(^ddd, ^aaa, ^bbb, ^ccc, x[7], 10,  1126891415);
		ccc := md5ii(^ccc, ^ddd, ^aaa, ^bbb, x[14], 15, -1416354905);
		bbb := md5ii(^bbb, ^ccc, ^ddd, ^aaa, x[5], 21, -57434055);
		aaa := md5ii(^aaa, ^bbb, ^ccc, ^ddd, x[12], 6 ,  1700485571);
		ddd := md5ii(^ddd, ^aaa, ^bbb, ^ccc, x[3], 10, -1894986606);
		ccc := md5ii(^ccc, ^ddd, ^aaa, ^bbb, x[10], 15, -1051523);
		bbb := md5ii(^bbb, ^ccc, ^ddd, ^aaa, x[1], 21, -2054922799);
		aaa := md5ii(^aaa, ^bbb, ^ccc, ^ddd, x[8], 6 ,  1873313359);
		ddd := md5ii(^ddd, ^aaa, ^bbb, ^ccc, x[15], 10, -30611744);
		ccc := md5ii(^ccc, ^ddd, ^aaa, ^bbb, x[6], 15, -1560198380);
		bbb := md5ii(^bbb, ^ccc, ^ddd, ^aaa, x[13], 21,  1309151649);
		aaa := md5ii(^aaa, ^bbb, ^ccc, ^ddd, x[4], 6 , -145523070);
		ddd := md5ii(^ddd, ^aaa, ^bbb, ^ccc, x[11], 10, -1120210379);
		ccc := md5ii(^ccc, ^ddd, ^aaa, ^bbb, x[2], 15,  718787259);
		bbb := md5ii(^bbb, ^ccc, ^ddd, ^aaa, x[9], 21, -343485551);

		aaa := ^aaa + olda;
		bbb := ^bbb + oldb;
		ccc := ^ccc + oldc;
		ddd := ^ddd + oldd;
	});
	rhex(^aaa) + rhex(^bbb) + rhex(^ccc) + rhex(^ddd);
}

findMin(n : int) -> string {
	a = enumFromTo(0, n);
	fold(a, md5("0"), \acc, i -> {
		x = md5(i2s(i));
		if (x < acc) x else acc
	})
}

measurePerformance() {
	t1 = timestamp();
	x = findMin(100*1000);
	t2 = timestamp();
	println("t = " + i2s(d2i(t2 - t1)) + " ms");
	println(x);
	check(x == "00003e3b9e5336685200ae85d21b4f5e");
}

main() {
	check(md5("123") == "202cb962ac59075b964b07152d234b70");
	check(md5(md5("123") + md5("456")) == "79e3c0c96e5d7ccac5763c4f49bfb98d");
	check(findMin(1000) == "00411460f7c92d2124a67ea0f4cb5f85");
	// measurePerformance();
}
