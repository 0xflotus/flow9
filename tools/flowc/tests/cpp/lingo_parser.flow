import string;
import lingo/compiler/syntaxtree_types;
export {
	parse_grammar(t : string) -> Pair<SyntaxTree, ExpectError>;
}

parse_grammar(t : string) -> Pair<SyntaxTree, ExpectError> {
	acc = SyntaxParseAcc(t, strlen(t), 0, [ref makeTree()], noExpectError);
	r = do_parse_grammar_grammar(acc);
	Pair(r, acc.expect);
}
do_parse_grammar_grammar(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_grammar_ws(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_grammar_production);
		SyntaxTree("grammar", 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_grammar_production(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_grammar_name(acc);
	if (c0.choice != -1) {
		c1 = do_parse_grammar_production__choice34(acc);
		if (c1.choice != -1) {
			SyntaxTree("production", 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_grammar_name(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_grammar_nameNoWs(acc);
	if (c0.choice != -1) {
		c1 = do_parse_grammar_ws(acc);
		if (c1.choice != -1) {
			SyntaxTree("name", 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_grammar_nameNoWs(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_grammar_letter(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_grammar_letterOrDigit);
		SyntaxTree("nameNoWs", 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_grammar_choices(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_grammar_choice(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_grammar_choices__auto40);
		SyntaxTree("choices", 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_grammar_choice(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_grammar_term2);
	SyntaxTree("choice", 0, i, acc.i, [c0]);
}

do_parse_grammar_term(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_grammar_seq2(acc);
		if (c0.choice != -1) {
			c1 = SyntaxPlus(acc, do_parse_grammar_term__auto41);
			if (length(c1) >= 1) {
				SyntaxTree("term", 0, i, acc.i, [[c0], c1]);
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_grammar_term2(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree("Expected term", -1, i, i, [])
		}
		
	}
	
}

do_parse_grammar_seq2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = SyntaxPlus(acc, do_parse_grammar_term2);
		if (length(c0) >= 1) {
			SyntaxTree("seq2", 0, i, acc.i, [c0]);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_grammar_term2(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree("Expected seq2", -1, i, i, [])
		}
		
	}
	
}

do_parse_grammar_term2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_grammar_term1(acc);
	if (c0.choice != -1) {
		c1 = do_parse_grammar_term2__choice36(acc);
		if (c1.choice != -1) {
			SyntaxTree("term2", 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_grammar_term1(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 33 /* ! */) {
			acc.i ::= acc.i + 1;
			c1 = do_parse_grammar_ws(acc);
			if (c1.choice != -1) {
				c2 = do_parse_grammar_term0(acc);
				if (c2.choice != -1) {
					SyntaxTree("term1", 0, i, acc.i, [[c1], [c2]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_grammar_quotedchar(acc);
			if (c0.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
					acc.i ::= acc.i + 1;
					c2 = do_parse_grammar_ws(acc);
					if (c2.choice != -1) {
						c3 = do_parse_grammar_quotedchar(acc);
						if (c3.choice != -1) {
							SyntaxTree("term1", 1, i, acc.i, [[c0], [c2], [c3]]);
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_grammar_term0(acc);
				if (c0.choice != -1) {
					c1 = do_parse_grammar_term1__choice39(acc);
					if (c1.choice != -1) {
						SyntaxTree("term1", 2, i, acc.i, [[c0], [c1]]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 126 /* ~ */) {
						acc.i ::= acc.i + 1;
						c1 = do_parse_grammar_ws(acc);
						if (c1.choice != -1) {
							c2 = do_parse_grammar_term0(acc);
							if (c2.choice != -1) {
								SyntaxTree("term1", 3, i, acc.i, [[c1], [c2]]);
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_grammar_term0(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						SyntaxTree("Expected term1", -1, i, i, [])
					}
					
				}
				
			}
			
		}
		
	}
	
}

do_parse_grammar_term0(acc : SyntaxParseAcc) -> SyntaxTree {
	cache = (acc.caches)[0];
	ci = acc.i;
	cached = lookupTree(^cache, ci);
	switch (cached) {
		None(): {
			rs = {
				i = acc.i;
				acc.i ::= i;
				r0 = {
					if (getCharCodeAt(acc.input, acc.i) == 39 /* ' */) {
						acc.i ::= acc.i + 1;
						c1 = SyntaxStar(acc, do_parse_grammar_nonquotechar1);
						if (c1 != []) {
							if (getCharCodeAt(acc.input, acc.i) == 39 /* ' */) {
								acc.i ::= acc.i + 1;
								c3 = do_parse_grammar_ws(acc);
								if (c3.choice != -1) {
									SyntaxTree("term0", 0, i, acc.i, [c1, [c3]]);
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				}
				if (r0 != failSyntaxTree) r0
				else {
					acc.i ::= i;
					r1 = {
						if (getCharCodeAt(acc.input, acc.i) == 34 /* " */) {
							acc.i ::= acc.i + 1;
							c1 = SyntaxStar(acc, do_parse_grammar_nonquotechar2);
							if (c1 != []) {
								if (getCharCodeAt(acc.input, acc.i) == 34 /* " */) {
									acc.i ::= acc.i + 1;
									c3 = do_parse_grammar_ws(acc);
									if (c3.choice != -1) {
										SyntaxTree("term0", 1, i, acc.i, [c1, [c3]]);
									} else failSyntaxTree;
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					}
					if (r1 != failSyntaxTree) r1
					else {
						acc.i ::= i;
						r2 = {
							c0 = do_parse_grammar_name(acc);
							if (c0.choice != -1) {
								c0
							} else failSyntaxTree;
						}
						if (r2 != failSyntaxTree) r2
						else {
							acc.i ::= i;
							r3 = {
								if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
									acc.i ::= acc.i + 1;
									c1 = do_parse_grammar_ws(acc);
									if (c1.choice != -1) {
										c2 = do_parse_grammar_seq(acc);
										if (c2.choice != -1) {
											if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
												acc.i ::= acc.i + 1;
												c4 = do_parse_grammar_ws(acc);
												if (c4.choice != -1) {
													SyntaxTree("term0", 3, i, acc.i, [[c1], [c2], [c4]]);
												} else failSyntaxTree;
											} else failSyntaxTree;
										} else failSyntaxTree;
									} else failSyntaxTree;
								} else failSyntaxTree;
							}
							if (r3 != failSyntaxTree) r3
							else {
								acc.i ::= i;
								r4 = {
									if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
										acc.i ::= acc.i + 1;
										c1 = do_parse_grammar_ws(acc);
										if (c1.choice != -1) {
											c2 = do_parse_grammar_action(acc);
											if (c2.choice != -1) {
												if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
													acc.i ::= acc.i + 1;
													c4 = do_parse_grammar_ws(acc);
													if (c4.choice != -1) {
														SyntaxTree("term0", 4, i, acc.i, [[c1], [c2], [c4]]);
													} else failSyntaxTree;
												} else failSyntaxTree;
											} else failSyntaxTree;
										} else failSyntaxTree;
									} else failSyntaxTree;
								}
								if (r4 != failSyntaxTree) r4
								else {
									SyntaxTree("Expected term0", -1, i, i, [])
								}
								
							}
							
						}
						
					}
					
				}
				
			};
			cache := setTree(^cache, ci, rs);
			rs;
		}
		Some(st): {
			acc.i ::= st.end;
			st;
		}
	}
}

do_parse_grammar_seq(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_grammar_term);
	SyntaxTree("seq", 0, i, acc.i, [c0]);
}

do_parse_grammar_type(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 91 /* [ */) {
			acc.i ::= acc.i + 1;
			c1 = do_parse_grammar_type(acc);
			if (c1.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 93 /* ] */) {
					acc.i ::= acc.i + 1;
					SyntaxTree("type", 0, i, acc.i, [[c1]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_grammar_basictype(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree("Expected type", -1, i, i, [])
		}
		
	}
	
}

do_parse_grammar_basictype(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (strRangeIndexOf(acc.input, "void", acc.i, acc.i + 4) == acc.i) {
			acc.i ::= acc.i + 4;
			c1 = do_parse_grammar_ws(acc);
			if (c1.choice != -1) {
				SyntaxTree("basictype", 0, i, acc.i, [[c1]]);
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (strRangeIndexOf(acc.input, "bool", acc.i, acc.i + 4) == acc.i) {
				acc.i ::= acc.i + 4;
				c1 = do_parse_grammar_ws(acc);
				if (c1.choice != -1) {
					SyntaxTree("basictype", 1, i, acc.i, [[c1]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (strRangeIndexOf(acc.input, "int", acc.i, acc.i + 3) == acc.i) {
					acc.i ::= acc.i + 3;
					c1 = do_parse_grammar_ws(acc);
					if (c1.choice != -1) {
						SyntaxTree("basictype", 2, i, acc.i, [[c1]]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (strRangeIndexOf(acc.input, "double", acc.i, acc.i + 6) == acc.i) {
						acc.i ::= acc.i + 6;
						c1 = do_parse_grammar_ws(acc);
						if (c1.choice != -1) {
							SyntaxTree("basictype", 3, i, acc.i, [[c1]]);
						} else failSyntaxTree;
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (strRangeIndexOf(acc.input, "string", acc.i, acc.i + 6) == acc.i) {
							acc.i ::= acc.i + 6;
							c1 = do_parse_grammar_ws(acc);
							if (c1.choice != -1) {
								SyntaxTree("basictype", 4, i, acc.i, [[c1]]);
							} else failSyntaxTree;
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_grammar_name(acc);
							if (c0.choice != -1) {
								c0
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							SyntaxTree("Expected basictype", -1, i, i, [])
						}
						
					}
					
				}
				
			}
			
		}
		
	}
	
}

do_parse_grammar_action(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 36 /* $ */) {
			acc.i ::= acc.i + 1;
			c1 = do_parse_grammar_ws(acc);
			if (c1.choice != -1) {
				c2 = do_parse_grammar_name(acc);
				if (c2.choice != -1) {
					SyntaxTree("action", 0, i, acc.i, [[c1], [c2]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
				acc.i ::= acc.i + 1;
				c1 = do_parse_grammar_ws(acc);
				if (c1.choice != -1) {
					c2 = do_parse_grammar_name(acc);
					if (c2.choice != -1) {
						SyntaxTree("action", 1, i, acc.i, [[c1], [c2]]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 35 /* # */) {
					acc.i ::= acc.i + 1;
					c1 = do_parse_grammar_ws(acc);
					if (c1.choice != -1) {
						SyntaxTree("action", 2, i, acc.i, [[c1]]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_grammar_name(acc);
					if (c0.choice != -1) {
						if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
							acc.i ::= acc.i + 1;
							c2 = do_parse_grammar_ws(acc);
							if (c2.choice != -1) {
								i3 = acc.i;
								t3 = do_parse_grammar_actions(acc);
								c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
								if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
									acc.i ::= acc.i + 1;
									c5 = do_parse_grammar_ws(acc);
									if (c5.choice != -1) {
										SyntaxTree("action", 3, i, acc.i, [[c0], [c2], c3, [c5]]);
									} else failSyntaxTree;
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree("Expected action", -1, i, i, [])
				}
				
			}
			
		}
		
	}
	
}

do_parse_grammar_actions(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_grammar_action(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_grammar_actions__auto42);
		SyntaxTree("actions", 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_grammar_letter(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if ({c = getCharCodeAt(acc.input, acc.i); 97 <= c && c <= 122}) {
			acc.i ::= acc.i + 1;
			SyntaxTree("letter", 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if ({c = getCharCodeAt(acc.input, acc.i); 65 <= c && c <= 90}) {
				acc.i ::= acc.i + 1;
				SyntaxTree("letter", 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 95 /* _ */) {
					acc.i ::= acc.i + 1;
					SyntaxTree("letter", 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree("Expected letter", -1, i, i, [])
			}
			
		}
		
	}
	
}

do_parse_grammar_letterOrDigit(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_grammar_digit(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_grammar_letter(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree("Expected letterOrDigit", -1, i, i, [])
		}
		
	}
	
}

do_parse_grammar_nonquotechar1(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 39 /* ' */) {
		SyntaxTree("Did not expect '''", -1, i, i, [])
	} else {
		c1 = do_parse_grammar_onechar(acc);
		if (c1.choice != -1) {
			SyntaxTree("nonquotechar1", 0, i, acc.i, [[c1]]);
		} else c1
	}
}

do_parse_grammar_nonquotechar2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 34 /* " */) {
		SyntaxTree("Did not expect '\"'", -1, i, i, [])
	} else {
		c1 = do_parse_grammar_onechar(acc);
		if (c1.choice != -1) {
			SyntaxTree("nonquotechar2", 0, i, acc.i, [[c1]]);
		} else c1
	}
}

do_parse_grammar_digit(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 57}) {
		acc.i ::= acc.i + 1;
		SyntaxTree("digit", 0, i, acc.i, []);
	} else {
		// "Expected '0'-'9'"
		updateExpectError(acc, "", "'0'-'9'", i);
		failSyntaxTree;
	}
}

do_parse_grammar_hexdigit(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_grammar_digit(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if ({c = getCharCodeAt(acc.input, acc.i); 97 <= c && c <= 102}) {
				acc.i ::= acc.i + 1;
				SyntaxTree("hexdigit", 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if ({c = getCharCodeAt(acc.input, acc.i); 65 <= c && c <= 70}) {
					acc.i ::= acc.i + 1;
					SyntaxTree("hexdigit", 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree("Expected hexdigit", -1, i, i, [])
			}
			
		}
		
	}
	
}

do_parse_grammar_hexword(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_grammar_hexdigit(acc);
	if (c0.choice != -1) {
		c1 = do_parse_grammar_hexdigit(acc);
		if (c1.choice != -1) {
			c2 = do_parse_grammar_hexdigit(acc);
			if (c2.choice != -1) {
				c3 = do_parse_grammar_hexdigit(acc);
				if (c3.choice != -1) {
					SyntaxTree("hexword", 0, i, acc.i, [[c0], [c1], [c2], [c3]]);
				} else c3
			} else c2
		} else c1
	} else c0
}

do_parse_grammar_onechar(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 92 && getCharCodeAt(acc.input, acc.i + 1) == 117 /* \u */) {
			acc.i ::= acc.i + 2;
			c1 = do_parse_grammar_hexword(acc);
			if (c1.choice != -1) {
				SyntaxTree("onechar", 0, i, acc.i, [[c1]]);
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 92 /* \ */) {
				acc.i ::= acc.i + 1;
				c1 = do_parse_grammar_char(acc);
				if (c1.choice != -1) {
					SyntaxTree("onechar", 1, i, acc.i, [[c1]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_grammar_char(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree("Expected onechar", -1, i, i, [])
			}
			
		}
		
	}
	
}

do_parse_grammar_char(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if ({c = getCharCodeAt(acc.input, acc.i); 0 <= c && c <= 65535}) {
		acc.i ::= acc.i + 1;
		SyntaxTree("char", 0, i, acc.i, []);
	} else {
		// "Expected ' '-'￿'"
		updateExpectError(acc, "", "' '-'￿'", i);
		failSyntaxTree;
	}
}

do_parse_grammar_quotedchar(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 39 /* ' */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_grammar_onechar(acc);
		if (c1.choice != -1) {
			if (getCharCodeAt(acc.input, acc.i) == 39 /* ' */) {
				acc.i ::= acc.i + 1;
				c3 = do_parse_grammar_ws(acc);
				if (c3.choice != -1) {
					SyntaxTree("quotedchar", 0, i, acc.i, [[c1], [c3]]);
				} else c3
			} else {
				// "Expected '''"
				updateExpectError(acc, "", "'", i);
				failSyntaxTree;
			}
		} else c1
	} else {
		// "Expected '''"
		updateExpectError(acc, "", "'", i);
		failSyntaxTree;
	}
}

do_parse_grammar_ws(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_grammar_whitespace);
	SyntaxTree("ws", 0, i, acc.i, [c0]);
}

do_parse_grammar_whitespace(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 32 /*   */) {
			acc.i ::= acc.i + 1;
			SyntaxTree("whitespace", 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 10 /* 
							 */) {
				acc.i ::= acc.i + 1;
				SyntaxTree("whitespace", 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 9 /* 	 */) {
					acc.i ::= acc.i + 1;
					SyntaxTree("whitespace", 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 13 /*  */) {
						acc.i ::= acc.i + 1;
						SyntaxTree("whitespace", 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_grammar_comment(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_grammar_linecomment(acc);
							if (c0.choice != -1) {
								c0
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							SyntaxTree("Expected whitespace", -1, i, i, [])
						}
						
					}
					
				}
				
			}
			
		}
		
	}
	
}

do_parse_grammar_comment(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 47 && getCharCodeAt(acc.input, acc.i + 1) == 42 /* /* */) {
		acc.i ::= acc.i + 2;
		c1 = SyntaxStar(acc, do_parse_grammar_nonstarchar);
		if (getCharCodeAt(acc.input, acc.i) == 42 && getCharCodeAt(acc.input, acc.i + 1) == 47/* * / */) {
			acc.i ::= acc.i + 2;
			SyntaxTree("comment", 0, i, acc.i, [c1]);
		} else {
			// "Expected '*/'"
			updateExpectError(acc, "", "*/", i);
			failSyntaxTree;
		}
	} else {
		// "Expected '/*'"
		updateExpectError(acc, "", "/*", i);
		failSyntaxTree;
	}
}

do_parse_grammar_nonstarchar(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 42 && getCharCodeAt(acc.input, acc.i + 1) == 47/* * / */) {
		SyntaxTree("Did not expect '*/'", -1, i, i, [])
	} else {
		c1 = do_parse_grammar_char(acc);
		if (c1.choice != -1) {
			SyntaxTree("nonstarchar", 0, i, acc.i, [[c1]]);
		} else c1
	}
}

do_parse_grammar_linecomment(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 47 && getCharCodeAt(acc.input, acc.i + 1) == 47 /* // */) {
		acc.i ::= acc.i + 2;
		c1 = SyntaxStar(acc, do_parse_grammar_nonlinebreakchar);
		if (getCharCodeAt(acc.input, acc.i) == 10 /* 
						 */) {
			acc.i ::= acc.i + 1;
			SyntaxTree("linecomment", 0, i, acc.i, [c1]);
		} else {
			// "Expected '\n'"
			updateExpectError(acc, "", "\n", i);
			failSyntaxTree;
		}
	} else {
		// "Expected '//'"
		updateExpectError(acc, "", "//", i);
		failSyntaxTree;
	}
}

do_parse_grammar_nonlinebreakchar(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 10 /* 
					 */) {
		SyntaxTree("Did not expect '\n'", -1, i, i, [])
	} else {
		c1 = do_parse_grammar_char(acc);
		if (c1.choice != -1) {
			SyntaxTree("nonlinebreakchar", 0, i, acc.i, [[c1]]);
		} else c1
	}
}

do_parse_grammar_production__choice32(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
			acc.i ::= acc.i + 1;
			c1 = do_parse_grammar_ws(acc);
			if (c1.choice != -1) {
				c2 = do_parse_grammar_type(acc);
				if (c2.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
						acc.i ::= acc.i + 1;
						c4 = do_parse_grammar_ws(acc);
						if (c4.choice != -1) {
							c5 = do_parse_grammar_choices(acc);
							if (c5.choice != -1) {
								if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
									acc.i ::= acc.i + 1;
									c7 = do_parse_grammar_ws(acc);
									if (c7.choice != -1) {
										SyntaxTree("production__choice32", 0, i, acc.i, [[c1], [c2], [c4], [c5], [c7]]);
									} else failSyntaxTree;
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
				acc.i ::= acc.i + 1;
				c1 = do_parse_grammar_ws(acc);
				if (c1.choice != -1) {
					c2 = do_parse_grammar_choices(acc);
					if (c2.choice != -1) {
						if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
							acc.i ::= acc.i + 1;
							c4 = do_parse_grammar_ws(acc);
							if (c4.choice != -1) {
								SyntaxTree("production__choice32", 1, i, acc.i, [[c1], [c2], [c4]]);
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree("Expected production__choice32", -1, i, i, [])
		}
		
	}
	
}

do_parse_grammar_production__choice33(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 33 /* ! */) {
			acc.i ::= acc.i + 1;
			c1 = do_parse_grammar_ws(acc);
			if (c1.choice != -1) {
				c2 = do_parse_grammar_production__choice32(acc);
				if (c2.choice != -1) {
					SyntaxTree("production__choice33", 0, i, acc.i, [[c1], [c2]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
				acc.i ::= acc.i + 1;
				c1 = do_parse_grammar_ws(acc);
				if (c1.choice != -1) {
					c2 = do_parse_grammar_type(acc);
					if (c2.choice != -1) {
						if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
							acc.i ::= acc.i + 1;
							c4 = do_parse_grammar_ws(acc);
							if (c4.choice != -1) {
								c5 = do_parse_grammar_choices(acc);
								if (c5.choice != -1) {
									if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
										acc.i ::= acc.i + 1;
										c7 = do_parse_grammar_ws(acc);
										if (c7.choice != -1) {
											SyntaxTree("production__choice33", 1, i, acc.i, [[c1], [c2], [c4], [c5], [c7]]);
										} else failSyntaxTree;
									} else failSyntaxTree;
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree("Expected production__choice33", -1, i, i, [])
		}
		
	}
	
}

do_parse_grammar_production__choice34(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_grammar_production__choice33(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
				acc.i ::= acc.i + 1;
				c1 = do_parse_grammar_ws(acc);
				if (c1.choice != -1) {
					c2 = do_parse_grammar_choices(acc);
					if (c2.choice != -1) {
						if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
							acc.i ::= acc.i + 1;
							c4 = do_parse_grammar_ws(acc);
							if (c4.choice != -1) {
								SyntaxTree("production__choice34", 1, i, acc.i, [[c1], [c2], [c4]]);
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree("Expected production__choice34", -1, i, i, [])
		}
		
	}
	
}

do_parse_grammar_term2__choice35(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
			acc.i ::= acc.i + 1;
			c1 = do_parse_grammar_ws(acc);
			if (c1.choice != -1) {
				c2 = do_parse_grammar_name(acc);
				if (c2.choice != -1) {
					SyntaxTree("term2__choice35", 0, i, acc.i, [[c1], [c2]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 36 /* $ */) {
				acc.i ::= acc.i + 1;
				c1 = do_parse_grammar_ws(acc);
				if (c1.choice != -1) {
					c2 = do_parse_grammar_name(acc);
					if (c2.choice != -1) {
						SyntaxTree("term2__choice35", 1, i, acc.i, [[c1], [c2]]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree("Expected term2__choice35", -1, i, i, [])
		}
		
	}
	
}

do_parse_grammar_term2__choice36(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_grammar_term2__choice35(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			SyntaxTree("term2__choice36", 1, i, acc.i, []);
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree("Expected term2__choice36", -1, i, i, [])
		}
		
	}
	
}

do_parse_grammar_term1__choice37(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 63 /* ? */) {
			acc.i ::= acc.i + 1;
			c1 = do_parse_grammar_ws(acc);
			if (c1.choice != -1) {
				SyntaxTree("term1__choice37", 0, i, acc.i, [[c1]]);
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 42 /* * */) {
				acc.i ::= acc.i + 1;
				c1 = do_parse_grammar_ws(acc);
				if (c1.choice != -1) {
					SyntaxTree("term1__choice37", 1, i, acc.i, [[c1]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree("Expected term1__choice37", -1, i, i, [])
		}
		
	}
	
}

do_parse_grammar_term1__choice38(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_grammar_term1__choice37(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 43 /* + */) {
				acc.i ::= acc.i + 1;
				c1 = do_parse_grammar_ws(acc);
				if (c1.choice != -1) {
					SyntaxTree("term1__choice38", 1, i, acc.i, [[c1]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree("Expected term1__choice38", -1, i, i, [])
		}
		
	}
	
}

do_parse_grammar_term1__choice39(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_grammar_term1__choice38(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 94 /* ^ */) {
				acc.i ::= acc.i + 1;
				c1 = do_parse_grammar_ws(acc);
				if (c1.choice != -1) {
					SyntaxTree("term1__choice39", 1, i, acc.i, [[c1]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree("Expected term1__choice39", -1, i, i, [])
		}
		
	}
	
}

do_parse_grammar_choices__auto40(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 124 /* | */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_grammar_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_grammar_choice(acc);
			if (c2.choice != -1) {
				SyntaxTree("choices__auto40", 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected '|'"
		updateExpectError(acc, "", "|", i);
		failSyntaxTree;
	}
}

do_parse_grammar_term__auto41(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 124 /* | */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_grammar_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_grammar_seq2(acc);
			if (c2.choice != -1) {
				SyntaxTree("term__auto41", 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected '|'"
		updateExpectError(acc, "", "|", i);
		failSyntaxTree;
	}
}

do_parse_grammar_actions__auto42(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_grammar_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_grammar_action(acc);
			if (c2.choice != -1) {
				SyntaxTree("actions__auto42", 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

