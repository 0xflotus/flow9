// test for maybe.flow

import maybe;
import tools/flowc/tests/cpp/test_utils;

decode(m : Maybe<int>) {
	switch (m) {
		None(): 0;
		Some(x): x;
	}
}

decode2(m : Maybe<string>) {
	switch (m) {
		None(): "-";
		Some(s): s;
	}
}

test1() {
	// n = None();
	// s = Some(1);
	n : Maybe<int> = None();
	s : Maybe<int> = Some(1);
	check3(isNone(n) && isSome(s), "test1.1");
	check3(i2s(decode(n)) + i2s(decode(s)) == "01", "test1.2");
}

test2() {
	// n = None();
	// s = Some("x");
	n : Maybe<string> = None();
	s : Maybe<string> = Some("x");
	check3(isNone(n) && isSome(s), "test2.1");
	check3(decode2(n) + decode2(s) == "-x", "test2.2");
	check3(eitherMap(n, \x -> x + x, "?") == "?", "test2.3");
	check3(eitherMap(s, \x -> x + x, "?") == "xx", "test2.4");
	ss = ref "?";
	maybeApply(n, \x -> ss := x);
	check3(^ss == "?", "test2.5");
	maybeApply(s, \x -> ss := x);
	check3(^ss == "x", "test2.6");
}

test3() {
	get = \x -> eitherMap(x, \xx -> either(xx, ""), "");
	m : Maybe<string> = Some("x");
	check3("x" == get(Some(m)), "test3.1");
	m2 : Maybe = Some(m);
	check3("x" == get(m2), "test3.2");
	// check("x" == get(Some(Some("x"))));
}

// testing lingo/flow/fail.flow
    Fail<?> ::= Some<?>, Failed;
        Failed(msg : string);
		
test4() {
	f = \ff : Fail<string> -> {
		switch (ff) {
			Some(s): s;
			Failed(s): s;
		}
	}
	check3(f(Some("xyz")) == "xyz", "test4.1");
	check3(f(Failed("failed")) == "failed", "test4.2");
}

MyUnion5 ::= MyStruct51, MyStruct52;
	MyStruct51(i : int);
	MyStruct52(i : int);
	
MyStruct53(i : ref Maybe<MyUnion5>);

test50() {
	f = \m : Maybe<MyUnion5>, i : int -> {
		ii = eitherMap(m, \u : MyUnion5 -> u.i, 0);
		check3(ii == i, "test50: u.i == i");
	}
	s = MyStruct51(5);
	u : MyUnion5 = s;
	f(Some(s), 5);
	f(Some(u), 5);
	f(Some(MyStruct51(5)), 5);
	r : ref Maybe<MyUnion5> = ref None();
	r := Some(s);
	s53 = MyStruct53(ref None());
	s53.i := Some(MyStruct51(51));
	v = eitherMap(^(s53.i), \ss -> ss.i, 0);
	check3(v == 51, "test50: v == 51");
}

test51() {
	f = \m : ref Maybe<MyUnion5>, i : int -> {
		check3(i == eitherMap(^m, \u : MyUnion5 -> u.i, 0), "test51: u.i == i");
	}
	f(ref None(), 0);
	f(ref Some(MyStruct51(51)), 51);
	t : Maybe<MyUnion5> = Some(MyStruct51(51));
	f(ref t, 51);
}

test52() {
	f = \i -> {
		if (i == 51) Some(MyStruct51(51))
		else if (i == 52) Some(MyStruct52(52))
		else None();
	}
	ff = \m : Maybe<MyUnion5> -> eitherMap(m, \u : MyUnion5 -> u.i, 0);
	check3(isNone(f(0)), "test51: 1");
	check3(51 == ff(f(51)), "test51: 2");
	check3(52 == ff(f(52)), "test51: 3");
}

test5_bad() {
	// Some problems with code generation here. TODO: fix it!
	f = \m : Maybe<MyUnion5>, i : int -> {
		ii = eitherMap(m, \u -> u.i, 0);
		check3(ii == i, "test51: u.i == i");
	}
	f(Some(MyStruct51(51)), 51);
	f(Some(MyStruct52(52)), 52);
}

MyStruct6(child : Maybe<MyStruct6>);

test6() {
	s1 = MyStruct6(None());
	s2 = MyStruct6(Some(s1));
	println(s2);
	println([1,2,3]);
	check3(eitherMap(s2.child, \s -> s == s1, false), "test6");
}

main() {
	test1();
	test2();
	test3();
	test4();
	test50();
	test51();
	test52();
	// test5_bad();
	test6();
	printTestsSummary();
}
