
native println : io (string) -> void = Native.println;

SyntaxTree : (
	rule : string,
	choice : int,
	children : [[SyntaxTree]]
);

failSyntaxTree = SyntaxTree("", -1, []);

get_flow_id(st : SyntaxTree) -> SyntaxTree {
	if (st.rule == "native" && st.choice == 0) {
		st.children[1][0];
	} else if (st.rule == "name" && st.choice == 0) {
		st.children[0][0];
	} else if (st.rule == "dot_name" && st.choice == 0) {
		st.children[0][0];
	} else if (st.rule == "assign" && st.choice == 0) {
		st.children[0][0];
	} else if (st.rule == "union" && st.choice == 0) {
		st.children[0][0];
	} else if (st.rule == "function" && st.choice == 0) {
		st.children[0][0];
	} else if (st.rule == "vardecl" && st.choice == 0) {
		st.children[0][0];
	} else if (st.rule == "functiondecl" && st.choice == 0) {
		st.children[0][0];
	} else if (st.rule == "structdecl" && st.choice == 0) {
		st.children[0][0];
	} else if (st.rule == "funarg2_arg" && st.choice == 0) {
		st.children[0][0];
	} else if (st.rule == "funarg" && st.choice == 0) {
		st.children[1][0];
	} else if (st.rule == "typename" && st.choice == 0) {
		st.children[0][0];
	} else if (st.rule == "argtype" && st.choice == 0) {
		st.children[0][0];
	} else if (st.rule == "exp" && st.choice == 0) {
		st.children[0][0];
	} else if (st.rule == "exp" && st.choice == 2) {
		st.children[2][0];
	} else if (st.rule == "argName" && st.choice == 0) {
		st.children[0][0];
	} else if (st.rule == "postfix" && st.choice == 1) {
		st.children[0][0];
	} else if (st.rule == "atom" && st.choice == 1) {
		st.children[0][0];
	} else if (st.rule == "keywords" && st.choice == 7) {
		st.children[2][0];
	} else if (st.rule == "defaultOrNamedCase" && st.choice == 1) {
		st.children[0][0];
	} else if (st.rule == "names" && st.choice == 0) {
		st.children[0][0];
	} else if (st.rule == "names_more" && st.choice == 0) {
		st.children[1][0];
	} else if (st.rule == "path" && st.choice == 0) {
		st.children[0][0];
	} else if (st.rule == "path_more" && st.choice == 0) {
		st.children[0][0];
	} else failSyntaxTree
}


main() {
	f = \st -> println(get_flow_id(st).rule);
	f(failSyntaxTree);
}