// testing simple structures and simple expressions

native println : io (string) -> void = Native.println;
native isSameObj : (value1 : ?, value2 : ?) -> bool = Native.isSameObj;

assert(cond : bool, errorMsg : string) {
	if (!cond) println("ERROR!!!!!! " + errorMsg);
}

Maybe ::= None, Some;
	None();
	Some(value : int);

test1() {
	n = None();
	s = Some(1+2+3);
}

test011() {
	ff = \i -> if (i >= 0) Some(i) else None();
	f = \r : ref int, ii : int -> {
		rr = ref 0;
		if (true) switch (ff(ii)) {
			Some(i):	rr := i;
			None(): rr := -1;
		}
		r := ^rr;
	}
	r = ref 0;
	f(r, 1);
	assert((^r) == 1, "test011.1");
	f(r, -1);
	assert((^r) == -1, "test011.2");
}

// testing cycle dependencies of structs and unions

MyUnion2 ::= MyStruct21, MyStruct22;
	MyStruct21(u : MyUnion2);
	MyStruct22();
	
test2() {
	s = MyStruct22();
	ss = MyStruct21(s);
	u : MyUnion2 = ss;
	b = switch (u) {
		MyStruct21(sss): sss == s;
		default: false;
	}
}

// checking struct dependencies and c++ keywords

MyStruct31(struct : MyStruct32);
MyStruct32();

Pair(first : ?, second : ??);
MyStruct33(struct : Pair<MyStruct34, MyStruct34>);
MyStruct34();

test3() {
	s = MyStruct31(MyStruct32());
	struct = s.struct;		// checking c++ keyword "struct" 
	s2 = MyStruct33(Pair(MyStruct34(), MyStruct34()));
}

MyUnion4 ::= MyStruct41, MyStruct42;
	MyStruct41(i : int);
	MyStruct42(i : int);
 	
test4() {
	f = \u : MyUnion4, i : int -> {
		assert(u.i == i, "ERROR in test4!!!");
	}
	f(MyStruct41(123), 123);
	f(MyStruct42(123), 123);
}

// testing comparing structs with functions

MyStruct5 : (f : () -> int);
	
test5() {
	f1 = \ -> 1;
	f2 = \ -> 2;
	s1 = MyStruct5(f1);
	s11 = MyStruct5(f1);
	s2 = MyStruct5(f2);
	// we cannot compare functions in c++ so we always say that they are NOT equal
	assert(s1 != s11, "ERROR in test5 (s1 == s11) !!!!!!!!!!!");
	assert(s1 != s2, "ERROR in test5 (s1 == s2) !!!!!!!!!!!");
}

// testing mixed structs and unions

MyUnion61 ::= MyStruct61, MyUnion62;
MyUnion62 ::= MyStruct62, MyStruct63;
	MyStruct61(i : int);
	MyStruct62(i : int);
	MyStruct63(i : int);
	
test6() {
	f = \u : MyUnion61 -> {
		i = u.i;
		switch (u) {
			MyStruct61(__): {
				assert(i == u.i, "i == u.i (MyStruct61)");
				10 + u.i;
			}
			MyStruct62(__): {
				assert(i == u.i, "i == u.i (MyStruct62)");
				20 + u.i;
			}
			MyStruct63(__): {
				assert(i == u.i, "i == u.i (MyStruct63)");
				30 + u.i;
			}
		}
	}
	// u62 : MyUnion62 = MyStruct62();
	// u61 : MyUnion61 = u62;
	assert(f(MyStruct61(1)) == 11, "ERROR in test6: MyStruct61");
	assert(f(MyStruct62(2)) == 22, "ERROR in test6: MyStruct62");
	assert(f(MyStruct63(3)) == 33, "ERROR in test6: MyStruct63");
	u62s62 : MyUnion62 = MyStruct62(62);
	u62s63 : MyUnion62 = MyStruct63(63);
	assert(u62s62 == u62s62, "u62s62 == u62s62");
	assert(!(u62s62 == u62s63), "!(u62s62 == u62s63)");
}

test61() {
	// MyUnion61 ::= MyStruct61, MyUnion62;
	// MyUnion62 ::= MyStruct62, MyStruct63;
	f = \u : MyUnion61 -> u.i;
	u61 = MyStruct61(61);
	u62 : MyUnion62 = MyStruct62(62);
	u63 : MyUnion62 = MyStruct63(63);
	assert(f(u61) == 61, "ERROR in test61");
	assert(f(u62) == 62, "ERROR in test61");
	assert(f(u63) == 63, "ERROR in test61");
}

test62() {
	f = \u : MyStruct61 -> u.i;
	u : MyUnion61 = MyStruct61(61);
	assert(61 == f(cast(u : MyUnion61 -> MyStruct61)), "ERROR in test62");
}

test63() {
	s1 = MyStruct61(11);
	s2 = MyStruct61(22);
	assert(s1 < s2 && !(s2 < s1), "ERROR in test63.1");
	a1 = [1]; 
	a123 = [1, 2, 3];
	assert(a1 < a123, "ERROR in test63.2");
	assert(!(a123 < a1), "ERROR in test63.3");
	assert(!(a1 < a1), "ERROR in test63.4");
}

test64() {
	f = \u1 : MyUnion61, u2 : MyUnion61 -> u1 < u2;
	s611 = MyStruct61(1);
	s612 = MyStruct61(2);
	s62 = MyStruct61(0);
	assert(s611 < s612, "ERROR int test64.1");
	if (s611 < s62) assert(!(s62 < s611), "ERROR int test64.2")
	else assert(s62 < s611, "ERROR in test64.3");
}

test65() {
	s1 : MyUnion61 = MyStruct63(63);
	s2 : MyUnion61 = MyStruct63(63);
	assert(s1 == s2, "ERROR in test65");
}

// testins isSameObj()

MyUnion7 ::= MyStruct71, MyStruct72;
	MyStruct71(i : int);
	MyStruct72(i : int);

test7() {
	s1 = MyStruct71(1);
	s2 = MyStruct72(2);
	f = \u1 : MyUnion7, u2 : MyUnion7 -> isSameObj(u1, u2);
	assert(f(s1, s1), "ERROR in test7: f(s1, s1)");
	assert(!f(s1, s2), "ERROR in test7: !f(s1, s2)");
}

// testing union's getter

MyUnion8 ::= MyStruct81, MyStruct82;
	MyStruct81(i : MyStruct83);
	MyStruct82(i : MyStruct83);
	MyStruct83(i : int);

test8() {
	u1 = MyStruct81(MyStruct83(1));
	u2 = MyStruct82(MyStruct83(2));
	f = \u : [MyUnion8], i, msg -> assert(u[0].i.i == i, msg);
	f([u1], 1, "ERROR in test8: u1");
	f([u2], 2, "ERROR in test8: u2");
}

// testing correctness of code generation for nest if

MyUnion9 ::= MyStruct9;
	MyStruct9();

test9() {
	f = \u : MyUnion9 -> {}
	s = MyStruct9();
	u : MyUnion9 = s;
	f(if (true) u else {
		println("ERROR");
		s
	});
}

MyUnion10 ::= MyStruct10;
	MyStruct10(x : int, i : MyStruct11);
	MyStruct11(start : int, end : int);
	
test10() {
	s = MyStruct10(1, MyStruct11(2, 3));
	u : MyUnion10 = s;
	u2 : MyUnion10 = s;
	assert(s == u, "ERROR in test10.1");
	assert(u == s, "ERROR in test10.2");
	assert(u == u2, "ERROR in test10.3");
}

MyStruct111(x : int);

test11() {
	f : ([[MyStruct111]]) -> int = \a -> a[0][0].x;
	assert(11 == f([[MyStruct111(11)]]), "ERROR in test11.1");
	assert(11 == f([[MyStruct111(11), MyStruct111(11)]]), "ERROR in test11.2");
	assert(11 == f([[MyStruct111(11)], [MyStruct111(11)]]), "ERROR in test11.3");
}

MyUnion121<?> ::= MyStruct120, MyStruct121<?>;
	MyStruct120();
	MyStruct121(u : ?);
MyUnion122 ::= MyStruct122, MyStruct123;
	MyStruct122(i : int);
	MyStruct123(i : int);

test12() {
	f = \u : MyUnion121<MyUnion122> -> {
		switch (u) {
			MyStruct121(__): {	// MyStruct121(uu) does not work. TODO: fix it when typechecker is fixed!
				uu : MyUnion122 = u.u;
				uu.i;
			}
			default: 0;
		}
	}
	u122 : MyUnion121<MyStruct122> = MyStruct121(MyStruct122(122));
	assert(122 == f(u122), "test12: u122");
	u123 : MyUnion121<MyStruct123> = MyStruct121(MyStruct123(123));
	assert(123 == f(u123), "test12: u123");
}
	
main() {
	test1();
	test011();
	test2();
	test3();
	test4();
	// test5();
	test6();
	test61();
	test62();
	test63();
	test64();
	test65();
	test7();
	test8();
	test9();
	test10();
	test11();
	// test12();
	println("DONE");
}
