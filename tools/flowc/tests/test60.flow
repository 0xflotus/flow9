// A double-linked list
DList(mutable first : DNode<?>, mutable last : DNode<?>);
	DNode<?> ::= DEnd, DLink<?>;

DEnd : ();


Behaviour<?> ::= ConstBehaviour<?>, DynamicBehaviour<?>;

// The runtime representation of a behaviour
DynamicBehaviour(value : ref ?, subscribers : DList<(?) -> void>);
ConstBehaviour : (constv : ?);

DLink(v : ?, before : DNode<?>, after : DNode<?>, attached : bool);

removeDList(list : DList<?>, n : DLink<?>) -> void {}

// a = debugtyping1;

pushDList(list : DList<?>, v : ?) -> DLink<?> {
	la = list.last;
	node = DLink(v, DEnd(), DEnd(), true);

	DLink(v, node, node, true);

	node;
}

subscribe2(behaviour, fn) {
	switch (behaviour : Behaviour) {
		ConstBehaviour(v): {};
		DynamicBehaviour(v, subscribers): {
			removeDList(subscribers, pushDList(subscribers, fn));
			{}
		}
	}
}
