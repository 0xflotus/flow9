List<?> ::= EmptyList, Cons<?>;
	EmptyList();
	// Add head to the list "tail"
	Cons(head : ?, tail : List<?>);


reverseList(xs) {
	reverseAcc(xs, EmptyList());
}

reverseAcc(xs, acc : List<?>) {
	switch (xs : List<?>) {
		EmptyList(): acc;
		Cons(x, ys): reverseAcc(ys, Cons(x, acc));
	}
}


----------

reverseAcc = (\xs:List<?>, acc:List<?> ->
	(switch (xs : List<?>) {
		EmptyList(): {
			(acc : List<?>)
		}
		Cons(x,ys): {
			(x : ? = ((xs : Cons<?>).head : ?);
			(ys : List<?> = ((xs : Cons<?>).tail : List<?>);
			((reverseAcc : (xs : List<?>, acc : List<?>) -> List<?>)((ys : List<?>), (Cons((x : ?), (acc : List<?>)) : Cons<?>)) : List<?>) : List<?>) : List<?>)
		}
	} : List<?>)
 : (xs : List<?>, acc : List<?>) -> List<?>);

reverseList = (\xs:List<?> ->
	((reverseAcc : (xs : List<?>, acc : List<?>) -> List<?>)((xs : List<?>), (EmptyList() : EmptyList<?>)) : List<?>)
 : (xs : List<?>) -> List<?>);
