// A double-linked list
DList(mutable first : DNode<?>, mutable last : DNode<?>);
	DNode<?> ::= DEnd, DLink<?>;

DEnd : ();


Behaviour<?> ::= ConstBehaviour<?>, DynamicBehaviour<?>;

// The runtime representation of a behaviour
DynamicBehaviour(value : ref ?, subscribers : DList<(?) -> void>);
ConstBehaviour : (constv : ?);

DLink(v : ?, mutable before : DNode<?>, mutable after : DNode<?>, attached : bool);

removeDList(list : DList<?>, n : DLink<?>) -> void {}

// a = debugtyping1;

pushDList(list : DList<?>, v : ?) -> DLink<?> {
	la = list.last;
	switch(la : DNode) {
		DEnd(): {
			node = DLink(v, DEnd(), DEnd(), true);
			list.first ::= node;
			list.last ::= node;
			node;
		}
		DLink(v2, before, after, l): {
			node = DLink(v, la, DEnd(), l);
			la.after ::= node;
			list.last ::= node;
			node;
		}
	}
}

----------

pushDList = (\list:DList<?>, v:? ->
	(la : DNode<?> = ((list : DList<?>).last : DNode<?>);
	({
		(switch (la : DNode<?>) {
			DEnd(): {
				(node : DLink<?> = (DLink((v : ?), (DEnd() : DEnd<?>), (DEnd() : DEnd<?>), (true : bool)) : DLink<?>);
				({
					((list : DList<?>).first ::= (node : DLink<?>) : void);
					((list : DList<?>).last ::= (node : DLink<?>) : void);
					(node : DLink<?>)
				}
				 : DLink<?>) : DLink<?>)
			}
			DLink(v2,before,after,l): {
				(v2 : ? = ((la : DLink<?>).v : ?);
				(before : DNode<?> = ((la : DLink<?>).before : DNode<?>);
				(after : DNode<?> = ((la : DLink<?>).after : DNode<?>);
				(l : bool = ((la : DLink<?>).attached : bool);
				(node : DLink<?> = (DLink((v : ?), (la : DLink<?>), (DEnd() : DEnd<?>), (l : bool)) : DLink<?>);
				({
					((la : DLink<?>).after ::= (node : DLink<?>) : void);
					((list : DList<?>).last ::= (node : DLink<?>) : void);
					(node : DLink<?>)
				}
				 : DLink<?>) : DLink<?>) : DLink<?>) : DLink<?>) : DLink<?>) : DLink<?>)
			}
		} : DLink<?>)
	}
	 : DLink<?>) : DLink<?>)
 : (list : DList<?>, v : ?) -> DLink<?>);

removeDList = (\list:DList<?>, n:DLink<?> ->
	({} : void)
 : (list : DList<?>, n : DLink<?>) -> void);
