Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

FcType ::= FcTypeStruct, FcTypeFunction;

FcTypeStruct(name : string, typars : [FcType], args : [FcStructArg], info : int);

	FcStructArg(name : string, type : FcType);
FcTypeFunction(args : [FcType]);

look() -> Maybe<FcTypeStruct> {
	None();
}

foo(ci, n : string) {
	mstructdef : Maybe<FcTypeStruct> = look();
	switch (mstructdef) {
		None(): {
			FcTypeStruct(n, [], [], ci);
		}
		Some(structdef): {
			// Check the arguments
			structdef.args;
			if (false) {
				structdef;
			} else {
				// Instantiate the typars in the type
				itype = instantiateTypeTyPars(structdef);
				istructdef : FcTypeStruct = switch (itype : FcType) {
					//FcTypeStruct(__, __, __, __): itype;
					default: structdef;
				}
				FcTypeStruct(n, istructdef.typars, [], ci);
			}
		}
	}
}

instantiateTypeTyPars(s : FcType) -> FcType {
	s;
}

----------

instantiateTypeTyPars = (\s:FcType ->
	(s : FcType)
 : (s : FcType) -> FcType);

look = (\ ->
	(None() : None<FcTypeStruct>)
 : () -> None<FcTypeStruct>);

foo = (\ci:int, n:string ->
	(mstructdef : Maybe<FcTypeStruct> = ((look : () -> Maybe<FcTypeStruct>)() : Maybe<FcTypeStruct>);
	({
		(switch (mstructdef : Maybe<FcTypeStruct>) {
			None(): {
				(FcTypeStruct((n : string), ([] : [FcType]), ([] : [FcStructArg]), (ci : int)) : FcTypeStruct)
			}
			Some(structdef): {
				(structdef : FcTypeStruct = ((mstructdef : Some<FcTypeStruct>).value : FcTypeStruct);
				({
					((structdef : FcTypeStruct).args : [FcStructArg]);
					(if ((false : bool)) {
						(structdef : FcTypeStruct)
					} else {
						(itype : FcType = ((instantiateTypeTyPars : (s : FcType) -> FcType)((structdef : FcTypeStruct)) : FcType);
						({
							(istructdef : FcTypeStruct = (switch (itype : FcType) {
								default(): {
									(structdef : FcTypeStruct)
								}
							} : FcTypeStruct);
							({
								(FcTypeStruct((n : string), ((istructdef : FcTypeStruct).typars : [FcType]), ([] : [FcStructArg]), (ci : int)) : FcTypeStruct)
							}
							 : FcTypeStruct) : FcTypeStruct)
						}
						 : FcTypeStruct) : FcTypeStruct)
					}
					 : FcTypeStruct)
				}
				 : FcTypeStruct) : FcTypeStruct)
			}
		} : FcTypeStruct)
	}
	 : FcTypeStruct) : FcTypeStruct)
 : (ci : int, n : string) -> FcTypeStruct);
