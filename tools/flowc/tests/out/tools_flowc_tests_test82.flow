List<?> ::= EmptyList, Cons<?>;
	EmptyList();
	// Add head to the list "tail"
	Cons(head : ?, tail : List<?>);

Pair(first : ?, second : ??);
Triple(first : ?, second : ??, third : ???);


splitList(l : List<?>, N : int) -> Pair<List<?>, List<?>> {
	if (N <= 0)
		Pair(EmptyList(), l)
	else
		switch (l : List) {
			EmptyList(): {
				Pair(EmptyList(), l);
			}
			Cons(h, t): {
				tmp = splitList(t, N - 1); 
				Pair(Cons(h, tmp.first), tmp.second)
			}
		}
}


----------

splitList = (\l:List<?>, N:int ->
	(if ((((N : int) <= (0 : int)) : bool)) {
		(Pair((EmptyList() : EmptyList<?>), (l : List<?>)) : Pair<List<?>, List<?>>)
	} else {
		(switch (l : List<?>) {
			EmptyList(): {
				(Pair((EmptyList() : EmptyList<?>), (l : EmptyList<?>)) : Pair<List<?>, List<?>>)
			}
			Cons(h,t): {
				(h : ? = ((l : Cons<?>).head : ?);
				(t : List<?> = ((l : Cons<?>).tail : List<?>);
				(tmp : Pair<List<?>, List<?>> = ((splitList : (l : List<?>, N : int) -> Pair<List<?>, List<?>>)((t : List<?>), (((N : int) - (1 : int)) : int)) : Pair<List<?>, List<?>>);
				({
					(Pair((Cons((h : ?), ((tmp : Pair<List<?>, List<?>>).first : List<?>)) : Cons<?>), ((tmp : Pair<List<?>, List<?>>).second : List<?>)) : Pair<List<?>, List<?>>)
				}
				 : Pair<List<?>, List<?>>) : Pair<List<?>, List<?>>) : Pair<List<?>, List<?>>) : Pair<List<?>, List<?>>)
			}
		} : Pair<List<?>, List<?>>)
	}
	 : Pair<List<?>, List<?>>)
 : (l : List<?>, N : int) -> Pair<List<?>, List<?>>);
