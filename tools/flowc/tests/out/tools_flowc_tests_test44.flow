Pair(first : ?, second : ??);
Triple(first : ?, second : ??, third : ??);

Maybe<?> ::= None, Some<?>;
None();
Some(value : ?);

parseOrdinal: (s : string) -> Maybe;

isOrdinal(s : string) -> bool {
	switch (parseOrdinal(s) : Maybe) {
		None() : false;
		Some(v) : v.second == 1.0;
	}
}

parseOrdinal(s : string) -> Maybe {
	fromEnglish(s, true);
}

fromEnglish(w : string, addOrdinals : bool) -> Maybe<Pair<double,double>> {
	if (false) {
		None()
	} else {
		Some(Pair(1.0, 1.0))
	}
}

----------

fromEnglish = (\w:string, addOrdinals:bool ->
	(if ((false : bool)) {
		(None() : None<Pair<double, double>>)
	} else {
		(Some((Pair((1.0 : double), (1.0 : double)) : Pair<double, double>)) : Some<Pair<double, double>>)
	}
	 : Maybe<Pair<double, double>>)
 : (w : string, addOrdinals : bool) -> Maybe<Pair<double, double>>);

parseOrdinal = (\s:string ->
	((fromEnglish : (w : string, addOrdinals : bool) -> Maybe<Pair<double, double>>)((s : string), (true : bool)) : Maybe<Pair<double, double>>)
 : (s : string) -> Maybe<Pair<double, double>>);

isOrdinal = (\s:string ->
	(gsymswitch0 : Maybe<Pair<double, double>> = ((parseOrdinal : (s : string) -> Maybe<Pair<double, double>>)((s : string)) : Maybe<Pair<double, double>>);
	({
		(switch (gsymswitch0 : Maybe<Pair<double, double>>) {
			None(): {
				(false : bool)
			}
			Some(v): {
				(v : Pair<double, double> = ((gsymswitch0 : Some<Pair<double, double>>).value : Pair<double, double>);
				((((v : Pair<double, double>).second : double) == (1.0 : double)) : bool) : bool)
			}
		} : bool)
	}
	 : bool) : bool)
 : (s : string) -> bool);
