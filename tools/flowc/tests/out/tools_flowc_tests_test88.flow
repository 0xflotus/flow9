//import tools/flowc/fcexp;

native length : ([?]) -> int = Native.length;

Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

FcType ::= FcTypeStruct, FcTypeFunction, FcTypeVoid;

FcTypeVoid();
FcTypeStruct(args : [FcStructArg]);
	FcStructArg();
FcTypeFunction(args : [FcFunctionArg]);
	FcFunctionArg();

foo(mstructdef : Maybe<FcTypeStruct>, es) {
	switch (mstructdef) {
		None(): {
			FcTypeStruct([]);
		}
		Some(structdef): {
			if (length(structdef.args) != length(es)) {
				structdef;
			} else {
				// Instantiate the typars in the type
				itype = instantiateTypeTyPars(structdef);
				istructdef = cast(itype : FcType -> FcTypeStruct);
				argtypes = [];
				FcTypeStruct(argtypes);
			}
		}
	}
}

instantiateTypeTyPars(t : FcType) -> FcType {
	t;
}

----------

instantiateTypeTyPars = (\t:FcType ->
	(t : FcType)
 : (t : FcType) -> FcType);

foo = (\mstructdef:Maybe<FcTypeStruct>, es:[?] ->
	(switch (mstructdef : Maybe<FcTypeStruct>) {
		None(): {
			(FcTypeStruct(([] : [FcStructArg])) : FcTypeStruct)
		}
		Some(structdef): {
			(structdef : FcTypeStruct = ((mstructdef : Some<FcTypeStruct>).value : FcTypeStruct);
			(if (((((length : ([FcStructArg]) -> int)(((structdef : FcTypeStruct).args : [FcStructArg])) : int) != ((length : ([?]) -> int)((es : [?])) : int)) : bool)) {
				(structdef : FcTypeStruct)
			} else {
				(itype : FcType = ((instantiateTypeTyPars : (t : FcType) -> FcType)((structdef : FcTypeStruct)) : FcType);
				({
					(istructdef : FcTypeStruct = (cast((itype : FcType) : FcType -> FcTypeStruct) : FcTypeStruct);
					({
						(argtypes : [FcStructArg] = ([] : [FcStructArg]);
						({
							(FcTypeStruct((argtypes : [FcStructArg])) : FcTypeStruct)
						}
						 : FcTypeStruct) : FcTypeStruct)
					}
					 : FcTypeStruct) : FcTypeStruct)
				}
				 : FcTypeStruct) : FcTypeStruct)
			}
			 : FcTypeStruct) : FcTypeStruct)
		}
	} : FcTypeStruct)
 : (mstructdef : Maybe<FcTypeStruct>, es : [?]) -> FcTypeStruct);
