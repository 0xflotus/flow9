	List<?> ::= EmptyList, Cons<?>;
		EmptyList();
		// Add head to the list "tail"
		Cons(head : ?, tail : List<?>);


foo() {
	loop1 = ref \i, indexing, acc -> EmptyList();
	loop1 := \i, indexing, acc -> {
		newAcc = if (true)  {
			Cons(0, acc)
		} else {
			EmptyList()
		}
		^loop1(i + 1, indexing + 1, newAcc);
	}
}



----------

foo = (\ ->
	(loop1 : ref (int, int, List<int>) -> EmptyList<?> = (ref (\i:int, indexing:int, acc:List<int> ->
		(EmptyList() : EmptyList<?>)
	 : (i : int, indexing : int, acc : List<int>) -> EmptyList<?>) : ref (i : int, indexing : int, acc : List<int>) -> EmptyList<?>);
	({
		(((loop1 : ref (int, int, List<int>) -> EmptyList<?>)  :=  (\i:int, indexing:int, acc:List<int> ->
			(newAcc : List<int> = (if ((true : bool)) {
				(Cons((0 : int), (acc : List<int>)) : Cons<int>)
			} else {
				(EmptyList() : EmptyList<int>)
			}
			 : List<int>);
			({
				((^(loop1 : ref (int, int, List<int>) -> EmptyList<?>) : (int, int, List<int>) -> EmptyList<?>)((((i : int) + (1 : int)) : int), (((indexing : int) + (1 : int)) : int), (newAcc : List<int>)) : EmptyList<?>)
			}
			 : EmptyList<?>) : EmptyList<?>)
		 : (i : int, indexing : int, acc : List<int>) -> EmptyList<?>)) : void)
	}
	 : void) : void)
 : () -> void);
