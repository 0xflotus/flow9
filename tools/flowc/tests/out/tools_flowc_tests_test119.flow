    Fail<?> ::= Some<?>, Failed;
	Some(value : ?);
        Failed(msg : string);


failOrelse : (f1 : Fail<?>, f2 : (msg : string)->Fail<?>)->Fail<?>;
failOrelse(f1, f2) switch (f1) {
    Some(v): f1;
    Failed(msg): f2(msg);
};

----------

failOrelse = (\f1:Fail<?>, f2:(msg : string) -> Fail<?> ->
	(switch (f1 : Fail<?>) {
		Some(v): {
			(v : ? = ((f1 : Some<?>).value : ?);
			(f1 : Some<?>) : Some<?>)
		}
		Failed(msg): {
			(msg : string = ((f1 : Failed<?>).msg : string);
			((f2 : (msg : string) -> Fail<?>)((msg : string)) : Fail<?>) : Fail<?>)
		}
	} : Fail<?>)
 : (f1 : Fail<?>, f2 : (msg : string) -> Fail<?>) -> Fail<?>);
