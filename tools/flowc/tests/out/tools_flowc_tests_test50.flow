import tools/flowc/fctypeenv;

DesugarAcc(
	names : FcGlobalNames, 
	fileStructs : Tree<string, FcTypeStruct>, 
	fileUnions : Tree<string, FcTypeUnion>, 
);

// Instantiate a typename by expanding it to a struct or union with the given types bound to the type parameters
instantiateDesugarTypename(dacc : DesugarAcc, typename : FcTypeName) -> void {
	mfilestruct = lookupTree(dacc.fileStructs, typename.name);
	type = switch (mfilestruct) {
		None(): {
			mstruct = lookupTree(dacc.names.structs, typename.name);
			typename
		}
		Some(fs): fs;
	}
}

----------

instantiateDesugarTypename = (\dacc:DesugarAcc, typename:FcTypeName ->
	(mfilestruct : Maybe<FcTypeStruct> = ((lookupTree : (tree : Tree<string, FcTypeStruct>, key : string) -> Maybe<FcTypeStruct>)(((dacc : DesugarAcc).fileStructs : Tree<string, FcTypeStruct>), ((typename : FcTypeName).name : string)) : Maybe<FcTypeStruct>);
	({
		(type : FcType = (switch (mfilestruct : Maybe<FcTypeStruct>) {
			None(): {
				(mstruct : Maybe<FcTypeStruct> = ((lookupTree : (tree : Tree<string, FcTypeStruct>, key : string) -> Maybe<FcTypeStruct>)((((dacc : DesugarAcc).names : FcGlobalNames).structs : Tree<string, FcTypeStruct>), ((typename : FcTypeName).name : string)) : Maybe<FcTypeStruct>);
				({
					(typename : FcTypeName)
				}
				 : FcTypeName) : FcTypeName)
			}
			Some(fs): {
				(fs : FcTypeStruct = ((mfilestruct : Some<FcTypeStruct>).value : FcTypeStruct);
				(fs : FcTypeStruct) : FcTypeStruct)
			}
		} : FcType);
		({

		}
		 : void) : void)
	}
	 : void) : void)
 : (dacc : DesugarAcc, typename : FcTypeName) -> void);
