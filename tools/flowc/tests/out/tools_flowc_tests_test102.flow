import tools/flowc/fcmodule;

findUnusedExports() {
	module2symbols = fold([], makeTree(), \acc, module -> {
		symbols2 = foldTree(module.natives, makeSet(), \__, nat : FcNativeDec, acc2 -> {
			switch (nat.flowfallback) {
				Some(fn): {
					eitherMap(fn.lambda, \lambda -> {
						mergeSets(acc2, fcfreevars(lambda))
					}, acc2)
				}
				None(): acc2;
			}
		});
		acc
	});

}

fcfreevars(e : FcExp) -> Set<string> {
	makeSet();
}

----------

fcfreevars = (\e:FcExp ->
	((makeSet : () -> Set<string>)() : Set<string>)
 : (e : FcExp) -> Set<string>);

findUnusedExports = (\ ->
	(module2symbols : Tree<?, ??> = ((fold : (xs : [FcModule], init : Tree<?, ??>, fn : (Tree<?, ??>, FcModule) -> Tree<?, ??>) -> Tree<?, ??>)(([] : [FcModule]), ((makeTree : () -> Tree<?, ??>)() : Tree<?, ??>), (\acc:Tree<?, ??>, module:FcModule ->
		(symbols2 : Set<string> = ((foldTree : (tree : Tree<string, FcNativeDec>, acc : Set<string>, f : (key : string, value : FcNativeDec, acc : Set<string>) -> Set<string>) -> Set<string>)(((module : FcModule).natives : Tree<string, FcNativeDec>), ((makeSet : () -> Set<string>)() : Set<string>), (\__:string, nat:FcNativeDec, acc2:Set<string> ->
			(gsymswitch0 : Maybe<FcFunctionDec> = ((nat : FcNativeDec).flowfallback : Maybe<FcFunctionDec>);
			({
				(switch (gsymswitch0 : Maybe<FcFunctionDec>) {
					Some(fn): {
						(fn : FcFunctionDec = ((gsymswitch0 : Some<FcFunctionDec>).value : FcFunctionDec);
						((eitherMap : (m : Maybe<FcLambda>, fn : (FcLambda) -> Set<string>, alternative : Set<string>) -> Set<string>)(((fn : FcFunctionDec).lambda : Maybe<FcLambda>), (\lambda:FcLambda ->
							((mergeSets : (a : Set<string>, b : Set<string>) -> Set<string>)((acc2 : Set<string>), ((fcfreevars : (e : FcExp) -> Set<string>)((lambda : FcLambda)) : Set<string>)) : Set<string>)
						 : (lambda : FcLambda) -> Set<string>), (acc2 : Set<string>)) : Set<string>) : Set<string>)
					}
					None(): {
						(acc2 : Set<string>)
					}
				} : Set<string>)
			}
			 : Set<string>) : Set<string>)
		 : (__ : string, nat : FcNativeDec, acc2 : Set<string>) -> Set<string>)) : Set<string>);
		({
			(acc : Tree<?, ??>)
		}
		 : Tree<?, ??>) : Tree<?, ??>)
	 : (acc : Tree<?, ??>, module : FcModule) -> Tree<?, ??>)) : Tree<?, ??>);
	({

	}
	 : void) : void)
 : () -> void);
