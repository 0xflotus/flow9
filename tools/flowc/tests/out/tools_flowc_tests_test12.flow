native foldi : (xs : [?], init : ??, fn : (int, ??, ?)->??) -> ?? = Native.foldi;
native strIndexOf : (string, string) -> int = Native.strIndexOf;


	Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

	Pair(first : ?, second : ??);
	Quadruple(first : ?, second : ??, third : ???, fourth : ????);

strFindFirstOfStrings(s : string, stringsToFind : [string]) -> Maybe<Pair<int, int>>;

// a = debugtyping;

strFindFirstOfStrings(s, strings) {
	foldi(strings, None(), \i, acc : Maybe<Pair<int, int>>, st -> {
		p = strIndexOf(s, st);
		if (p == -1) acc else {
			switch (acc) {
				None(): Some(Pair(p, i));
				Some(pa): if (p < pa.first) Some(Pair(p, i)) else acc;
			}
		}
	});
}

----------

strFindFirstOfStrings = (\s:string, strings:[string] ->
	((foldi : (xs : [string], init : Maybe<Pair<int, int>>, fn : (int, Maybe<Pair<int, int>>, string) -> Maybe<Pair<int, int>>) -> Maybe<Pair<int, int>>)((strings : [string]), (None() : None<Pair<int, int>>), (\i:int, acc:Maybe<Pair<int, int>>, st:string ->
		(p : int = ((strIndexOf : (string, string) -> int)((s : string), (st : string)) : int);
		({
			(if ((((p : int) == (-1 : int)) : bool)) {
				(acc : Maybe<Pair<int, int>>)
			} else {
				(switch (acc : Maybe<Pair<int, int>>) {
					None(): {
						(Some((Pair((p : int), (i : int)) : Pair<int, int>)) : Some<Pair<int, int>>)
					}
					Some(pa): {
						(pa : Pair<int, int> = ((acc : Some<Pair<int, int>>).value : Pair<int, int>);
						(if ((((p : int) < ((pa : Pair<int, int>).first : int)) : bool)) {
							(Some((Pair((p : int), (i : int)) : Pair<int, int>)) : Some<Pair<int, int>>)
						} else {
							(acc : Some<Pair<int, int>>)
						}
						 : Some<Pair<int, int>>) : Some<Pair<int, int>>)
					}
				} : Some<Pair<int, int>>)
			}
			 : Maybe<Pair<int, int>>)
		}
		 : Maybe<Pair<int, int>>) : Maybe<Pair<int, int>>)
	 : (i : int, acc : Maybe<Pair<int, int>>, st : string) -> Maybe<Pair<int, int>>)) : Maybe<Pair<int, int>>)
 : (s : string, strings : [string]) -> Maybe<Pair<int, int>>);
