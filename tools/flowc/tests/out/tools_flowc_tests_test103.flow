Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
	TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
	TreeEmpty : ();

lookupTree(tree : Tree<?, ??>, key : ?) -> Maybe<??> {
	None();
}

FcModule(
	globalVars : Tree<string, FcGlobalVar>
);

FcDeclaration ::= FcFunctionDec, FcGlobalVar, FcNativeDec;


FcGlobalVar(value : Maybe<FcExp>);

FcFunctionDec();


FcNativeDec();

native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;


Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);


FcExp ::= FcInt;
FcInt();

makeInitOrder(module : FcModule, initOrder : [string]) -> [string] {

	track = fold(initOrder, 0, \acc, o -> {
		gvar = lookupTree(module.globalVars, o);
		switch (gvar) {
			None(): {
				None();
			}
			Some(gv): gv.value;
		}
		acc
	});
	[]
}



----------

lookupTree = (\tree:Tree<?, ??>, key:? ->
	(None() : None<??>)
 : (tree : Tree<?, ??>, key : ?) -> None<??>);

makeInitOrder = (\module:FcModule, initOrder:[string] ->
	(track : int = ((fold : (xs : [string], init : int, fn : (int, string) -> int) -> int)((initOrder : [string]), (0 : int), (\acc:int, o:string ->
		(gvar : Maybe<FcGlobalVar> = ((lookupTree : (tree : Tree<string, FcGlobalVar>, key : string) -> Maybe<FcGlobalVar>)(((module : FcModule).globalVars : Tree<string, FcGlobalVar>), (o : string)) : Maybe<FcGlobalVar>);
		({
			(switch (gvar : Maybe<FcGlobalVar>) {
				None(): {
					(None() : None<FcExp>)
				}
				Some(gv): {
					(gv : FcGlobalVar = ((gvar : Some<FcGlobalVar>).value : FcGlobalVar);
					((gv : FcGlobalVar).value : Maybe<FcExp>) : Maybe<FcExp>)
				}
			} : Maybe<FcExp>);
			(acc : int)
		}
		 : int) : int)
	 : (acc : int, o : string) -> int)) : int);
	({
		([] : [string])
	}
	 : [string]) : [string])
 : (module : FcModule, initOrder : [string]) -> [string]);
