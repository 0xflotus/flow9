native length : ([?]) -> int = Native.length;

native concat : ([?], [?]) -> [?] = Native.concat;
//native concat : ([flow], [flow]) -> [flow] = Native.concat;

// Concatenate three arrays
concat3 : ([?], [?], [?]) -> [?];

concat3(a1,a2,a3) {
	if (length(a1) < length(a3)) {
		concat(concat(a1, a2), a3);
	} else {
		concat(a1, concat(a2, a3));
	}
}

concatA(a) {
	concatA_rec(a, 0, length(a))
}

concatA_rec(a, i, l) {
	if (l <= 3) {
		if (l == 1) {
			a[i]
		} else if (l == 2) {
			concat(a[i], a[i+1])
		} else if (l == 3) {
			concat3(a[i], a[i+1], a[i+2])
		} else {
			[]
		}
	} else {
		m = l / 2;
		concat(
			concatA_rec(a, i, m),
			concatA_rec(a, i+m, l-m)
		)
	}
}

----------

concat3 = (\a1:[?], a2:[?], a3:[?] ->
	(if (((((length : ([?]) -> int)((a1 : [?])) : int) < ((length : ([?]) -> int)((a3 : [?])) : int)) : bool)) {
		((concat : ([?], [?]) -> [?])(((concat : ([?], [?]) -> [?])((a1 : [?]), (a2 : [?])) : [?]), (a3 : [?])) : [?])
	} else {
		((concat : ([?], [?]) -> [?])((a1 : [?]), ((concat : ([?], [?]) -> [?])((a2 : [?]), (a3 : [?])) : [?])) : [?])
	}
	 : [?])
 : (a1 : [?], a2 : [?], a3 : [?]) -> [?]);

concatA_rec = (\a:[[?]], i:int, l:int ->
	(if ((((l : int) <= (3 : int)) : bool)) {
		(if ((((l : int) == (1 : int)) : bool)) {
			((a : [[?]])[(i : int)] : [?])
		} else {
			(if ((((l : int) == (2 : int)) : bool)) {
				((concat : ([?], [?]) -> [?])(((a : [[?]])[(i : int)] : [?]), ((a : [[?]])[(((i : int) + (1 : int)) : int)] : [?])) : [?])
			} else {
				(if ((((l : int) == (3 : int)) : bool)) {
					((concat3 : (a1 : [?], a2 : [?], a3 : [?]) -> [?])(((a : [[?]])[(i : int)] : [?]), ((a : [[?]])[(((i : int) + (1 : int)) : int)] : [?]), ((a : [[?]])[(((i : int) + (2 : int)) : int)] : [?])) : [?])
				} else {
					([] : [?])
				}
				 : [?])
			}
			 : [?])
		}
		 : [?])
	} else {
		(m : int = (((l : int) / (2 : int)) : int);
		({
			((concat : ([?], [?]) -> [?])(((concatA_rec : (a : [[?]], i : int, l : int) -> [?])((a : [[?]]), (i : int), (m : int)) : [?]), ((concatA_rec : (a : [[?]], i : int, l : int) -> [?])((a : [[?]]), (((i : int) + (m : int)) : int), (((l : int) - (m : int)) : int)) : [?])) : [?])
		}
		 : [?]) : [?])
	}
	 : [?])
 : (a : [[?]], i : int, l : int) -> [?]);

concatA = (\a:[[?]] ->
	((concatA_rec : (a : [[?]], i : int, l : int) -> [?])((a : [[?]]), (0 : int), ((length : ([[?]]) -> int)((a : [[?]])) : int)) : [?])
 : (a : [[?]]) -> [?]);
