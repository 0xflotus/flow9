native length : ([?]) -> int = Native.length;

Maybe<?> ::= None, Some<?>;
None();
Some(value : ?);

FcType ::= FcTypeStruct, FcTypeOther;
	FcTypeStruct(args : [string]);
	FcTypeOther();



foo(mstructdef : Maybe<FcTypeStruct>) {
	// debugtyping1;
	switch (mstructdef) {
		None(): {
			0;
		}
		Some(structdef): {
			length(structdef.args);
			instantiateTypeTyPars(structdef);
			0;
		}
	}
}

instantiateTypeTyPars(t : FcType) -> FcType {
	t;
}

----------

instantiateTypeTyPars = (\t:FcType ->
	(t : FcType)
 : (t : FcType) -> FcType);

foo = (\mstructdef:Maybe<FcTypeStruct> ->
	(switch (mstructdef : Maybe<FcTypeStruct>) {
		None(): {
			(0 : int)
		}
		Some(structdef): {
			(structdef : FcTypeStruct = ((mstructdef : Some<FcTypeStruct>).value : FcTypeStruct);
			({
				((length : ([string]) -> int)(((structdef : FcTypeStruct).args : [string])) : int);
				((instantiateTypeTyPars : (t : FcType) -> FcType)((structdef : FcTypeStruct)) : FcType);
				(0 : int)
			}
			 : int) : int)
		}
	} : int)
 : (mstructdef : Maybe<FcTypeStruct>) -> int);
