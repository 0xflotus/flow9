Maybe<?> ::= None, Some<?>;
None();
Some(value : ?);

eitherMap : (m : Maybe<?>, fn : (?) -> ??, alternative: ??) -> ??;
eitherMap(m, fn, alternative) {
	switch (m : Maybe) {
		None(): alternative;
		Some(v): fn(v);
	}
}

native substring : (s : string, start : int, length : int) -> string = Native.substring;

strIndexOfM(s, s1) {
	i = strIndexOf(s, s1);
	if (i < 0) None() else Some(i)
}
native strlen : (string) -> int = Native.strlen;
native strIndexOf : (string, string) -> int = Native.strIndexOf;

getUrlExtension(url) {
	eitherMap(strIndexOfM(url, "?"),
		\i -> "",
		url
	)
	|> (\s -> eitherMap(strIndexOfM(s, "."),
		\i -> substring(s, i+1, strlen(s) - i - 1),
		""
	))
	|> (\s -> eitherMap(strIndexOfM(s, "/"),
		\i -> "", // extension should not contain "/"
		s
	))
}

----------

eitherMap = (\m:Maybe<?>, fn:(?) -> ??, alternative:?? ->
	(switch (m : Maybe<?>) {
		None(): {
			(alternative : ??)
		}
		Some(v): {
			(v : ? = ((m : Some<?>).value : ?);
			((fn : (?) -> ??)((v : ?)) : ??) : ??)
		}
	} : ??)
 : (m : Maybe<?>, fn : (?) -> ??, alternative : ??) -> ??);

strIndexOfM = (\s:string, s1:string ->
	(i : int = ((strIndexOf : (string, string) -> int)((s : string), (s1 : string)) : int);
	({
		(if ((((i : int) < (0 : int)) : bool)) {
			(None() : None<int>)
		} else {
			(Some((i : int)) : Some<int>)
		}
		 : Maybe<int>)
	}
	 : Maybe<int>) : Maybe<int>)
 : (s : string, s1 : string) -> Maybe<int>);

getUrlExtension = (\url:string ->
	((\s:string ->
		((eitherMap : (m : Maybe<int>, fn : (int) -> string, alternative : string) -> string)(((strIndexOfM : (s : string, s1 : string) -> Maybe<int>)((s : string), ("/" : string)) : Maybe<int>), (\i:int ->
			("" : string)
		 : (i : int) -> string), (s : string)) : string)
	 : (s : string) -> string)(((\s:string ->
		((eitherMap : (m : Maybe<int>, fn : (int) -> string, alternative : string) -> string)(((strIndexOfM : (s : string, s1 : string) -> Maybe<int>)((s : string), ("." : string)) : Maybe<int>), (\i:int ->
			((substring : (s : string, start : int, length : int) -> string)((s : string), (((i : int) + (1 : int)) : int), ((((((strlen : (string) -> int)((s : string)) : int) - (i : int)) : int) - (1 : int)) : int)) : string)
		 : (i : int) -> string), ("" : string)) : string)
	 : (s : string) -> string)(((eitherMap : (m : Maybe<int>, fn : (int) -> string, alternative : string) -> string)(((strIndexOfM : (s : string, s1 : string) -> Maybe<int>)((url : string), ("?" : string)) : Maybe<int>), (\i:int ->
		("" : string)
	 : (i : int) -> string), (url : string)) : string)) : string)) : string)
 : (url : string) -> string);
