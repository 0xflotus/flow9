Maybe<?> ::= None, Some<?>;
None();
Some(value : ?);


maybeMap(m, f) {
	switch (m : Maybe) {
		None(): None();
		Some(v): Some(f(v));
	}
}

// foo = debugtyping;

pow2(x, n) {
	if ( x == 0.0 ) {
		if (n <= 0) None() else Some(0.0)
	} else {
		if ( n == 0 ) {
			Some(1.0)
		} else if ( n > 0 ) {
			x2 = pow2(x, n/2);
			if (n % 2 == 0) maybeMap(x2, \t -> t*t) else maybeMap(x2, \t -> t*t*x)
		} else {
			maybeMap(pow2(x, -n), \t -> 1.0 / t)
		}
	}
}

// bar = enddebugtyping;

----------

maybeMap = (\m:Maybe<?>, f:(?) -> ?? ->
	(switch (m : Maybe<?>) {
		None(): {
			(None() : None<??>)
		}
		Some(v): {
			(v : ? = ((m : Some<?>).value : ?);
			(Some(((f : (?) -> ??)((v : ?)) : ??)) : Some<??>) : Some<??>)
		}
	} : Maybe<??>)
 : (m : Maybe<?>, f : (?) -> ??) -> Maybe<??>);

pow2 = (\x:double, n:int ->
	(if ((((x : double) == (0.0 : double)) : bool)) {
		(if ((((n : int) <= (0 : int)) : bool)) {
			(None() : None<double>)
		} else {
			(Some((0.0 : double)) : Some<double>)
		}
		 : Maybe<double>)
	} else {
		(if ((((n : int) == (0 : int)) : bool)) {
			(Some((1.0 : double)) : Some<double>)
		} else {
			(if ((((n : int) > (0 : int)) : bool)) {
				(x2 : Maybe<double> = ((pow2 : (x : double, n : int) -> Maybe<double>)((x : double), (((n : int) / (2 : int)) : int)) : Maybe<double>);
				({
					(if ((((((n : int) % (2 : int)) : int) == (0 : int)) : bool)) {
						((maybeMap : (m : Maybe<double>, f : (double) -> double) -> Maybe<double>)((x2 : Maybe<double>), (\t:double ->
							(((t : double) * (t : double)) : double)
						 : (t : double) -> double)) : Maybe<double>)
					} else {
						((maybeMap : (m : Maybe<double>, f : (double) -> double) -> Maybe<double>)((x2 : Maybe<double>), (\t:double ->
							(((((t : double) * (t : double)) : double) * (x : double)) : double)
						 : (t : double) -> double)) : Maybe<double>)
					}
					 : Maybe<double>)
				}
				 : Maybe<double>) : Maybe<double>)
			} else {
				((maybeMap : (m : Maybe<double>, f : (double) -> double) -> Maybe<double>)(((pow2 : (x : double, n : int) -> Maybe<double>)((x : double), (-(n : int) : int)) : Maybe<double>), (\t:double ->
					(((1.0 : double) / (t : double)) : double)
				 : (t : double) -> double)) : Maybe<double>)
			}
			 : Maybe<double>)
		}
		 : Maybe<double>)
	}
	 : Maybe<double>)
 : (x : double, n : int) -> Maybe<double>);
