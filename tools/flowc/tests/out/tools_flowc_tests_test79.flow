Maybe<?> ::= None, Some<?>;
None();
Some(value : ?);

either(m: Maybe<?>, alternative: ?) -> ? {
	alternative
}

maybeMap(f: () -> ??) -> Maybe<??> {
	if (true) None() else Some(f());
}

findClosingTag() {
	(\m -> either(m, None())) (
		maybeMap(\ -> {
			if (true) Some(0) else None();
		})
	)
}


----------

either = (\m:Maybe<?>, alternative:? ->
	(alternative : ?)
 : (m : Maybe<?>, alternative : ?) -> ?);

maybeMap = (\f:() -> ?? ->
	(if ((true : bool)) {
		(None() : None<??>)
	} else {
		(Some(((f : () -> ??)() : ??)) : Some<??>)
	}
	 : Maybe<??>)
 : (f : () -> ??) -> Maybe<??>);

findClosingTag = (\ ->
	((\m:Maybe<Maybe<int>> ->
		((either : (m : Maybe<Maybe<int>>, alternative : Maybe<int>) -> Maybe<int>)((m : Maybe<Maybe<int>>), (None() : None<int>)) : Maybe<int>)
	 : (m : Maybe<Maybe<int>>) -> Maybe<int>)(((maybeMap : (f : () -> Maybe<int>) -> Maybe<Maybe<int>>)((\ ->
		(if ((true : bool)) {
			(Some((0 : int)) : Some<int>)
		} else {
			(None() : None<int>)
		}
		 : Maybe<int>)
	 : () -> Maybe<int>)) : Maybe<Maybe<int>>)) : Maybe<int>)
 : () -> Maybe<int>);
