import form/paragraphtypes;

Paragraph2(elements : [ParagraphElement], style : [ParagraphStyle], availableWidth : Behaviour<double>) -> DynamicBehaviour<[Form]> {
	// First, inline all TextFragments
	elementList = fold(elements, makeList(), \acc, element -> {
		switch(element : ParagraphElement) {
		TextFragments(parts): concatList(parts, acc);
		GlueFragments() : Cons(GlueFragments(), acc);
		default: Cons(cast(element : ParagraphElement -> Form), acc);
		}
	});
	expanded = list2array(elementList);

	// Next, extract the style
	alignment = ref LeftAlign();
	interlineSpacing = ref 0.0;
	fill = ref 0xffffff;
	fillset = ref 0.0;

	iter(style, \s -> {
		switch (s : ParagraphStyle) {
		InterlineSpacing(d): interlineSpacing := d;
		Fill(color) : fill := color;
		FillOpacity(opacity) : fillset := opacity;
		default: alignment := cast(s : ParagraphStyle -> ParagraphAlignment);
		}
	});

	Wrap(availableWidth, expanded, ^alignment, ^interlineSpacing, ^fill, ^fillset);
}


Wrap(availableWidth : Behaviour<double>, elements : [WrapElement],
	  alignment : ParagraphAlignment, interlineSpacing : double,
	  background : int, opacity : double)
	-> DynamicBehaviour<[Form]> {
	make([])
}

----------

Wrap = (\availableWidth:Behaviour<double>, elements:[WrapElement], alignment:ParagraphAlignment, interlineSpacing:double, background:int, opacity:double ->
	((make : (value : [Form]) -> DynamicBehaviour<[Form]>)(([] : [Form])) : DynamicBehaviour<[Form]>)
 : (availableWidth : Behaviour<double>, elements : [WrapElement], alignment : ParagraphAlignment, interlineSpacing : double, background : int, opacity : double) -> DynamicBehaviour<[Form]>);

Paragraph2 = (\elements:[ParagraphElement], style:[ParagraphStyle], availableWidth:Behaviour<double> ->
	(elementList : List<WrapElement> = ((fold : (xs : [ParagraphElement], init : List<WrapElement>, fn : (List<WrapElement>, ParagraphElement) -> List<WrapElement>) -> List<WrapElement>)((elements : [ParagraphElement]), ((makeList : () -> List<WrapElement>)() : List<WrapElement>), (\acc:List<WrapElement>, element:ParagraphElement ->
		(switch (element : ParagraphElement) {
			TextFragments(parts): {
				(parts : List<WrapElement> = ((element : TextFragments).parts : List<WrapElement>);
				((concatList : (l1 : List<WrapElement>, l2 : List<WrapElement>) -> List<WrapElement>)((parts : List<WrapElement>), (acc : List<WrapElement>)) : List<WrapElement>) : List<WrapElement>)
			}
			GlueFragments(): {
				(Cons((GlueFragments() : GlueFragments), (acc : List<WrapElement>)) : Cons<WrapElement>)
			}
			default(): {
				(Cons((cast((element : ParagraphElement) : ParagraphElement -> Form) : Form), (acc : List<WrapElement>)) : Cons<WrapElement>)
			}
		} : List<WrapElement>)
	 : (acc : List<WrapElement>, element : ParagraphElement) -> List<WrapElement>)) : List<WrapElement>);
	({
		(expanded : [WrapElement] = ((list2array : (l : List<WrapElement>) -> [WrapElement])((elementList : List<WrapElement>)) : [WrapElement]);
		({
			(alignment : ref ParagraphAlignment = (ref (LeftAlign() : LeftAlign) : ref LeftAlign);
			({
				(interlineSpacing : ref double = (ref (0.0 : double) : ref double);
				({
					(fill : ref int = (ref (16777215 : int) : ref int);
					({
						(fillset : ref double = (ref (0.0 : double) : ref double);
						({
							((iter : ([ParagraphStyle], (ParagraphStyle) -> void) -> void)((style : [ParagraphStyle]), (\s:ParagraphStyle ->
								(switch (s : ParagraphStyle) {
									InterlineSpacing(d): {
										(d : double = ((s : InterlineSpacing).d : double);
										(((interlineSpacing : ref double)  :=  (d : double)) : void) : void)
									}
									Fill(color): {
										(color : int = ((s : Fill).color : int);
										(((fill : ref int)  :=  (color : int)) : void) : void)
									}
									FillOpacity(opacity): {
										(opacity : double = ((s : FillOpacity).opacity : double);
										(((fillset : ref double)  :=  (opacity : double)) : void) : void)
									}
									default(): {
										(((alignment : ref ParagraphAlignment)  :=  (cast((s : ParagraphStyle) : ParagraphStyle -> ParagraphAlignment) : ParagraphAlignment)) : void)
									}
								} : void)
							 : (s : ParagraphStyle) -> void)) : void);
							((Wrap : (availableWidth : Behaviour<double>, elements : [WrapElement], alignment : ParagraphAlignment, interlineSpacing : double, background : int, opacity : double) -> DynamicBehaviour<[Form]>)((availableWidth : Behaviour<double>), (expanded : [WrapElement]), (^(alignment : ref ParagraphAlignment) : ParagraphAlignment), (^(interlineSpacing : ref double) : double), (^(fill : ref int) : int), (^(fillset : ref double) : double)) : DynamicBehaviour<[Form]>)
						}
						 : DynamicBehaviour<[Form]>) : DynamicBehaviour<[Form]>)
					}
					 : DynamicBehaviour<[Form]>) : DynamicBehaviour<[Form]>)
				}
				 : DynamicBehaviour<[Form]>) : DynamicBehaviour<[Form]>)
			}
			 : DynamicBehaviour<[Form]>) : DynamicBehaviour<[Form]>)
		}
		 : DynamicBehaviour<[Form]>) : DynamicBehaviour<[Form]>)
	}
	 : DynamicBehaviour<[Form]>) : DynamicBehaviour<[Form]>)
 : (elements : [ParagraphElement], style : [ParagraphStyle], availableWidth : Behaviour<double>) -> DynamicBehaviour<[Form]>);
