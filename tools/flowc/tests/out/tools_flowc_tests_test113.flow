import form/form;
import transforms;

// Be careful, lots of memory leaks here
FloatingCols(forms: [Form], widthBs: [DynamicBehaviour<double>]) -> Form {
	linesB = selectDistinct(make([]), \lns -> {
		maxLine = either(maxA(lns), 0);
		res : [ref [Pair<int, Form>]] = map(enumFromTo(0, maxLine), \i -> ref []);
		mapi(lns, \i, ln -> refArrayPush(res[ln], Pair(i, forms[i])))
		|> ignore;
		
		map(res, \r -> ^r)
	});

	Select(linesB, \lines -> 
		Lines(map(lines, \cols -> 
			Cols(map(cols, \col -> 
				Inspect([Width(widthBs[col.first])], col.second)
			))
		))
	)
}

Lines(f : [Form]) -> Form {
	f[0];
}

Cols(f : [Form]) -> Form {
	f[0];
}

Select(b : Behaviour<?>, fn : (?) -> Form) -> Form {
	Empty()
}

----------

Cols = (\f:[Form] ->
	((f : [Form])[(0 : int)] : Form)
 : (f : [Form]) -> Form);

Lines = (\f:[Form] ->
	((f : [Form])[(0 : int)] : Form)
 : (f : [Form]) -> Form);

Select = (\b:Behaviour<?>, fn:(?) -> Form ->
	(Empty() : Empty)
 : (b : Behaviour<?>, fn : (?) -> Form) -> Empty);

FloatingCols = (\forms:[Form], widthBs:[DynamicBehaviour<double>] ->
	(linesB : Behaviour<[[Pair<int, Form>]]> = ((selectDistinct : (behaviour : Behaviour<[int]>, fn : ([int]) -> [[Pair<int, Form>]]) -> Behaviour<[[Pair<int, Form>]]>)(((make : (value : [int]) -> DynamicBehaviour<[int]>)(([] : [int])) : DynamicBehaviour<[int]>), (\lns:[int] ->
		(maxLine : int = ((either : (m : Maybe<int>, alternative : int) -> int)(((maxA : (a : [int]) -> Maybe<int>)((lns : [int])) : Maybe<int>), (0 : int)) : int);
		({
			(res : [ref [Pair<int, Form>]] = ((map : ([int], (int) -> ref [Pair<int, Form>]) -> [ref [Pair<int, Form>]])(((enumFromTo : (int, int) -> [int])((0 : int), (maxLine : int)) : [int]), (\i:int ->
				(ref ([] : [Pair<int, Form>]) : ref [Pair<int, Form>])
			 : (i : int) -> ref [Pair<int, Form>])) : [ref [Pair<int, Form>]]);
			({
				((ignore : (dummy : flow) -> void)(((mapi : ([int], (int, int) -> void) -> [void])((lns : [int]), (\i:int, ln:int ->
					((refArrayPush : (refArray : ref [Pair<int, Form>], elem : Pair<int, Form>) -> void)(((res : [ref [Pair<int, Form>]])[(ln : int)] : ref [Pair<int, Form>]), (Pair((i : int), ((forms : [Form])[(i : int)] : Form)) : Pair<int, Form>)) : void)
				 : (i : int, ln : int) -> void)) : [void])) : void);
				((map : ([ref [Pair<int, Form>]], (ref [Pair<int, Form>]) -> [Pair<int, Form>]) -> [[Pair<int, Form>]])((res : [ref [Pair<int, Form>]]), (\r:ref [Pair<int, Form>] ->
					(^(r : ref [Pair<int, Form>]) : [Pair<int, Form>])
				 : (r : ref [Pair<int, Form>]) -> [Pair<int, Form>])) : [[Pair<int, Form>]])
			}
			 : [[Pair<int, Form>]]) : [[Pair<int, Form>]])
		}
		 : [[Pair<int, Form>]]) : [[Pair<int, Form>]])
	 : (lns : [int]) -> [[Pair<int, Form>]])) : Behaviour<[[Pair<int, Form>]]>);
	({
		((Select : (b : Behaviour<[[Pair<int, Form>]]>, fn : ([[Pair<int, Form>]]) -> Form) -> Form)((linesB : Behaviour<[[Pair<int, Form>]]>), (\lines:[[Pair<int, Form>]] ->
			((Lines : (f : [Form]) -> Form)(((map : ([[Pair<int, Form>]], ([Pair<int, Form>]) -> Form) -> [Form])((lines : [[Pair<int, Form>]]), (\cols:[Pair<int, Form>] ->
				((Cols : (f : [Form]) -> Form)(((map : ([Pair<int, Form>], (Pair<int, Form>) -> Inspect) -> [Inspect])((cols : [Pair<int, Form>]), (\col:Pair<int, Form> ->
					(Inspect(([(Width(((widthBs : [DynamicBehaviour<double>])[((col : Pair<int, Form>).first : int)] : DynamicBehaviour<double>)) : Width)] : [Width]), ((col : Pair<int, Form>).second : Form)) : Inspect)
				 : (col : Pair<int, Form>) -> Inspect)) : [Inspect])) : Form)
			 : (cols : [Pair<int, Form>]) -> Form)) : [Form])) : Form)
		 : (lines : [[Pair<int, Form>]]) -> Form)) : Form)
	}
	 : Form) : Form)
 : (forms : [Form], widthBs : [DynamicBehaviour<double>]) -> Form);
