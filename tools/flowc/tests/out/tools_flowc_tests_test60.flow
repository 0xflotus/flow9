// A double-linked list
DList(mutable first : DNode<?>, mutable last : DNode<?>);
	DNode<?> ::= DEnd, DLink<?>;

DEnd : ();


Behaviour<?> ::= ConstBehaviour<?>, DynamicBehaviour<?>;

// The runtime representation of a behaviour
DynamicBehaviour(value : ref ?, subscribers : DList<(?) -> void>);
ConstBehaviour : (constv : ?);

DLink(v : ?, before : DNode<?>, after : DNode<?>, attached : bool);

removeDList(list : DList<?>, n : DLink<?>) -> void {}

// a = debugtyping1;

pushDList(list : DList<?>, v : ?) -> DLink<?> {
	la = list.last;
	node = DLink(v, DEnd(), DEnd(), true);

	DLink(v, node, node, true);

	node;
}

subscribe2(behaviour, fn) {
	switch (behaviour : Behaviour) {
		ConstBehaviour(v): {};
		DynamicBehaviour(v, subscribers): {
			removeDList(subscribers, pushDList(subscribers, fn));
			{}
		}
	}
}

----------

pushDList = (\list:DList<?>, v:? ->
	(la : DNode<?> = ((list : DList<?>).last : DNode<?>);
	({
		(node : DLink<?> = (DLink((v : ?), (DEnd() : DEnd<?>), (DEnd() : DEnd<?>), (true : bool)) : DLink<?>);
		({
			(DLink((v : ?), (node : DLink<?>), (node : DLink<?>), (true : bool)) : DLink<?>);
			(node : DLink<?>)
		}
		 : DLink<?>) : DLink<?>)
	}
	 : DLink<?>) : DLink<?>)
 : (list : DList<?>, v : ?) -> DLink<?>);

removeDList = (\list:DList<?>, n:DLink<?> ->
	({} : void)
 : (list : DList<?>, n : DLink<?>) -> void);

subscribe2 = (\behaviour:Behaviour<?>, fn:(?) -> void ->
	(switch (behaviour : Behaviour<?>) {
		ConstBehaviour(v): {
			(v : ? = ((behaviour : ConstBehaviour<?>).constv : ?);
			({} : void) : void)
		}
		DynamicBehaviour(v,subscribers): {
			(v : ref ? = ((behaviour : DynamicBehaviour<?>).value : ref ?);
			(subscribers : DList<(?) -> void> = ((behaviour : DynamicBehaviour<?>).subscribers : DList<(?) -> void>);
			({
				((removeDList : (list : DList<(?) -> void>, n : DLink<(?) -> void>) -> void)((subscribers : DList<(?) -> void>), ((pushDList : (list : DList<(?) -> void>, v : (?) -> void) -> DLink<(?) -> void>)((subscribers : DList<(?) -> void>), (fn : (?) -> void)) : DLink<(?) -> void>)) : void);
				({} : void)
			}
			 : void) : void) : void)
		}
	} : void)
 : (behaviour : Behaviour<?>, fn : (?) -> void) -> void);
