Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
	TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
	TreeEmpty : ();


makeTree() -> Tree<?, ??> {
	TreeEmpty();
}

native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;

lookupTreeDef(x : Tree<?, ??>, key : ?, defaultValue : ??) -> ?? {
	defaultValue
}


treePushToArrayValue(tree : Tree<?, [??]>, key : ?, value : ??) -> Tree<?, [??]> {
	tree;
}

	// Setup for pieces
	PieceSetup ::= PieceFieldEditor;
	PieceFieldEditor ::= PieceFieldIsSlider, PieceFieldHide, PieceFieldTooltip, PieceFieldIuEditor;
		PieceFieldIuEditor(field : string);
		PieceFieldIsSlider(field : string, minimum : double, maximum : double, precision : double);
		PieceFieldHide(field : string);
		PieceFieldTooltip(field : string, tooltip : string);


getPieceSetupEditors(pieceStructSetups : ref Tree<string, [PieceSetup]>, name : string) -> Tree<string, [PieceFieldEditor]> {
	setups = lookupTreeDef(^(pieceStructSetups), name, []);
	fold(setups, makeTree(), \acc, s -> {
		switch (s : PieceSetup) {
			PieceFieldIsSlider(field, minimum, maximum, precision): treePushToArrayValue(acc, field, s);
			PieceFieldIuEditor(field) : treePushToArrayValue(acc, field, s);
			PieceFieldHide(field): treePushToArrayValue(acc, field, s);
			PieceFieldTooltip(field, tooltip): treePushToArrayValue(acc, field, s);
		}
	});
}

----------

lookupTreeDef = (\x:Tree<?, ??>, key:?, defaultValue:?? ->
	(defaultValue : ??)
 : (x : Tree<?, ??>, key : ?, defaultValue : ??) -> ??);

makeTree = (\ ->
	(TreeEmpty() : TreeEmpty<?, ??>)
 : () -> TreeEmpty<?, ??>);

treePushToArrayValue = (\tree:Tree<?, [??]>, key:?, value:?? ->
	(tree : Tree<?, [??]>)
 : (tree : Tree<?, [??]>, key : ?, value : ??) -> Tree<?, [??]>);

getPieceSetupEditors = (\pieceStructSetups:ref Tree<string, [PieceSetup]>, name:string ->
	(setups : [PieceSetup] = ((lookupTreeDef : (x : Tree<string, [PieceSetup]>, key : string, defaultValue : [PieceSetup]) -> [PieceSetup])((^(pieceStructSetups : ref Tree<string, [PieceSetup]>) : Tree<string, [PieceSetup]>), (name : string), ([] : [PieceSetup])) : [PieceSetup]);
	({
		((fold : (xs : [PieceSetup], init : Tree<string, [PieceFieldEditor]>, fn : (Tree<string, [PieceFieldEditor]>, PieceSetup) -> Tree<string, [PieceFieldEditor]>) -> Tree<string, [PieceFieldEditor]>)((setups : [PieceSetup]), ((makeTree : () -> Tree<string, [PieceFieldEditor]>)() : Tree<string, [PieceFieldEditor]>), (\acc:Tree<string, [PieceFieldEditor]>, s:PieceSetup ->
			(switch (s : PieceSetup) {
				PieceFieldIsSlider(field,minimum,maximum,precision): {
					(field : string = ((s : PieceFieldIsSlider).field : string);
					(minimum : double = ((s : PieceFieldIsSlider).minimum : double);
					(maximum : double = ((s : PieceFieldIsSlider).maximum : double);
					(precision : double = ((s : PieceFieldIsSlider).precision : double);
					((treePushToArrayValue : (tree : Tree<string, [PieceFieldEditor]>, key : string, value : PieceFieldEditor) -> Tree<string, [PieceFieldEditor]>)((acc : Tree<string, [PieceFieldEditor]>), (field : string), (s : PieceFieldIsSlider)) : Tree<string, [PieceFieldEditor]>) : Tree<string, [PieceFieldEditor]>) : Tree<string, [PieceFieldEditor]>) : Tree<string, [PieceFieldEditor]>) : Tree<string, [PieceFieldEditor]>)
				}
				PieceFieldIuEditor(field): {
					(field : string = ((s : PieceFieldIuEditor).field : string);
					((treePushToArrayValue : (tree : Tree<string, [PieceFieldEditor]>, key : string, value : PieceFieldEditor) -> Tree<string, [PieceFieldEditor]>)((acc : Tree<string, [PieceFieldEditor]>), (field : string), (s : PieceFieldIuEditor)) : Tree<string, [PieceFieldEditor]>) : Tree<string, [PieceFieldEditor]>)
				}
				PieceFieldHide(field): {
					(field : string = ((s : PieceFieldHide).field : string);
					((treePushToArrayValue : (tree : Tree<string, [PieceFieldEditor]>, key : string, value : PieceFieldEditor) -> Tree<string, [PieceFieldEditor]>)((acc : Tree<string, [PieceFieldEditor]>), (field : string), (s : PieceFieldHide)) : Tree<string, [PieceFieldEditor]>) : Tree<string, [PieceFieldEditor]>)
				}
				PieceFieldTooltip(field,tooltip): {
					(field : string = ((s : PieceFieldTooltip).field : string);
					(tooltip : string = ((s : PieceFieldTooltip).tooltip : string);
					((treePushToArrayValue : (tree : Tree<string, [PieceFieldEditor]>, key : string, value : PieceFieldEditor) -> Tree<string, [PieceFieldEditor]>)((acc : Tree<string, [PieceFieldEditor]>), (field : string), (s : PieceFieldTooltip)) : Tree<string, [PieceFieldEditor]>) : Tree<string, [PieceFieldEditor]>) : Tree<string, [PieceFieldEditor]>)
				}
			} : Tree<string, [PieceFieldEditor]>)
		 : (acc : Tree<string, [PieceFieldEditor]>, s : PieceSetup) -> Tree<string, [PieceFieldEditor]>)) : Tree<string, [PieceFieldEditor]>)
	}
	 : Tree<string, [PieceFieldEditor]>) : Tree<string, [PieceFieldEditor]>)
 : (pieceStructSetups : ref Tree<string, [PieceSetup]>, name : string) -> Tree<string, [PieceFieldEditor]>);
