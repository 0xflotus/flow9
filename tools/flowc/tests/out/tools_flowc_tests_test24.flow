Maybe<?> ::= None, Some<?>;
None();
Some(value : ?);

either : (m: Maybe<?>, alternative: ?) -> ?;
maybeMap : (m: Maybe<?>, f: (?) -> ??) -> Maybe<??>;
eitherMap : (m : Maybe<?>, fn : (?) -> ??, alternative: ??) -> ??;

either(m, alternative) {
	switch (m : Maybe) {
		None(): alternative;
		Some(v): v;
	}
}

eitherMap(m, fn, alternative) {
	switch (m : Maybe) {
		None(): alternative;
		Some(v): fn(v);
	}
}

maybeMap(m, f) {
	switch (m : Maybe) {
		None(): None();
		Some(v): Some(f(v));
	}
}

native find : (a : [?], fn : (?) -> bool) -> Maybe<?> = Native.find;

Pair(first : ?, second : ??);

native strlen : (string) -> int = Native.strlen;
native substring : (s : string, start : int, length : int) -> string = Native.substring;
native strIndexOf : (string, string) -> int = Native.strIndexOf;


startsWith : (s : string, start : string) -> bool;
startsWith(s, start) {
	sl = strlen(start);
	if (sl > strlen(s)) {
		false;
	} else {
		substring(s, 0, sl) == start;
	}
}

strIndexOfM(s, s1) {
	i = strIndexOf(s, s1);
	if (i < 0) None() else Some(i)
}


findClosingTag(s, sl, closeTag,  ctl, otherTagsWithSameCloseTag, level) {
	tagStartsAt = \start -> \tag -> startsWith(substring(s, start, sl - start), tag);
	maybeMap(strIndexOfM(s, "<"), \tagPosition -> {
		if (closeTag |> tagStartsAt(tagPosition)) {
			if (level == 0) {
				Some(Pair(tagPosition, sl))
			} else {
				newLen = sl - tagPosition - ctl;
				findClosingTag(substring(s, tagPosition + ctl, newLen), newLen, closeTag,  ctl, otherTagsWithSameCloseTag, level - 1)
			}
		} else {
			eitherMap(
				find(otherTagsWithSameCloseTag, tagStartsAt(tagPosition)),
				\tag -> {
					newLen = sl - tagPosition - strlen(tag);
					findClosingTag(substring(s, tagPosition + strlen(tag), newLen), newLen, closeTag, ctl, otherTagsWithSameCloseTag, level + 1)
				},
				{
					newLen = sl - tagPosition - 1;
					findClosingTag(substring(s, tagPosition + 1, newLen), newLen, closeTag, ctl, otherTagsWithSameCloseTag, level)
				}
			)
		}

	}) |> (\m -> either(m, None())) // remove one Some
}

----------

either = (\m:Maybe<?>, alternative:? ->
	(switch (m : Maybe<?>) {
		None(): {
			(alternative : ?)
		}
		Some(v): {
			(v : ? = ((m : Some<?>).value : ?);
			(v : ?) : ?)
		}
	} : ?)
 : (m : Maybe<?>, alternative : ?) -> ?);

eitherMap = (\m:Maybe<?>, fn:(?) -> ??, alternative:?? ->
	(switch (m : Maybe<?>) {
		None(): {
			(alternative : ??)
		}
		Some(v): {
			(v : ? = ((m : Some<?>).value : ?);
			((fn : (?) -> ??)((v : ?)) : ??) : ??)
		}
	} : ??)
 : (m : Maybe<?>, fn : (?) -> ??, alternative : ??) -> ??);

maybeMap = (\m:Maybe<?>, f:(?) -> ?? ->
	(switch (m : Maybe<?>) {
		None(): {
			(None() : None<??>)
		}
		Some(v): {
			(v : ? = ((m : Some<?>).value : ?);
			(Some(((f : (?) -> ??)((v : ?)) : ??)) : Some<??>) : Some<??>)
		}
	} : Maybe<??>)
 : (m : Maybe<?>, f : (?) -> ??) -> Maybe<??>);

startsWith = (\s:string, start:string ->
	(sl : int = ((strlen : (string) -> int)((start : string)) : int);
	({
		(if ((((sl : int) > ((strlen : (string) -> int)((s : string)) : int)) : bool)) {
			(false : bool)
		} else {
			((((substring : (s : string, start : int, length : int) -> string)((s : string), (0 : int), (sl : int)) : string) == (start : string)) : bool)
		}
		 : bool)
	}
	 : bool) : bool)
 : (s : string, start : string) -> bool);

strIndexOfM = (\s:string, s1:string ->
	(i : int = ((strIndexOf : (string, string) -> int)((s : string), (s1 : string)) : int);
	({
		(if ((((i : int) < (0 : int)) : bool)) {
			(None() : None<int>)
		} else {
			(Some((i : int)) : Some<int>)
		}
		 : Maybe<int>)
	}
	 : Maybe<int>) : Maybe<int>)
 : (s : string, s1 : string) -> Maybe<int>);

findClosingTag = (\s:string, sl:int, closeTag:string, ctl:int, otherTagsWithSameCloseTag:[string], level:int ->
	(tagStartsAt : (int) -> (string) -> bool = (\start:int ->
		(\tag:string ->
			((startsWith : (s : string, start : string) -> bool)(((substring : (s : string, start : int, length : int) -> string)((s : string), (start : int), (((sl : int) - (start : int)) : int)) : string), (tag : string)) : bool)
		 : (tag : string) -> bool)
	 : (start : int) -> (tag : string) -> bool);
	({
		((\m:Maybe<Maybe<Pair<int, int>>> ->
			((either : (m : Maybe<Maybe<Pair<int, int>>>, alternative : Maybe<Pair<int, int>>) -> Maybe<Pair<int, int>>)((m : Maybe<Maybe<Pair<int, int>>>), (None() : None<Pair<int, int>>)) : Maybe<Pair<int, int>>)
		 : (m : Maybe<Maybe<Pair<int, int>>>) -> Maybe<Pair<int, int>>)(((maybeMap : (m : Maybe<int>, f : (int) -> Maybe<Pair<int, int>>) -> Maybe<Maybe<Pair<int, int>>>)(((strIndexOfM : (s : string, s1 : string) -> Maybe<int>)((s : string), ("<" : string)) : Maybe<int>), (\tagPosition:int ->
			(if ((((tagStartsAt : (int) -> (string) -> bool)((tagPosition : int)) : (string) -> bool)((closeTag : string)) : bool)) {
				(if ((((level : int) == (0 : int)) : bool)) {
					(Some((Pair((tagPosition : int), (sl : int)) : Pair<int, int>)) : Some<Pair<int, int>>)
				} else {
					(newLen : int = (((((sl : int) - (tagPosition : int)) : int) - (ctl : int)) : int);
					({
						((findClosingTag : (s : string, sl : int, closeTag : string, ctl : int, otherTagsWithSameCloseTag : [string], level : int) -> Maybe<Pair<int, int>>)(((substring : (s : string, start : int, length : int) -> string)((s : string), (((tagPosition : int) + (ctl : int)) : int), (newLen : int)) : string), (newLen : int), (closeTag : string), (ctl : int), (otherTagsWithSameCloseTag : [string]), (((level : int) - (1 : int)) : int)) : Maybe<Pair<int, int>>)
					}
					 : Maybe<Pair<int, int>>) : Maybe<Pair<int, int>>)
				}
				 : Maybe<Pair<int, int>>)
			} else {
				((eitherMap : (m : Maybe<string>, fn : (string) -> Maybe<Pair<int, int>>, alternative : Maybe<Pair<int, int>>) -> Maybe<Pair<int, int>>)(((find : (a : [string], fn : (string) -> bool) -> Maybe<string>)((otherTagsWithSameCloseTag : [string]), ((tagStartsAt : (int) -> (string) -> bool)((tagPosition : int)) : (string) -> bool)) : Maybe<string>), (\tag:string ->
					(newLen : int = (((((sl : int) - (tagPosition : int)) : int) - ((strlen : (string) -> int)((tag : string)) : int)) : int);
					({
						((findClosingTag : (s : string, sl : int, closeTag : string, ctl : int, otherTagsWithSameCloseTag : [string], level : int) -> Maybe<Pair<int, int>>)(((substring : (s : string, start : int, length : int) -> string)((s : string), (((tagPosition : int) + ((strlen : (string) -> int)((tag : string)) : int)) : int), (newLen : int)) : string), (newLen : int), (closeTag : string), (ctl : int), (otherTagsWithSameCloseTag : [string]), (((level : int) + (1 : int)) : int)) : Maybe<Pair<int, int>>)
					}
					 : Maybe<Pair<int, int>>) : Maybe<Pair<int, int>>)
				 : (tag : string) -> Maybe<Pair<int, int>>), (newLen : int = (((((sl : int) - (tagPosition : int)) : int) - (1 : int)) : int);
				({
					((findClosingTag : (s : string, sl : int, closeTag : string, ctl : int, otherTagsWithSameCloseTag : [string], level : int) -> Maybe<Pair<int, int>>)(((substring : (s : string, start : int, length : int) -> string)((s : string), (((tagPosition : int) + (1 : int)) : int), (newLen : int)) : string), (newLen : int), (closeTag : string), (ctl : int), (otherTagsWithSameCloseTag : [string]), (level : int)) : Maybe<Pair<int, int>>)
				}
				 : Maybe<Pair<int, int>>) : Maybe<Pair<int, int>>)) : Maybe<Pair<int, int>>)
			}
			 : Maybe<Pair<int, int>>)
		 : (tagPosition : int) -> Maybe<Pair<int, int>>)) : Maybe<Maybe<Pair<int, int>>>)) : Maybe<Pair<int, int>>)
	}
	 : Maybe<Pair<int, int>>) : Maybe<Pair<int, int>>)
 : (s : string, sl : int, closeTag : string, ctl : int, otherTagsWithSameCloseTag : [string], level : int) -> Maybe<Pair<int, int>>);
