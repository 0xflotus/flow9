native length : ([?]) -> int = Native.length;

DictionaryHit(word : string, cookie : ?, distance : int);

DictionaryHits(hits : [DictionaryHit<?>]);

PathDistance : (distance : double, path : [int]);

addDictionaryHit(h : DictionaryHits, hit : DictionaryHit, maxHits : int) -> DictionaryHits {
	_insert = \ -> {
		DictionaryHits(arrayPushSortedWithLimit(h.hits, hit, \h1, h2 -> genericCompare(h1.distance, h2.distance), maxHits));
	}

	n = length(h.hits);
	if (n < maxHits) {
		_insert();
	} else {
		last = h.hits[n - 1];
		if (last.distance < hit.distance) h
		else {
			_insert();
		}
	}
}

genericCompare(x : ?, y : ?) -> int {
	0;
}

arrayPushSortedWithLimit(elements : [?], toAdd : ?, comparisonFn: (?, ?) -> int, limit : int) -> [?] {
	elements;
}

----------

arrayPushSortedWithLimit = (\elements:[?], toAdd:?, comparisonFn:(?, ?) -> int, limit:int ->
	(elements : [?])
 : (elements : [?], toAdd : ?, comparisonFn : (?, ?) -> int, limit : int) -> [?]);

genericCompare = (\x:?, y:? ->
	(0 : int)
 : (x : ?, y : ?) -> int);

addDictionaryHit = (\h:DictionaryHits<?>, hit:DictionaryHit<?>, maxHits:int ->
	(_insert : () -> DictionaryHits<?> = (\ ->
		(DictionaryHits(((arrayPushSortedWithLimit : (elements : [DictionaryHit<?>], toAdd : DictionaryHit<?>, comparisonFn : (DictionaryHit<?>, DictionaryHit<?>) -> int, limit : int) -> [DictionaryHit<?>])(((h : DictionaryHits<?>).hits : [DictionaryHit<?>]), (hit : DictionaryHit<?>), (\h1:DictionaryHit<?>, h2:DictionaryHit<?> ->
			((genericCompare : (x : int, y : int) -> int)(((h1 : DictionaryHit<?>).distance : int), ((h2 : DictionaryHit<?>).distance : int)) : int)
		 : (h1 : DictionaryHit<?>, h2 : DictionaryHit<?>) -> int), (maxHits : int)) : [DictionaryHit<?>])) : DictionaryHits<?>)
	 : () -> DictionaryHits<?>);
	({
		(n : int = ((length : ([DictionaryHit<?>]) -> int)(((h : DictionaryHits<?>).hits : [DictionaryHit<?>])) : int);
		({
			(if ((((n : int) < (maxHits : int)) : bool)) {
				((_insert : () -> DictionaryHits<?>)() : DictionaryHits<?>)
			} else {
				(last : DictionaryHit<?> = (((h : DictionaryHits<?>).hits : [DictionaryHit<?>])[(((n : int) - (1 : int)) : int)] : DictionaryHit<?>);
				({
					(if (((((last : DictionaryHit<?>).distance : int) < ((hit : DictionaryHit<?>).distance : int)) : bool)) {
						(h : DictionaryHits<?>)
					} else {
						((_insert : () -> DictionaryHits<?>)() : DictionaryHits<?>)
					}
					 : DictionaryHits<?>)
				}
				 : DictionaryHits<?>) : DictionaryHits<?>)
			}
			 : DictionaryHits<?>)
		}
		 : DictionaryHits<?>) : DictionaryHits<?>)
	}
	 : DictionaryHits<?>) : DictionaryHits<?>)
 : (h : DictionaryHits<?>, hit : DictionaryHit<?>, maxHits : int) -> DictionaryHits<?>);
