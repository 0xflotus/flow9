import maybe;

	Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
		TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
		TreeEmpty : ();


native lookupTree : (tree : Tree<?, ??>, key : ?) -> Maybe<??> = Native.fast_lookupTree;

lookupTreeDef : (x : Tree<?, ??>, key : ?, defaultValue : ??) -> ??;

lookupTreeDef(x, key, defaultValue) {
	either(lookupTree(x,key), defaultValue);
}

----------

lookupTreeDef = (\x:Tree<?, ??>, key:?, defaultValue:?? ->
	((either : (m : Maybe<??>, alternative : ??) -> ??)(((lookupTree : (tree : Tree<?, ??>, key : ?) -> Maybe<??>)((x : Tree<?, ??>), (key : ?)) : Maybe<??>), (defaultValue : ??)) : ??)
 : (x : Tree<?, ??>, key : ?, defaultValue : ??) -> ??);
