	Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

find(a : [?], fn : (?) -> bool) -> Maybe<?> {
	None();
}

	either : (m: Maybe<?>, alternative: ?) -> ?;
either(m, alternative) {
	switch (m : Maybe) {
		None(): alternative;
		Some(v): v;
	}
}



	DbField ::= DbIntField, DbDoubleField, DbStringField, DbNullField;
		DbIntField(name : string, value : int);
		DbDoubleField(name : string, value : double);
		DbStringField(name : string, value : string);
		// It turns out that the haXe database wrapper can not return null values. These fields are simply absent.
		// If you use getFieldValueDb below, it will work.
		DbNullField(name : string); 

	getFieldValueDb(result : [DbField], field : string) -> DbField;


getFieldValueDb(result, field) {
	r = find(result, \r -> r.name == field);
	either(r, DbNullField(field));
}

----------

either = (\m:Maybe<?>, alternative:? ->
	(switch (m : Maybe<?>) {
		None(): {
			(alternative : ?)
		}
		Some(v): {
			(v : ? = ((m : Some<?>).value : ?);
			(v : ?) : ?)
		}
	} : ?)
 : (m : Maybe<?>, alternative : ?) -> ?);

find = (\a:[?], fn:(?) -> bool ->
	(None() : None<?>)
 : (a : [?], fn : (?) -> bool) -> None<?>);

getFieldValueDb = (\result:[DbField], field:string ->
	(r : Maybe<DbField> = ((find : (a : [DbField], fn : (DbField) -> bool) -> Maybe<DbField>)((result : [DbField]), (\r:DbField ->
		((((r : DbField).name : string) == (field : string)) : bool)
	 : (r : DbField) -> bool)) : Maybe<DbField>);
	({
		((either : (m : Maybe<DbField>, alternative : DbField) -> DbField)((r : Maybe<DbField>), (DbNullField((field : string)) : DbNullField)) : DbField)
	}
	 : DbField) : DbField)
 : (result : [DbField], field : string) -> DbField);
