import stylestructs;
import ds/array;

// bar = debugtyping;

foo() {
	strokeLineGradient : ref Maybe<StrokeLineGradient> = ref None();
	switch (^strokeLineGradient : Maybe) {
		Some(sg): {
			colors = map(sg.points, \c -> c.color);
			alphas = map(sg.points, \c -> c.alpha);
			offsets = map(sg.points, \c -> c.offset);
		}
		None() : {}
	}
}

----------

foo = (\ ->
	(strokeLineGradient : ref Maybe<StrokeLineGradient> = (ref (None() : None<StrokeLineGradient>) : ref None<StrokeLineGradient>);
	({
		(gsymswitch0 : Maybe<StrokeLineGradient> = (^(strokeLineGradient : ref Maybe<StrokeLineGradient>) : Maybe<StrokeLineGradient>);
		({
			(switch (gsymswitch0 : Maybe<StrokeLineGradient>) {
				Some(sg): {
					(sg : StrokeLineGradient = ((gsymswitch0 : Some<StrokeLineGradient>).value : StrokeLineGradient);
					(colors : [int] = ((map : ([GradientPoint], (GradientPoint) -> int) -> [int])(((sg : StrokeLineGradient).points : [GradientPoint]), (\c:GradientPoint ->
						((c : GradientPoint).color : int)
					 : (c : GradientPoint) -> int)) : [int]);
					({
						(alphas : [double] = ((map : ([GradientPoint], (GradientPoint) -> double) -> [double])(((sg : StrokeLineGradient).points : [GradientPoint]), (\c:GradientPoint ->
							((c : GradientPoint).alpha : double)
						 : (c : GradientPoint) -> double)) : [double]);
						({
							(offsets : [double] = ((map : ([GradientPoint], (GradientPoint) -> double) -> [double])(((sg : StrokeLineGradient).points : [GradientPoint]), (\c:GradientPoint ->
								((c : GradientPoint).offset : double)
							 : (c : GradientPoint) -> double)) : [double]);
							({

							}
							 : void) : void)
						}
						 : void) : void)
					}
					 : void) : void) : void)
				}
				None(): {
					({} : void)
				}
			} : void)
		}
		 : void) : void)
	}
	 : void) : void)
 : () -> void);
