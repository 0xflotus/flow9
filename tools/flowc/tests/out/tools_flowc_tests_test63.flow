Behaviour ::= ConstBehaviour, DynamicBehaviour;

// The runtime representation of a behaviour
DynamicBehaviour();
ConstBehaviour();

nextDistinct(d : DynamicBehaviour) -> void {
}

Disposable(value : ?);

// a = debugtyping;
distinctUntilChangedu() -> Disposable<Behaviour> {
	provider = DynamicBehaviour();
	nextDistinct(provider);
	Disposable(provider)
}

----------

nextDistinct = (\d:DynamicBehaviour ->
	({} : void)
 : (d : DynamicBehaviour) -> void);

distinctUntilChangedu = (\ ->
	(provider : DynamicBehaviour = (DynamicBehaviour() : DynamicBehaviour);
	({
		((nextDistinct : (d : DynamicBehaviour) -> void)((provider : DynamicBehaviour)) : void);
		(Disposable((provider : DynamicBehaviour)) : Disposable<DynamicBehaviour>)
	}
	 : Disposable<DynamicBehaviour>) : Disposable<DynamicBehaviour>)
 : () -> Disposable<DynamicBehaviour>);
