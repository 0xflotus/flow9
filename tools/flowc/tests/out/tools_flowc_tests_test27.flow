	Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

native lookupTree : (tree : Tree<?, ??>, key : ?) -> Maybe<??> = Native.fast_lookupTree;

Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
	TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
	TreeEmpty : ();


native length : ([?]) -> int = Native.length;

findi : (a : [?], fn : (?) -> bool) -> Maybe<int>;

findiex(a, fn, i) { //findi'
	if (i >= length(a)) None()
	else if (fn(a[i])) Some(i)
	else findiex(a, fn, i + 1);
}

findi(a, fn) {
	findiex(a, fn, 0)
}

substituteConditions(lines : [string], key2value : Tree<string, string>) -> string {
	ifLineNumberM = findi(lines, \line -> false);
	switch (ifLineNumberM) {
		Some(ifLineNumber): {
			valueM = lookupTree(key2value, "");
			switch (valueM) {
				Some(value): "";
				None(): "";
			}
		}
		None(): "";
	}
}


----------

findiex = (\a:[?], fn:(?) -> bool, i:int ->
	(if ((((i : int) >= ((length : ([?]) -> int)((a : [?])) : int)) : bool)) {
		(None() : None<int>)
	} else {
		(if (((fn : (?) -> bool)(((a : [?])[(i : int)] : ?)) : bool)) {
			(Some((i : int)) : Some<int>)
		} else {
			((findiex : (a : [?], fn : (?) -> bool, i : int) -> Maybe<int>)((a : [?]), (fn : (?) -> bool), (((i : int) + (1 : int)) : int)) : Maybe<int>)
		}
		 : Maybe<int>)
	}
	 : Maybe<int>)
 : (a : [?], fn : (?) -> bool, i : int) -> Maybe<int>);

findi = (\a:[?], fn:(?) -> bool ->
	((findiex : (a : [?], fn : (?) -> bool, i : int) -> Maybe<int>)((a : [?]), (fn : (?) -> bool), (0 : int)) : Maybe<int>)
 : (a : [?], fn : (?) -> bool) -> Maybe<int>);

substituteConditions = (\lines:[string], key2value:Tree<string, string> ->
	(ifLineNumberM : Maybe<int> = ((findi : (a : [string], fn : (string) -> bool) -> Maybe<int>)((lines : [string]), (\line:string ->
		(false : bool)
	 : (line : string) -> bool)) : Maybe<int>);
	({
		(switch (ifLineNumberM : Maybe<int>) {
			Some(ifLineNumber): {
				(ifLineNumber : int = ((ifLineNumberM : Some<int>).value : int);
				(valueM : Maybe<string> = ((lookupTree : (tree : Tree<string, string>, key : string) -> Maybe<string>)((key2value : Tree<string, string>), ("" : string)) : Maybe<string>);
				({
					(switch (valueM : Maybe<string>) {
						Some(value): {
							(value : string = ((valueM : Some<string>).value : string);
							("" : string) : string)
						}
						None(): {
							("" : string)
						}
					} : string)
				}
				 : string) : string) : string)
			}
			None(): {
				("" : string)
			}
		} : string)
	}
	 : string) : string)
 : (lines : [string], key2value : Tree<string, string>) -> string);
