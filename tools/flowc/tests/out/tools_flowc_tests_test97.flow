import tools/flowc/fcmodule;

livestructs(toplevel) {
	proceed = \lambdaM : Maybe<FcExp>, acc -> acc;
	fold(toplevel, makeSet(), \acc, fd -> {
		switch (fd) {
			FcFunctionDec(name, lambda, declType, declInfo, info):
				proceed(lambda, acc);
			FcGlobalVar(name, value, declInfo, bodyInfo):
				proceed(value, acc);
			default: acc;
		}
	})
}

----------

livestructs = (\toplevel:[FcDeclaration] ->
	(proceed : (Maybe<FcExp>, Set<?>) -> Set<?> = (\lambdaM:Maybe<FcExp>, acc:Set<?> ->
		(acc : Set<?>)
	 : (lambdaM : Maybe<FcExp>, acc : Set<?>) -> Set<?>);
	({
		((fold : (xs : [FcDeclaration], init : Set<?>, fn : (Set<?>, FcDeclaration) -> Set<?>) -> Set<?>)((toplevel : [FcDeclaration]), ((makeSet : () -> Set<?>)() : Set<?>), (\acc:Set<?>, fd:FcDeclaration ->
			(switch (fd : FcDeclaration) {
				FcFunctionDec(name,lambda,declType,declInfo,info): {
					(name : string = ((fd : FcFunctionDec).name : string);
					(lambda : Maybe<FcLambda> = ((fd : FcFunctionDec).lambda : Maybe<FcLambda>);
					(declType : FcTypeFunction2 = ((fd : FcFunctionDec).declType : FcTypeFunction2);
					(declInfo : FcInfo = ((fd : FcFunctionDec).declInfo : FcInfo);
					(info : FcInfo = ((fd : FcFunctionDec).defiInfo : FcInfo);
					((proceed : (Maybe<FcExp>, Set<?>) -> Set<?>)((lambda : Maybe<FcLambda>), (acc : Set<?>)) : Set<?>) : Set<?>) : Set<?>) : Set<?>) : Set<?>) : Set<?>)
				}
				FcGlobalVar(name,value,declInfo,bodyInfo): {
					(name : string = ((fd : FcGlobalVar).name : string);
					(value : Maybe<FcExp> = ((fd : FcGlobalVar).value : Maybe<FcExp>);
					(declInfo : FcInfo = ((fd : FcGlobalVar).declInfo : FcInfo);
					(bodyInfo : FcInfo = ((fd : FcGlobalVar).bodyInfo : FcInfo);
					((proceed : (Maybe<FcExp>, Set<?>) -> Set<?>)((value : Maybe<FcExp>), (acc : Set<?>)) : Set<?>) : Set<?>) : Set<?>) : Set<?>) : Set<?>)
				}
				default(): {
					(acc : Set<?>)
				}
			} : Set<?>)
		 : (acc : Set<?>, fd : FcDeclaration) -> Set<?>)) : Set<?>)
	}
	 : Set<?>) : Set<?>)
 : (toplevel : [FcDeclaration]) -> Set<?>);
