Pair(first : ?, second : ??);

	Json ::= JsonObject, JsonArray, JsonNull, JsonBool, JsonString, JsonDouble;
		JsonObject(members : [Pair<string, Json>]);
		JsonArray(value : [Json]);
		JsonBool(v : bool);
		JsonString(s : string);
		JsonDouble(value : double);
		JsonNull();


doParseJson(json : string, start : int) -> Pair<Json, int> {
	char = "";
	if (true) {
		// Eat white space
		doParseJson(json, start+1);
	} else {
		if (char == "[") {
			Pair(JsonArray([]), 0);
		} else if (char == "{") {
			Pair(JsonObject([]), 0);
		} else if (char == "\"") {
			Pair(JsonString(""), 0);
		} else if (char == "n") {
			Pair(JsonNull(), start+4);
		} else if (char == "t") {
			Pair(JsonBool(true), start+4);
		} else if (char == "f") {
			Pair(JsonBool(false), start+5);
		} else {
			Pair(JsonDouble(0.0), 0);
		}
	}
}


----------

doParseJson = (\json:string, start:int ->
	(char : string = ("" : string);
	({
		(if ((true : bool)) {
			((doParseJson : (json : string, start : int) -> Pair<Json, int>)((json : string), (((start : int) + (1 : int)) : int)) : Pair<Json, int>)
		} else {
			(if ((((char : string) == ("[" : string)) : bool)) {
				(Pair((JsonArray(([] : [Json])) : JsonArray), (0 : int)) : Pair<Json, int>)
			} else {
				(if ((((char : string) == ("{" : string)) : bool)) {
					(Pair((JsonObject(([] : [Pair<string, Json>])) : JsonObject), (0 : int)) : Pair<Json, int>)
				} else {
					(if ((((char : string) == ("\"" : string)) : bool)) {
						(Pair((JsonString(("" : string)) : JsonString), (0 : int)) : Pair<Json, int>)
					} else {
						(if ((((char : string) == ("n" : string)) : bool)) {
							(Pair((JsonNull() : JsonNull), (((start : int) + (4 : int)) : int)) : Pair<Json, int>)
						} else {
							(if ((((char : string) == ("t" : string)) : bool)) {
								(Pair((JsonBool((true : bool)) : JsonBool), (((start : int) + (4 : int)) : int)) : Pair<Json, int>)
							} else {
								(if ((((char : string) == ("f" : string)) : bool)) {
									(Pair((JsonBool((false : bool)) : JsonBool), (((start : int) + (5 : int)) : int)) : Pair<Json, int>)
								} else {
									(Pair((JsonDouble((0.0 : double)) : JsonDouble), (0 : int)) : Pair<Json, int>)
								}
								 : Pair<Json, int>)
							}
							 : Pair<Json, int>)
						}
						 : Pair<Json, int>)
					}
					 : Pair<Json, int>)
				}
				 : Pair<Json, int>)
			}
			 : Pair<Json, int>)
		}
		 : Pair<Json, int>)
	}
	 : Pair<Json, int>) : Pair<Json, int>)
 : (json : string, start : int) -> Pair<Json, int>);
