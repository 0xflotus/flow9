Maybe<?> ::= None, Some<?>;
None();
Some(value : ?);

// a = debugtyping2;

either(m: Maybe<?>, alternative: ?) -> ? {
	switch (m : Maybe) {
		None(): alternative;
		Some(v): v;
	}
}


maybeBind(m, f)
    switch (m : Maybe) {
        None(): None();
        Some(v): f(v);
    }

maybeMap(m, f) {
	switch (m : Maybe) {
		None(): None();
		Some(v): Some(f(v));
	}
}


----------

either = (\m:Maybe<?>, alternative:? ->
	(switch (m : Maybe<?>) {
		None(): {
			(alternative : ?)
		}
		Some(v): {
			(v : ? = ((m : Some<?>).value : ?);
			(v : ?) : ?)
		}
	} : ?)
 : (m : Maybe<?>, alternative : ?) -> ?);

maybeBind = (\m:Maybe<?>, f:(?) -> None<??> ->
	(switch (m : Maybe<?>) {
		None(): {
			(None() : None<??>)
		}
		Some(v): {
			(v : ? = ((m : Some<?>).value : ?);
			((f : (?) -> None<??>)((v : ?)) : None<??>) : None<??>)
		}
	} : None<??>)
 : (m : Maybe<?>, f : (?) -> None<??>) -> None<??>);

maybeMap = (\m:Maybe<?>, f:(?) -> ?? ->
	(switch (m : Maybe<?>) {
		None(): {
			(None() : None<??>)
		}
		Some(v): {
			(v : ? = ((m : Some<?>).value : ?);
			(Some(((f : (?) -> ??)((v : ?)) : ??)) : Some<??>) : Some<??>)
		}
	} : Maybe<??>)
 : (m : Maybe<?>, f : (?) -> ??) -> Maybe<??>);
