List<?> ::= EmptyList, Cons<?>;
	EmptyList();
	// Add head to the list "tail"
	Cons(head : ?, tail : List<?>);

concatToNonEmptyList(l1 : List<?>, l2 : List<?>) -> List<?> {
	switch (l1 : List<?>) {
		EmptyList(): l2;
		Cons(h, t): {
			concatToNonEmptyList(t, Cons(h, l2));
		}
	}
}

----------

concatToNonEmptyList = (\l1:List<?>, l2:List<?> ->
	(switch (l1 : List<?>) {
		EmptyList(): {
			(l2 : List<?>)
		}
		Cons(h,t): {
			(h : ? = ((l1 : Cons<?>).head : ?);
			(t : List<?> = ((l1 : Cons<?>).tail : List<?>);
			((concatToNonEmptyList : (l1 : List<?>, l2 : List<?>) -> List<?>)((t : List<?>), (Cons((h : ?), (l2 : List<?>)) : Cons<?>)) : List<?>) : List<?>) : List<?>)
		}
	} : List<?>)
 : (l1 : List<?>, l2 : List<?>) -> List<?>);
