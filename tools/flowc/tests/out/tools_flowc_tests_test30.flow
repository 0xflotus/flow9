native setTree : (tree : Tree<?, ??>, key : ?, value : ??) -> Tree<?, ??> = Native.fast_setTree;

Maybe<?> ::= None, Some<?>;
None();
Some(value : ?);


Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
	TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
	TreeEmpty : ();

FcExp ::= FcLambda, FcBool;
		FcLambda(args: [FcFunArg], body: FcExp, info: FcInfo);
	FcBool(b: bool, info : FcInfo);

FcType ::= FcTypeBool;
	FcTypeBool();

		FcFunArg(name : string, type : FcType);


FcInfo(type : ref Maybe<FcType>, start : int, end : int);

validateFcExpInfos(infos : Tree<FcInfo, FcExp>, c : FcExp) -> Tree<FcInfo, FcExp> {
	infos1 = setTree(infos, c.info, c);
	switch (c) {
		FcLambda(args, b, li): {
			switch (^(li.type)) {
				None(): {}
				Some(ft): {}
			}
			validateFcExpInfos(infos1, b);
		}
		default: infos;
	}
}

----------

validateFcExpInfos = (\infos:Tree<FcInfo, FcExp>, c:FcExp ->
	(infos1 : Tree<FcInfo, FcExp> = ((setTree : (tree : Tree<FcInfo, FcExp>, key : FcInfo, value : FcExp) -> Tree<FcInfo, FcExp>)((infos : Tree<FcInfo, FcExp>), ((c : FcExp).info : FcInfo), (c : FcExp)) : Tree<FcInfo, FcExp>);
	({
		(switch (c : FcExp) {
			FcLambda(args,b,li): {
				(args : [FcFunArg] = ((c : FcLambda).args : [FcFunArg]);
				(b : FcExp = ((c : FcLambda).body : FcExp);
				(li : FcInfo = ((c : FcLambda).info : FcInfo);
				(gsymswitch0 : Maybe<FcType> = (^((li : FcInfo).type : ref Maybe<FcType>) : Maybe<FcType>);
				({
					(switch (gsymswitch0 : Maybe<FcType>) {
						None(): {
							({} : void)
						}
						Some(ft): {
							(ft : FcType = ((gsymswitch0 : Some<FcType>).value : FcType);
							({} : void) : void)
						}
					} : void);
					((validateFcExpInfos : (infos : Tree<FcInfo, FcExp>, c : FcExp) -> Tree<FcInfo, FcExp>)((infos1 : Tree<FcInfo, FcExp>), (b : FcExp)) : Tree<FcInfo, FcExp>)
				}
				 : Tree<FcInfo, FcExp>) : Tree<FcInfo, FcExp>) : Tree<FcInfo, FcExp>) : Tree<FcInfo, FcExp>) : Tree<FcInfo, FcExp>)
			}
			default(): {
				(infos : Tree<FcInfo, FcExp>)
			}
		} : Tree<FcInfo, FcExp>)
	}
	 : Tree<FcInfo, FcExp>) : Tree<FcInfo, FcExp>)
 : (infos : Tree<FcInfo, FcExp>, c : FcExp) -> Tree<FcInfo, FcExp>);
