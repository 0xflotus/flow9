import sys/sound;
	// Control voice play
	VoiceOption ::= SoundComplete, SoundVolume, PauseSound,
					SpeechEnabled, SpeechVoiceEnabled, SpeechControlVisibility,
					SpeechProgress, NoSoundHandler, ResetSpeech;
		//SoundComplete : (done : () -> void);
		//SoundVolume : (volume : Behaviour<double>);
		//PauseSound : (isPaused: Behaviour<bool>);

		SpeechEnabled : (
			speechEnabled : Behaviour<bool>, // global soundEnabled
		);
		SpeechVoiceEnabled : (
			speechVoiceEnabled : Behaviour<bool>, // global soundEnabled
		);
		SpeechControlVisibility : (
			speechControlVisibility : DynamicBehaviour<int> // global soundControlVisibility
		);
		SpeechProgress: (
			speechProgress: DynamicBehaviour<double>	// what percent of voices were played so far
		);
		NoSoundHandler: (
			handler: () -> void	// callback to call when there is no voice-over recorded for the current phrase
		);
		ResetSpeech: (
			resetSpeech : bool
		);


VoiceLoadOptions ::= VoiceLoadOptionUrlMapper;
	VoiceLoadOptionUrlMapper(
		handler: ( originalUrl: string, onContinue: (mappedUrl: string) -> void, onError: (msg: string) -> void) -> void
	);

	Voice ::= NoVoice, SimpleVoice, MultiVoice, NumberVoice;
		NoVoice : ();
		// plain voice
		SimpleVoice : (text : string);
		// number -
		NumberVoice : (number : string);
		MultiVoice : (voices : [Voice]);

loadVoiceExt(
	voice : Voice,
	soundPath : string,
	options: [VoiceLoadOptions],
	onLoadResult : (hasSound : bool, soundLength: double) -> void, // reports if there were any sound files loaded and the length of the sound
	) -> (([VoiceOption]) -> (() -> void)) {

	switch(voice : Voice) {
		default: {
			\opts : [VoiceOption] -> nop
		};
		MultiVoice(voices) : {
			soundsP = map(voices, \subsound -> {
				hasSound : DynamicBehaviour<Maybe<bool>> = make(None()); // not loaded yet
				soundLength = make(0.0);
				sound = loadVoiceExt(subsound, soundPath, options, \result, len -> {
					next(soundLength, len); next(hasSound, Some(result));
				});
				Triple(hasSound, sound, soundLength)
			});

			hasSounds = map(soundsP, firstOfTriple);
			sounds : [([VoiceOption]) -> (() -> void)] = map(soundsP, secondOfTriple);

			//onLoadResult(true) if loaded any sound, onLoadResult(false) - if failed all of them
			unsResult = ref nop;

			onLoadResult(true, dsum(map(soundsP, \t -> getValue(t.third)))); // some sounds were loaded successfully

			\opts : [VoiceOption] -> {
				\ -> {
				}
			}
		};
	}
}


----------

loadVoiceExt = (\voice:Voice, soundPath:string, options:[VoiceLoadOptions], onLoadResult:(hasSound : bool, soundLength : double) -> void ->
	(switch (voice : Voice) {
		default(): {
			(\opts:[VoiceOption] ->
				(nop : () -> void)
			 : (opts : [VoiceOption]) -> () -> void)
		}
		MultiVoice(voices): {
			(voices : [Voice] = ((voice : MultiVoice).voices : [Voice]);
			(soundsP : [Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>] = ((map : ([Voice], (Voice) -> Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>) -> [Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>])((voices : [Voice]), (\subsound:Voice ->
				(hasSound : DynamicBehaviour<Maybe<bool>> = ((make : (value : None<bool>) -> DynamicBehaviour<None<bool>>)((None() : None<bool>)) : DynamicBehaviour<None<bool>>);
				({
					(soundLength : DynamicBehaviour<double> = ((make : (value : double) -> DynamicBehaviour<double>)((0.0 : double)) : DynamicBehaviour<double>);
					({
						(sound : ([VoiceOption]) -> () -> void = ((loadVoiceExt : (voice : Voice, soundPath : string, options : [VoiceLoadOptions], onLoadResult : (hasSound : bool, soundLength : double) -> void) -> ([VoiceOption]) -> () -> void)((subsound : Voice), (soundPath : string), (options : [VoiceLoadOptions]), (\result:bool, len:double ->
							({
								((next : (behaviour : DynamicBehaviour<double>, value : double) -> void)((soundLength : DynamicBehaviour<double>), (len : double)) : void);
								((next : (behaviour : DynamicBehaviour<Maybe<bool>>, value : Maybe<bool>) -> void)((hasSound : DynamicBehaviour<Maybe<bool>>), (Some((result : bool)) : Some<bool>)) : void)
							}
							 : void)
						 : (result : bool, len : double) -> void)) : ([VoiceOption]) -> () -> void);
						({
							(Triple((hasSound : DynamicBehaviour<Maybe<bool>>), (sound : ([VoiceOption]) -> () -> void), (soundLength : DynamicBehaviour<double>)) : Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>)
						}
						 : Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>) : Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>)
					}
					 : Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>) : Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>)
				}
				 : Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>) : Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>)
			 : (subsound : Voice) -> Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>)) : [Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>]);
			({
				(hasSounds : [DynamicBehaviour<Maybe<bool>>] = ((map : ([Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>], (Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>) -> DynamicBehaviour<Maybe<bool>>) -> [DynamicBehaviour<Maybe<bool>>])((soundsP : [Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>]), (firstOfTriple : (t : Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>) -> DynamicBehaviour<Maybe<bool>>)) : [DynamicBehaviour<Maybe<bool>>]);
				({
					(sounds : [([VoiceOption]) -> () -> void] = ((map : ([Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>], (Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>) -> ([VoiceOption]) -> () -> void) -> [([VoiceOption]) -> () -> void])((soundsP : [Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>]), (secondOfTriple : (t : Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>) -> ([VoiceOption]) -> () -> void)) : [([VoiceOption]) -> () -> void]);
					({
						(unsResult : ref () -> void = (ref (nop : () -> void) : ref () -> void);
						({
							((onLoadResult : (hasSound : bool, soundLength : double) -> void)((true : bool), ((dsum : (l : [double]) -> double)(((map : ([Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>], (Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>) -> double) -> [double])((soundsP : [Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>]), (\t:Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>> ->
								((getValue : (behaviour : Behaviour<double>) -> double)(((t : Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>).third : DynamicBehaviour<double>)) : double)
							 : (t : Triple<DynamicBehaviour<Maybe<bool>>, ([VoiceOption]) -> () -> void, DynamicBehaviour<double>>) -> double)) : [double])) : double)) : void);
							(\opts:[VoiceOption] ->
								(\ ->
									({} : void)
								 : () -> void)
							 : (opts : [VoiceOption]) -> () -> void)
						}
						 : (opts : [VoiceOption]) -> () -> void) : (opts : [VoiceOption]) -> () -> void)
					}
					 : (opts : [VoiceOption]) -> () -> void) : (opts : [VoiceOption]) -> () -> void)
				}
				 : (opts : [VoiceOption]) -> () -> void) : (opts : [VoiceOption]) -> () -> void)
			}
			 : (opts : [VoiceOption]) -> () -> void) : (opts : [VoiceOption]) -> () -> void) : (opts : [VoiceOption]) -> () -> void)
		}
	} : ([VoiceOption]) -> () -> void)
 : (voice : Voice, soundPath : string, options : [VoiceLoadOptions], onLoadResult : (hasSound : bool, soundLength : double) -> void) -> ([VoiceOption]) -> () -> void);
