import tools/flowc/fcexp;

// Note: the C++ runner implements some functions as natives and relies on the layout of this:
Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
	TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
	TreeEmpty : ();

lookupTree(tree : Tree<?, ??>, key : ?) -> Maybe<??> {
	None();
}


FcDeclaration ::= FcFunctionDec, FcGlobalVar, FcNativeDec;

FcFunctionDec(
	name: string,
	lambda: Maybe<FcLambda>,
	info : FcInfo
);

FcGlobalVar(
	name: string,
	value: Maybe<FcExp>,
	declInfo : FcInfo,
	bodyInfo : FcInfo
);

FcNativeDec(
	name: string, io: bool,
	type : FcType,
	nativeName : string,
	flowfallback: Maybe<FcFunctionDec>,
	info : FcInfo
);

typecheckFcModule(functions : Tree<string, FcFunctionDec>) -> void {
	gfn = lookupTree(functions, "");
	switch (gfn) {
		None(): {
		}
		Some(fn): {
			switch (fn.lambda) {
				None(): {
				}
				Some(fnlam): {
					fnlam.info;
					prettyFcExp(fnlam);
					fnlam.body;
					{}
				}
			}
		}
	}
}

prettyFcExp(e : FcExp) -> string {
	""
}

----------

lookupTree = (\tree:Tree<?, ??>, key:? ->
	(None() : None<??>)
 : (tree : Tree<?, ??>, key : ?) -> None<??>);

prettyFcExp = (\e:FcExp ->
	("" : string)
 : (e : FcExp) -> string);

typecheckFcModule = (\functions:Tree<string, FcFunctionDec> ->
	(gfn : Maybe<FcFunctionDec> = ((lookupTree : (tree : Tree<string, FcFunctionDec>, key : string) -> Maybe<FcFunctionDec>)((functions : Tree<string, FcFunctionDec>), ("" : string)) : Maybe<FcFunctionDec>);
	({
		(switch (gfn : Maybe<FcFunctionDec>) {
			None(): {
				({} : void)
			}
			Some(fn): {
				(fn : FcFunctionDec = ((gfn : Some<FcFunctionDec>).value : FcFunctionDec);
				(gsymswitch0 : Maybe<FcLambda> = ((fn : FcFunctionDec).lambda : Maybe<FcLambda>);
				({
					(switch (gsymswitch0 : Maybe<FcLambda>) {
						None(): {
							({} : void)
						}
						Some(fnlam): {
							(fnlam : FcLambda = ((gsymswitch0 : Some<FcLambda>).value : FcLambda);
							({
								((fnlam : FcLambda).info : FcInfo);
								((prettyFcExp : (e : FcExp) -> string)((fnlam : FcLambda)) : string);
								((fnlam : FcLambda).body : FcExp);
								({} : void)
							}
							 : void) : void)
						}
					} : void)
				}
				 : void) : void) : void)
			}
		} : void)
	}
	 : void) : void)
 : (functions : Tree<string, FcFunctionDec>) -> void);
