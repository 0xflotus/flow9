FiStructOrUnion ::= FiTypeStruct, FiTypeUnion;
	FiTypeStruct(start : int);
	FiTypeUnion(start : int);

Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

idfn(tree : Maybe<?>) -> Maybe<?> {
	tree
}

FiGlobalNames(
	struct : Maybe<FiTypeStruct>
);


nameAndStructOrUnion(strorunion : FiStructOrUnion) -> void {
}

findFcProgramDefinition(prog : FiGlobalNames) -> void {
	switch (idfn(prog.struct)) {
		Some(struct): {
			struct.start;
			nameAndStructOrUnion(struct);
		}
		None(): {}
	}
}

----------

idfn = (\tree:Maybe<?> ->
	(tree : Maybe<?>)
 : (tree : Maybe<?>) -> Maybe<?>);

nameAndStructOrUnion = (\strorunion:FiStructOrUnion ->
	({} : void)
 : (strorunion : FiStructOrUnion) -> void);

findFcProgramDefinition = (\prog:FiGlobalNames ->
	(gsymswitch0 : Maybe<FiTypeStruct> = ((idfn : (tree : Maybe<FiTypeStruct>) -> Maybe<FiTypeStruct>)(((prog : FiGlobalNames).struct : Maybe<FiTypeStruct>)) : Maybe<FiTypeStruct>);
	({
		(switch (gsymswitch0 : Maybe<FiTypeStruct>) {
			Some(struct): {
				(struct : FiStructOrUnion = ((gsymswitch0 : Some<FiStructOrUnion>).value : FiStructOrUnion);
				({
					((struct : FiStructOrUnion).start : int);
					((nameAndStructOrUnion : (strorunion : FiStructOrUnion) -> void)((struct : FiStructOrUnion)) : void)
				}
				 : void) : void)
			}
			None(): {
				({} : void)
			}
		} : void)
	}
	 : void) : void)
 : (prog : FiGlobalNames) -> void);
