Pair(first : ?, second : ??);

FailStateResult<?, ??> ::= Pair<?, ??>, Failed;

    FailStateOk(state : ?, value : ??);

FailState(transform : (state : ?)->FailStateResult<?, ??>);

   	Failed(msg : string);

makeFailState(s : FailState, state) {
    r = s.transform(state);
    switch (r) {
        Pair(state1, value1): {
            r
        };
        Failed(__): r;
    };
}


----------

makeFailState = (\s:FailState<?, ??>, state:? ->
	(r : FailStateResult<?, ??> = (((s : FailState<?, ??>).transform : (?) -> FailStateResult<?, ??>)((state : ?)) : FailStateResult<?, ??>);
	({
		(switch (r : FailStateResult<?, ??>) {
			Pair(state1,value1): {
				(state1 : ? = ((r : Pair<?, ??>).first : ?);
				(value1 : ?? = ((r : Pair<?, ??>).second : ??);
				(r : Pair<?, ??>) : Pair<?, ??>) : Pair<?, ??>)
			}
			Failed(__): {
				(__ : string = ((r : Failed<?, ??>).msg : string);
				(r : Failed<?, ??>) : Failed<?, ??>)
			}
		} : FailStateResult<?, ??>)
	}
	 : FailStateResult<?, ??>) : FailStateResult<?, ??>)
 : (s : FailState<?, ??>, state : ?) -> FailStateResult<?, ??>);
