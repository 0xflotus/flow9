JsonObject(members : [Pair<string, JsonObject>]);
Pair(first : ?, second : ??);
Triple(first : ?, second : ??, third : ???);

native length : ([?]) -> int = Native.length;
native iteriUntil : ([?], (int, ?) -> bool) -> int = Native.iteriUntil;

mergeSort(a : [?], comparisonFn : (?, ?) -> int) -> [?] {
	a;
}

isJsonEqual(first : JsonObject, second : JsonObject) -> bool {
	obj = first.members;
	objs = second.members;
	compareFn = \x : Pair, y : Pair -> if (x.first < y.first) -1 else if (x.first == y.first) 0 else 1;
	sortedObjs = mergeSort(objs, compareFn);
	iteriUntil(obj, 
		\id, val -> val.first != sortedObjs[id].first || !isJsonEqual(val.second, sortedObjs[id].second)
	) == length(obj);
}

----------

mergeSort = (\a:[?], comparisonFn:(?, ?) -> int ->
	(a : [?])
 : (a : [?], comparisonFn : (?, ?) -> int) -> [?]);

isJsonEqual = (\first:JsonObject, second:JsonObject ->
	(obj : [Pair<string, JsonObject>] = ((first : JsonObject).members : [Pair<string, JsonObject>]);
	({
		(objs : [Pair<string, JsonObject>] = ((second : JsonObject).members : [Pair<string, JsonObject>]);
		({
			(compareFn : (Pair<string, JsonObject>, Pair<string, JsonObject>) -> int = (\x:Pair<string, JsonObject>, y:Pair<string, JsonObject> ->
				(if (((((x : Pair<string, JsonObject>).first : string) < ((y : Pair<string, JsonObject>).first : string)) : bool)) {
					(-1 : int)
				} else {
					(if (((((x : Pair<string, JsonObject>).first : string) == ((y : Pair<string, JsonObject>).first : string)) : bool)) {
						(0 : int)
					} else {
						(1 : int)
					}
					 : int)
				}
				 : int)
			 : (x : Pair<string, JsonObject>, y : Pair<string, JsonObject>) -> int);
			({
				(sortedObjs : [Pair<string, JsonObject>] = ((mergeSort : (a : [Pair<string, JsonObject>], comparisonFn : (Pair<string, JsonObject>, Pair<string, JsonObject>) -> int) -> [Pair<string, JsonObject>])((objs : [Pair<string, JsonObject>]), (compareFn : (Pair<string, JsonObject>, Pair<string, JsonObject>) -> int)) : [Pair<string, JsonObject>]);
				({
					((((iteriUntil : ([Pair<string, JsonObject>], (int, Pair<string, JsonObject>) -> bool) -> int)((obj : [Pair<string, JsonObject>]), (\id:int, val:Pair<string, JsonObject> ->
						((((((val : Pair<string, JsonObject>).first : string) != (((sortedObjs : [Pair<string, JsonObject>])[(id : int)] : Pair<string, JsonObject>).first : string)) : bool) || (!((isJsonEqual : (first : JsonObject, second : JsonObject) -> bool)(((val : Pair<string, JsonObject>).second : JsonObject), (((sortedObjs : [Pair<string, JsonObject>])[(id : int)] : Pair<string, JsonObject>).second : JsonObject)) : bool) : bool)) : bool)
					 : (id : int, val : Pair<string, JsonObject>) -> bool)) : int) == ((length : ([Pair<string, JsonObject>]) -> int)((obj : [Pair<string, JsonObject>])) : int)) : bool)
				}
				 : bool) : bool)
			}
			 : bool) : bool)
		}
		 : bool) : bool)
	}
	 : bool) : bool)
 : (first : JsonObject, second : JsonObject) -> bool);
