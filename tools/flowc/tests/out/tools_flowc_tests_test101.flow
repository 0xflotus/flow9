import tools/flowc/fcmodule;

foo(module) {
	gvar = lookupTree(module.globalVars, "");
	mexp : Maybe<FcExp> = switch (gvar) {
		None(): {
			gfn = lookupTree(module.functions, "");
			switch (gfn) {
				None(): None();
				Some(fn): fn.lambda;
			}
		}
		Some(gv): gv.value;
	}
	fv = mfreevars(mexp);
}

mfreevars(m : Maybe<FcExp>) -> Set<string> {
	makeSet();
}

----------

mfreevars = (\m:Maybe<FcExp> ->
	((makeSet : () -> Set<string>)() : Set<string>)
 : (m : Maybe<FcExp>) -> Set<string>);

foo = (\module:FcModule ->
	(gvar : Maybe<FcGlobalVar> = ((lookupTree : (tree : Tree<string, FcGlobalVar>, key : string) -> Maybe<FcGlobalVar>)(((module : FcModule).globalVars : Tree<string, FcGlobalVar>), ("" : string)) : Maybe<FcGlobalVar>);
	({
		(mexp : Maybe<FcExp> = (switch (gvar : Maybe<FcGlobalVar>) {
			None(): {
				(gfn : Maybe<FcFunctionDec> = ((lookupTree : (tree : Tree<string, FcFunctionDec>, key : string) -> Maybe<FcFunctionDec>)(((module : FcModule).functions : Tree<string, FcFunctionDec>), ("" : string)) : Maybe<FcFunctionDec>);
				({
					(switch (gfn : Maybe<FcFunctionDec>) {
						None(): {
							(None() : None<FcExp>)
						}
						Some(fn): {
							(fn : FcFunctionDec = ((gfn : Some<FcFunctionDec>).value : FcFunctionDec);
							((fn : FcFunctionDec).lambda : Maybe<FcLambda>) : Maybe<FcLambda>)
						}
					} : Maybe<FcLambda>)
				}
				 : Maybe<FcLambda>) : Maybe<FcLambda>)
			}
			Some(gv): {
				(gv : FcGlobalVar = ((gvar : Some<FcGlobalVar>).value : FcGlobalVar);
				((gv : FcGlobalVar).value : Maybe<FcExp>) : Maybe<FcExp>)
			}
		} : Maybe<FcExp>);
		({
			(fv : Set<string> = ((mfreevars : (m : Maybe<FcExp>) -> Set<string>)((mexp : Maybe<FcExp>)) : Set<string>);
			({

			}
			 : void) : void)
		}
		 : void) : void)
	}
	 : void) : void)
 : (module : FcModule) -> void);
