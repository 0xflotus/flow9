Pair(first : ?, second : ??);

Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

Behaviour<?> ::= ConstBehaviour<?>, DynamicBehaviour<?>;

	DynamicBehaviour(value : ref ?);
	ConstBehaviour : (constv : ?);
make(v : ?) -> DynamicBehaviour<?> {
	DynamicBehaviour(ref v);
}

const(v : ?) -> ConstBehaviour<?> {
	ConstBehaviour(v)
}

Point(x : double, y : double);

Form ::= Empty, Inspect, Mutable2, Constructor;

Empty : ();
Constructor : (form : Form, fn : () -> (() -> void));
Inspect : (inspectors : [Inspector], form : Form);
	Inspector ::= ITag;
	ITag(i : int);

/// An element in the design that can change
Mutable2 : (form : Behaviour<Form>);

zeroPoint = Point(0.0, 0.0);

findTaggedFormPositionB(form : Form, tag : int) -> Pair<Form, Behaviour<Maybe<Point>>> {
	switch (form : Form) {
		Inspect(inspectors, f): {
			if (true)
				Pair(form, const(Some(zeroPoint))) // found the tag
			else if (true)
				Pair(form, const(None())) // found blocker tag - stop traversing
			else {
				t = findTaggedFormPositionB(f, tag);
				Pair(
					Inspect(inspectors, t.first),
					t.second
				)
			}
		}

		Mutable2(bf): {
			formB = make(Empty());
			pointB = make(None());
			resForm = Constructor(
				Mutable2(formB),
				\ -> {
					\ -> {
					}
				}
			);
			Pair(resForm, pointB)
		}

		default: Pair(Empty(), const(None()));
	}
}

----------

const = (\v:? ->
	(ConstBehaviour((v : ?)) : ConstBehaviour<?>)
 : (v : ?) -> ConstBehaviour<?>);

make = (\v:? ->
	(DynamicBehaviour((ref (v : ?) : ref ?)) : DynamicBehaviour<?>)
 : (v : ?) -> DynamicBehaviour<?>);

zeroPoint = (Point((0.0 : double), (0.0 : double)) : Point);

findTaggedFormPositionB = (\form:Form, tag:int ->
	(switch (form : Form) {
		Inspect(inspectors,f): {
			(inspectors : [Inspector] = ((form : Inspect).inspectors : [Inspector]);
			(f : Form = ((form : Inspect).form : Form);
			(if ((true : bool)) {
				(Pair((form : Inspect), ((const : (v : Maybe<Point>) -> ConstBehaviour<Maybe<Point>>)((Some((zeroPoint : Point)) : Some<Point>)) : ConstBehaviour<Maybe<Point>>)) : Pair<Form, Behaviour<Maybe<Point>>>)
			} else {
				(if ((true : bool)) {
					(Pair((form : Inspect), ((const : (v : Maybe<Point>) -> ConstBehaviour<Maybe<Point>>)((None() : None<Point>)) : ConstBehaviour<Maybe<Point>>)) : Pair<Form, Behaviour<Maybe<Point>>>)
				} else {
					(t : Pair<Form, Behaviour<Maybe<Point>>> = ((findTaggedFormPositionB : (form : Form, tag : int) -> Pair<Form, Behaviour<Maybe<Point>>>)((f : Form), (tag : int)) : Pair<Form, Behaviour<Maybe<Point>>>);
					({
						(Pair((Inspect((inspectors : [Inspector]), ((t : Pair<Form, Behaviour<Maybe<Point>>>).first : Form)) : Inspect), ((t : Pair<Form, Behaviour<Maybe<Point>>>).second : Behaviour<Maybe<Point>>)) : Pair<Form, Behaviour<Maybe<Point>>>)
					}
					 : Pair<Form, Behaviour<Maybe<Point>>>) : Pair<Form, Behaviour<Maybe<Point>>>)
				}
				 : Pair<Form, Behaviour<Maybe<Point>>>)
			}
			 : Pair<Form, Behaviour<Maybe<Point>>>) : Pair<Form, Behaviour<Maybe<Point>>>) : Pair<Form, Behaviour<Maybe<Point>>>)
		}
		Mutable2(bf): {
			(bf : Behaviour<Form> = ((form : Mutable2).form : Behaviour<Form>);
			(formB : DynamicBehaviour<Empty> = ((make : (v : Empty) -> DynamicBehaviour<Empty>)((Empty() : Empty)) : DynamicBehaviour<Empty>);
			({
				(pointB : DynamicBehaviour<Maybe<Point>> = ((make : (v : Maybe<Point>) -> DynamicBehaviour<Maybe<Point>>)((None() : None<Point>)) : DynamicBehaviour<Maybe<Point>>);
				({
					(resForm : Constructor = (Constructor((Mutable2((formB : DynamicBehaviour<Empty>)) : Mutable2), (\ ->
						(\ ->
							({} : void)
						 : () -> void)
					 : () -> () -> void)) : Constructor);
					({
						(Pair((resForm : Constructor), (pointB : DynamicBehaviour<Maybe<Point>>)) : Pair<Form, Behaviour<Maybe<Point>>>)
					}
					 : Pair<Form, Behaviour<Maybe<Point>>>) : Pair<Form, Behaviour<Maybe<Point>>>)
				}
				 : Pair<Form, Behaviour<Maybe<Point>>>) : Pair<Form, Behaviour<Maybe<Point>>>)
			}
			 : Pair<Form, Behaviour<Maybe<Point>>>) : Pair<Form, Behaviour<Maybe<Point>>>) : Pair<Form, Behaviour<Maybe<Point>>>)
		}
		default(): {
			(Pair((Empty() : Empty), ((const : (v : Maybe<Point>) -> ConstBehaviour<Maybe<Point>>)((None() : None<Point>)) : ConstBehaviour<Maybe<Point>>)) : Pair<Form, Behaviour<Maybe<Point>>>)
		}
	} : Pair<Form, Behaviour<Maybe<Point>>>)
 : (form : Form, tag : int) -> Pair<Form, Behaviour<Maybe<Point>>>);
