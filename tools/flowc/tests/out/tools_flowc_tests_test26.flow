Pair(first : ?, second : ??);
Triple(first : ?, second : ??, third : ???);

	Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
		TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
		TreeEmpty : ();

makeTree() {
	TreeEmpty();
}

	Set : (tree : Tree<?, bool>);

	DependencyTracker(
		// What files depend on this file?
		dependsUpon : Tree<?, Set<?>>,

		// What files does this file depend on?
		fileRequires : Tree<?, Set<?>>,

		// What files have all dependencies fulfilled?
		nonDependent : Set<?>,
	);

makeSet() -> Set<?> {
	Set(makeTree())
}

extractNonDependent(tracker : DependencyTracker<?>) -> Pair<DependencyTracker<?>, Set<?>> {
	Pair(
		DependencyTracker(
			tracker.dependsUpon,
			tracker.fileRequires,
			makeSet()
		),
		tracker.nonDependent
	);
}

----------

makeTree = (\ ->
	(TreeEmpty() : TreeEmpty<?, ??>)
 : () -> TreeEmpty<?, ??>);

makeSet = (\ ->
	(Set(((makeTree : () -> TreeEmpty<?, bool>)() : TreeEmpty<?, bool>)) : Set<?>)
 : () -> Set<?>);

extractNonDependent = (\tracker:DependencyTracker<?> ->
	(Pair((DependencyTracker(((tracker : DependencyTracker<?>).dependsUpon : Tree<?, Set<?>>), ((tracker : DependencyTracker<?>).fileRequires : Tree<?, Set<?>>), ((makeSet : () -> Set<?>)() : Set<?>)) : DependencyTracker<?>), ((tracker : DependencyTracker<?>).nonDependent : Set<?>)) : Pair<DependencyTracker<?>, Set<?>>)
 : (tracker : DependencyTracker<?>) -> Pair<DependencyTracker<?>, Set<?>>);
