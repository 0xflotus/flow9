native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;
native concat : ([?], [?]) -> [?] = Native.concat;

native strlen : (string) -> int = Native.strlen;

Pair(first : ?, second : ??);

Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
	TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
	TreeEmpty : ();

makeTree : () -> Tree<?, ??>;
makeTree() {
	TreeEmpty();
}

	BytecodeOrChunk ::= Bytecode, BytecodeChunk;

	Bytecode ::= CVoid, CUncaughtSwitch, CSimpleSwitch;

	CVoid(); // 0x00; // ( --> void)

	CUncaughtSwitch();
		CSimpleSwitch(defoffset : int, cases : [Pair<int,int>]); // 0x37; // same layout as CSwitch; see BytecodeRunner for difference


BytecodeChunk(bytes : string, /*code : [BytecodeOrChunk],*/ info : Tree<int, [BytecodeInfo]>);


	BytecodeInfo ::= BCILine, BCIFunction, BCILocals;

	BCILine(file : string, line : int);
	BCIFunction(name : string);
	BCILocals(nargs : int, locals : [string], upvals : [string]);


fcBcEncode(tailcall : bool) -> BytecodeChunk {
	BytecodeChunk("", makeTree())
}

FcInfo();

fcMakeLineBytecode(info : FcInfo, code : [BytecodeOrChunk])  -> BytecodeChunk {
	BytecodeChunk("", makeTree())
}

makeBytecode(code : [BytecodeOrChunk], info : [BytecodeInfo]) -> BytecodeChunk {
	BytecodeChunk("", makeTree())
}

FcSwitch(i : FcInfo);
FcCase();

foo(e) {
	switch (e) {
		FcSwitch(i): {
			arg = fcBcEncode(false);
			allcases : [Pair<int, FcCase>] = [];
			casecode2 : [Pair<int,BytecodeChunk>] = [];			// find or create the default case
			casecode3 = if (true)
				Pair(casecode2[0].second, (casecode2))
			else
				Pair(makeBytecode([ CUncaughtSwitch() ], []), casecode2);
			// generate switch
			caselist = fold(
				[] /*casecode3.second*/,
				Pair([], strlen(casecode3.first.bytes)),
				\prev, ccase -> {
					Pair(
						concat(prev.first, [Pair(ccase.first, prev.second)]),
						prev.second + strlen(ccase.second.bytes)
					)
				}
			);
			fcMakeLineBytecode(
				i,
				concat(
					[
						arg,
						CSimpleSwitch(caselist.second, caselist.first),
						casecode3.first
					],
					[]
//					map(casecode3.second, \x -> x.second)
				)
			);
		}
		default: BytecodeChunk("", makeTree());
	}
}

----------

makeTree = (\ ->
	(TreeEmpty() : TreeEmpty<?, ??>)
 : () -> TreeEmpty<?, ??>);

fcBcEncode = (\tailcall:bool ->
	(BytecodeChunk(("" : string), ((makeTree : () -> Tree<int, [BytecodeInfo]>)() : Tree<int, [BytecodeInfo]>)) : BytecodeChunk)
 : (tailcall : bool) -> BytecodeChunk);

fcMakeLineBytecode = (\info:FcInfo, code:[BytecodeOrChunk] ->
	(BytecodeChunk(("" : string), ((makeTree : () -> Tree<int, [BytecodeInfo]>)() : Tree<int, [BytecodeInfo]>)) : BytecodeChunk)
 : (info : FcInfo, code : [BytecodeOrChunk]) -> BytecodeChunk);

makeBytecode = (\code:[BytecodeOrChunk], info:[BytecodeInfo] ->
	(BytecodeChunk(("" : string), ((makeTree : () -> Tree<int, [BytecodeInfo]>)() : Tree<int, [BytecodeInfo]>)) : BytecodeChunk)
 : (code : [BytecodeOrChunk], info : [BytecodeInfo]) -> BytecodeChunk);

foo = (\e:FcSwitch ->
	(switch (e : FcSwitch) {
		FcSwitch(i): {
			(i : FcInfo = ((e : FcSwitch).i : FcInfo);
			(arg : BytecodeChunk = ((fcBcEncode : (tailcall : bool) -> BytecodeChunk)((false : bool)) : BytecodeChunk);
			({
				(allcases : [Pair<int, FcCase>] = ([] : [Pair<int, FcCase>]);
				({
					(casecode2 : [Pair<int, BytecodeChunk>] = ([] : [Pair<int, BytecodeChunk>]);
					({
						(casecode3 : Pair<BytecodeChunk, [Pair<int, BytecodeChunk>]> = (if ((true : bool)) {
							(Pair((((casecode2 : [Pair<int, BytecodeChunk>])[(0 : int)] : Pair<int, BytecodeChunk>).second : BytecodeChunk), (casecode2 : [Pair<int, BytecodeChunk>])) : Pair<BytecodeChunk, [Pair<int, BytecodeChunk>]>)
						} else {
							(Pair(((makeBytecode : (code : [BytecodeOrChunk], info : [BytecodeInfo]) -> BytecodeChunk)(([(CUncaughtSwitch() : CUncaughtSwitch)] : [CUncaughtSwitch]), ([] : [BytecodeInfo])) : BytecodeChunk), (casecode2 : [Pair<int, BytecodeChunk>])) : Pair<BytecodeChunk, [Pair<int, BytecodeChunk>]>)
						}
						 : Pair<BytecodeChunk, [Pair<int, BytecodeChunk>]>);
						({
							(caselist : Pair<[Pair<int, int>], int> = ((fold : (xs : [Pair<int, BytecodeChunk>], init : Pair<[Pair<int, int>], int>, fn : (Pair<[Pair<int, int>], int>, Pair<int, BytecodeChunk>) -> Pair<[Pair<int, int>], int>) -> Pair<[Pair<int, int>], int>)(([] : [Pair<int, BytecodeChunk>]), (Pair(([] : [Pair<int, int>]), ((strlen : (string) -> int)((((casecode3 : Pair<BytecodeChunk, [Pair<int, BytecodeChunk>]>).first : BytecodeChunk).bytes : string)) : int)) : Pair<[Pair<int, int>], int>), (\prev:Pair<[Pair<int, int>], int>, ccase:Pair<int, BytecodeChunk> ->
								(Pair(((concat : ([Pair<int, int>], [Pair<int, int>]) -> [Pair<int, int>])(((prev : Pair<[Pair<int, int>], int>).first : [Pair<int, int>]), ([(Pair(((ccase : Pair<int, BytecodeChunk>).first : int), ((prev : Pair<[Pair<int, int>], int>).second : int)) : Pair<int, int>)] : [Pair<int, int>])) : [Pair<int, int>]), ((((prev : Pair<[Pair<int, int>], int>).second : int) + ((strlen : (string) -> int)((((ccase : Pair<int, BytecodeChunk>).second : BytecodeChunk).bytes : string)) : int)) : int)) : Pair<[Pair<int, int>], int>)
							 : (prev : Pair<[Pair<int, int>], int>, ccase : Pair<int, BytecodeChunk>) -> Pair<[Pair<int, int>], int>)) : Pair<[Pair<int, int>], int>);
							({
								((fcMakeLineBytecode : (info : FcInfo, code : [BytecodeOrChunk]) -> BytecodeChunk)((i : FcInfo), ((concat : ([BytecodeOrChunk], [BytecodeOrChunk]) -> [BytecodeOrChunk])(([(arg : BytecodeChunk), (CSimpleSwitch(((caselist : Pair<[Pair<int, int>], int>).second : int), ((caselist : Pair<[Pair<int, int>], int>).first : [Pair<int, int>])) : CSimpleSwitch), ((casecode3 : Pair<BytecodeChunk, [Pair<int, BytecodeChunk>]>).first : BytecodeChunk)] : [BytecodeOrChunk]), ([] : [BytecodeOrChunk])) : [BytecodeOrChunk])) : BytecodeChunk)
							}
							 : BytecodeChunk) : BytecodeChunk)
						}
						 : BytecodeChunk) : BytecodeChunk)
					}
					 : BytecodeChunk) : BytecodeChunk)
				}
				 : BytecodeChunk) : BytecodeChunk)
			}
			 : BytecodeChunk) : BytecodeChunk) : BytecodeChunk)
		}
		default(): {
			(BytecodeChunk(("" : string), ((makeTree : () -> Tree<int, [BytecodeInfo]>)() : Tree<int, [BytecodeInfo]>)) : BytecodeChunk)
		}
	} : BytecodeChunk)
 : (e : FcSwitch) -> BytecodeChunk);
