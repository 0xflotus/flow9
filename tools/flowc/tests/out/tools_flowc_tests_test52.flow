Maybe<?> ::= None, Some<?>;
None();
Some(value : ?);

onlyOnce(pad : ref Maybe<?>, init : () -> ?) -> ? {
	switch (^pad : Maybe) {
		None(): {
			v = init();
			pad := Some(v);
			v;
		}
		Some(v): v;
	}
}

// a = debugtyping;

foo() {
	mA = ref None();
	onlyOnce(mA, \ -> 1);
}

----------

onlyOnce = (\pad:ref Maybe<?>, init:() -> ? ->
	(gsymswitch0 : Maybe<?> = (^(pad : ref Maybe<?>) : Maybe<?>);
	({
		(switch (gsymswitch0 : Maybe<?>) {
			None(): {
				(v : ? = ((init : () -> ?)() : ?);
				({
					(((pad : ref Maybe<?>)  :=  (Some((v : ?)) : Some<?>)) : void);
					(v : ?)
				}
				 : ?) : ?)
			}
			Some(v): {
				(v : ? = ((gsymswitch0 : Some<?>).value : ?);
				(v : ?) : ?)
			}
		} : ?)
	}
	 : ?) : ?)
 : (pad : ref Maybe<?>, init : () -> ?) -> ?);

foo = (\ ->
	(mA : ref Maybe<int> = (ref (None() : None<int>) : ref None<int>);
	({
		((onlyOnce : (pad : ref Maybe<int>, init : () -> int) -> int)((mA : ref Maybe<int>), (\ ->
			(1 : int)
		 : () -> int)) : int)
	}
	 : int) : int)
 : () -> int);
