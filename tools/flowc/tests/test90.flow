native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;
native concat : ([?], [?]) -> [?] = Native.concat;

native strlen : (string) -> int = Native.strlen;

Pair(first : ?, second : ??);

Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
	TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
	TreeEmpty : ();

makeTree : () -> Tree<?, ??>;
makeTree() {
	TreeEmpty();
}

	BytecodeOrChunk ::= Bytecode, BytecodeChunk;

	Bytecode ::= CVoid, CUncaughtSwitch, CSimpleSwitch;

	CVoid(); // 0x00; // ( --> void)

	CUncaughtSwitch();
		CSimpleSwitch(defoffset : int, cases : [Pair<int,int>]); // 0x37; // same layout as CSwitch; see BytecodeRunner for difference


BytecodeChunk(bytes : string, /*code : [BytecodeOrChunk],*/ info : Tree<int, [BytecodeInfo]>);


	BytecodeInfo ::= BCILine, BCIFunction, BCILocals;

	BCILine(file : string, line : int);
	BCIFunction(name : string);
	BCILocals(nargs : int, locals : [string], upvals : [string]);


fcBcEncode(tailcall : bool) -> BytecodeChunk {
	BytecodeChunk("", makeTree())
}

FcInfo();

fcMakeLineBytecode(info : FcInfo, code : [BytecodeOrChunk])  -> BytecodeChunk {
	BytecodeChunk("", makeTree())
}

makeBytecode(code : [BytecodeOrChunk], info : [BytecodeInfo]) -> BytecodeChunk {
	BytecodeChunk("", makeTree())
}

FcSwitch(i : FcInfo);
FcCase();

foo(e) {
	switch (e) {
		FcSwitch(i): {
			arg = fcBcEncode(false);
			allcases : [Pair<int, FcCase>] = [];
			casecode2 : [Pair<int,BytecodeChunk>] = [];			// find or create the default case
			casecode3 = if (true)
				Pair(casecode2[0].second, (casecode2))
			else
				Pair(makeBytecode([ CUncaughtSwitch() ], []), casecode2);
			// generate switch
			caselist = fold(
				[] /*casecode3.second*/,
				Pair([], strlen(casecode3.first.bytes)),
				\prev, ccase -> {
					Pair(
						concat(prev.first, [Pair(ccase.first, prev.second)]),
						prev.second + strlen(ccase.second.bytes)
					)
				}
			);
			fcMakeLineBytecode(
				i,
				concat(
					[
						arg,
						CSimpleSwitch(caselist.second, caselist.first),
						casecode3.first
					],
					[]
//					map(casecode3.second, \x -> x.second)
				)
			);
		}
		default: BytecodeChunk("", makeTree());
	}
}
