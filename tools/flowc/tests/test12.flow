native foldi : (xs : [?], init : ??, fn : (int, ??, ?)->??) -> ?? = Native.foldi;
native strIndexOf : (string, string) -> int = Native.strIndexOf;


	Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

	Pair(first : ?, second : ??);
	Quadruple(first : ?, second : ??, third : ???, fourth : ????);

strFindFirstOfStrings(s : string, stringsToFind : [string]) -> Maybe<Pair<int, int>>;

// a = debugtyping;

strFindFirstOfStrings(s, strings) {
	foldi(strings, None(), \i, acc : Maybe<Pair<int, int>>, st -> {
		p = strIndexOf(s, st);
		if (p == -1) acc else {
			switch (acc) {
				None(): Some(Pair(p, i));
				Some(pa): if (p < pa.first) Some(Pair(p, i)) else acc;
			}
		}
	});
}
