Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
	TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
	TreeEmpty : ();

lookupTree(tree : Tree<?, ??>, key : ?) -> Maybe<??> {
	None();
}

FcModule(
	globalVars : Tree<string, FcGlobalVar>
);

FcDeclaration ::= FcFunctionDec, FcGlobalVar, FcNativeDec;


FcGlobalVar(value : Maybe<FcExp>);

FcFunctionDec();


FcNativeDec();

native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;


Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);


FcExp ::= FcInt;
FcInt();

makeInitOrder(module : FcModule, initOrder : [string]) -> [string] {

	track = fold(initOrder, 0, \acc, o -> {
		gvar = lookupTree(module.globalVars, o);
		switch (gvar) {
			None(): {
				None();
			}
			Some(gv): gv.value;
		}
		acc
	});
	[]
}


