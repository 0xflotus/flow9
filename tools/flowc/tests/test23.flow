JsonObject(members : [Pair<string, JsonObject>]);
Pair(first : ?, second : ??);
Triple(first : ?, second : ??, third : ???);

native length : ([?]) -> int = Native.length;
native iteriUntil : ([?], (int, ?) -> bool) -> int = Native.iteriUntil;

mergeSort(a : [?], comparisonFn : (?, ?) -> int) -> [?] {
	a;
}

isJsonEqual(first : JsonObject, second : JsonObject) -> bool {
	obj = first.members;
	objs = second.members;
	compareFn = \x : Pair, y : Pair -> if (x.first < y.first) -1 else if (x.first == y.first) 0 else 1;
	sortedObjs = mergeSort(objs, compareFn);
	iteriUntil(obj, 
		\id, val -> val.first != sortedObjs[id].first || !isJsonEqual(val.second, sortedObjs[id].second)
	) == length(obj);
}
