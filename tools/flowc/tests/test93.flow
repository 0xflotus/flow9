Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
	TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
	TreeEmpty : ();

foldTree_deferred(tree : Tree<?, ??>, fn : (?, ??, ???) -> ???) -> void {
	foldedTree : [TreeNode<?, ??>] = [];
	fold_deferred(
		foldedTree, 
		\acc, node -> {
			if (node.depth <= 3)
				foldTree(node, acc, fn)
			else
				fn(node.key, node.value, acc)
		}
	)
}

fold_deferred(a : [?], fn : (acc : ??, x : ?) -> ??) -> void {

}

foldTree(tree: Tree<?, ??>,
				acc: ???,
				f: (key: ?, value: ??, acc: ???) -> ???
				) -> ??? {
	acc
}
