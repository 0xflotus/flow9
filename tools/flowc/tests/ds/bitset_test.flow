import ds/bitset;
import arrayutils;
import stringmath;


createRandomLength(maxLen : int) -> int {
	cast(random() * cast(maxLen : int -> double) : double -> int)
}

createRandomBoolArray(len : int) -> [bool] {
	arrayRepeatDeferred(\ -> random() > 0.5, len);
}

dumpBitSet(bitset : BitSet) -> string {
	fold(
		enumFromTo(0, bitset.bitcount - 1), "",
		\acc, i -> {
			switch (getBitSet(bitset, i)) {
				Some(val): if (val) acc + "1" else acc + "0";
				None(): acc + "_";
			}
		}
	)
}

dumpBitArray(bitarr : [bool]) -> string {
	fold(
		enumFromTo(0, length(bitarr) - 1), "",
		\acc, i ->
			if (bitarr[i]) acc + "1" else acc + "0"
	)
}

testsOnCreation(maxLen : int, create : (int) -> BitSet) -> void {
	time_start = timestamp();
	iter(enumFromTo(1, 100), 
		\n -> {
			len = createRandomLength(maxLen);
			randArr = createRandomBoolArray(len);
			//println("RUNNING " + i2s(n) + " TEST OF SIZE: " + i2s(len));
			bitsetPos = foldi(randArr, create(len), \i, acc, bit -> if (bit) setBitSet(acc, i) else acc);
			bitsetNeg = foldi(randArr, 
				fold(enumFromTo(0, len - 1), create(len), \acc, i -> setBitSet(acc, i)),
				\i, acc, bit -> if (bit) acc else unsetBitSet(acc, i)
			);
			
			error = \err, pos -> {
				println(err);
				println("bitarr:    " + dumpBitArray(randArr));
				if (pos) {
					println("bitset(P): " + dumpBitSet(bitsetPos));
				} else {
					println("bitset(N): " + dumpBitSet(bitsetNeg));
				}
				quit(0);
			}
			
			iteri(randArr, \i, bit -> {
					if (Some(bit) != getBitSet(bitsetPos, i)) {
						error("TEST FAIL: bits differ", true);
					}
					if (Some(bit) != getBitSet(bitsetNeg, i)) {
						error("TEST FAIL: bits differ", false);
					}
				}
			);
			switch (getBitSet(bitsetPos, -1)) {
				Some(__):  error("TEST FAIL: index '-1' has value", true);
				None(): { }
			}
			switch (getBitSet(bitsetPos, len)) {
				Some(__):  error("TEST FAIL: index '" + i2s(len) + "' has value", true);
				None(): { }
			}
			switch (getBitSet(bitsetNeg, -1)) {
				Some(__):  error("TEST FAIL: index '-1' has value", false);
				None(): { }
			}
			switch (getBitSet(bitsetNeg, len)) {
				Some(__):  error("TEST FAIL: index '" + i2s(len) + "' has value", false);
				None(): { }
			}
		}
	);
	time = (timestamp() - time_start) / 1000.0;
	println("TEST COMPLETED IN: " + d2st(time, 2) + "s");
}

testsOnOperations(maxLen : int, create : (int) -> BitSet) -> void {
	time_start = timestamp();
	iter(enumFromTo(1, 100), 
		\n -> {
			len = createRandomLength(maxLen);
			randArr1 = createRandomBoolArray(len);
			randArr2 = createRandomBoolArray(len);
			
			//println("RUNNING " + i2s(n) + " TEST OF SIZE: " + i2s(len));
			
			bitset1 = foldi(randArr1, create(len), \i, acc, bit -> if (bit) setBitSet(acc, i) else acc);
			bitset2 = foldi(randArr2, create(len), \i, acc, bit -> if (bit) setBitSet(acc, i) else acc);
			
			error = \err -> {
				println(err);
				quit(0);
			}
			
			switch (mergeBitSetImmutable(bitset1, bitset2)) {
				Some(bitsetUnion): {
					iteri(randArr1, 
						\i, bit -> {
							if (Some(bit || randArr2[i]) != getBitSet(bitsetUnion, i)) {
								error("TEST FAIL: union differs");
							}
						}
					)
				}
				None(): error("union of bitsets is not calculated");
			}
			switch (intersectBitSetImmutable(bitset1, bitset2)) {
				Some(bitsetIntersect): {
					iteri(randArr1, 
						\i, bit -> {
							if (Some(bit && randArr2[i]) != getBitSet(bitsetIntersect, i)) {
								error("TEST FAIL: intersection differs");
							}
						}
					)
				}
				None(): error("intersection of bitsets is not calculated");
			}
			bitsetComplement = complementBitSetImmutable(bitset1);
			iteri(randArr1, 
				\i, bit -> {
					if (Some(!bit) != getBitSet(bitsetComplement, i)) {
						error("TEST FAIL: complemetation differs");
					}
				}
			);
		}
	);
	time = (timestamp() - time_start) / 1000.0;
	println("TEST COMPLETED IN: " + d2st(time, 2) + "s");
}

main() -> int {
	maxLen = 20000;
	println("TESTS OF CREATION OF MUTABLE BITSETS");
	testsOnCreation(maxLen, makeBitSetMutable);

	println("\nTESTS OF SET-THEORETIC OPERATIONS");
	testsOnOperations(maxLen, makeBitSetMutable);
	
	println("\nTESTS OF CREATION OF IMMUTABLE BITSETS");
	testsOnCreation(maxLen, makeBitSetImmutable);

	println("\nTESTS OF SET-THEORETIC IMMUTABLE OPERATIONS");
	testsOnOperations(maxLen, makeBitSetImmutable);

	println("=========================");
	println("ALL BIT SET TESTS PASSED");
	0
}
