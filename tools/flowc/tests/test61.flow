// A double-linked list
DList(mutable first : DNode<?>, mutable last : DNode<?>);
	DNode<?> ::= DEnd, DLink<?>;

DEnd : ();


Behaviour<?> ::= ConstBehaviour<?>, DynamicBehaviour<?>;

// The runtime representation of a behaviour
DynamicBehaviour(value : ref ?, subscribers : DList<(?) -> void>);
ConstBehaviour : (constv : ?);

DLink(v : ?, mutable before : DNode<?>, mutable after : DNode<?>, attached : bool);

removeDList(list : DList<?>, n : DLink<?>) -> void {}

// a = debugtyping1;

pushDList(list : DList<?>, v : ?) -> DLink<?> {
	la = list.last;
	switch(la : DNode) {
		DEnd(): {
			node = DLink(v, DEnd(), DEnd(), true);
			list.first ::= node;
			list.last ::= node;
			node;
		}
		DLink(v2, before, after, l): {
			node = DLink(v, la, DEnd(), l);
			la.after ::= node;
			list.last ::= node;
			node;
		}
	}
}
