Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
	TreeNode : (key : ?, value : ??);
	TreeEmpty : ();

Set : (tree : Tree<?, bool>);

Label();

makeTree() -> Tree<?, ??> {
	TreeEmpty();
}

makeSet() -> Set<?> {
	Set(makeTree())
}

foldSet(init : ??, fn : (??, ?) -> ??) -> ?? {
	init;
}

id(acc: ???) -> ??? {
	acc;
}

// Does the partition, and returns the final partition
doHopcroft() -> void {
	// Nodes that transitions into any element of A
	XT : Set<int> = id(makeSet());

	// Partitions over X
	XG = foldSet(makeTree(), \acc : Tree<Label, [int]>, xt -> {
		acc;
	});
}
