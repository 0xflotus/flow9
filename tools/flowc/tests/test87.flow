// Types as they are expressed in flow programs, that programmers understand
FcType ::= FcTypeArray, FcTypeFunction, FcTypeRef, FcTypeParameter,
	FcTypeBool, FcTypeInt, FcTypeDouble, FcTypeString, FcTypeFlow, 
	FcTypeVoid, FcTypeNative, FcTypeName,

	FcTypeStruct, FcTypeUnion,

	FcTypeVar;

	FcTypeArray(t : FcType, info : FcInfo2);

	FcTypeFunction(args : [FcFunArg], returnType : FcType, info : FcInfo2);
		FcFunArg(name : string, type : FcType);

	FcTypeRef(t : FcType, info : FcInfo2);

	FcTypeParameter(n : string, info : FcInfo2);	// ?, ?? and so on

	FcTypeBool(info : FcInfo2);
	FcTypeInt(info : FcInfo2);
	FcTypeDouble(info : FcInfo2);
	FcTypeString(info : FcInfo2);
	FcTypeFlow(info : FcInfo2);
	FcTypeVoid(info : FcInfo2);
	FcTypeNative(info : FcInfo2);

	// Struct or union. If the name is empty, all we know is that it is a struct
	FcTypeName(name : string, typeparameters : [FcType], info : FcInfo2);

	// typars is when a type is instantiated
	FcTypeStruct(name : string, typars : [FcType], args : [FcStructArg], info : FcInfo2);
		FcStructArg(name : string, type : FcType, ismutable : bool);
	FcTypeUnion(name : string, typeparameters : [FcType], typenames : [FcTypeName], info : FcInfo2);

	// While type-checking, we introduce type variables for unknown types
	FcTypeVar(id : int, info : FcInfo2);

FcBaseType ::= FcTypeVoid, FcTypeBool, FcTypeInt, FcTypeDouble, FcTypeString, FcTypeNative;

FcInfo2(start : int, end : int);

getResolvedFcType(t : FcType) -> FcType {
	t;
}

checkFinalTypeExpect(t : FcType) -> void {
	rt = getResolvedFcType(t);
	switch (rt) {
		FcTypeVoid(__): {};
		default: {}
	}
}
