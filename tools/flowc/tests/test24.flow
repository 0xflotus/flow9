Maybe<?> ::= None, Some<?>;
None();
Some(value : ?);

either : (m: Maybe<?>, alternative: ?) -> ?;
maybeMap : (m: Maybe<?>, f: (?) -> ??) -> Maybe<??>;
eitherMap : (m : Maybe<?>, fn : (?) -> ??, alternative: ??) -> ??;

either(m, alternative) {
	switch (m : Maybe) {
		None(): alternative;
		Some(v): v;
	}
}

eitherMap(m, fn, alternative) {
	switch (m : Maybe) {
		None(): alternative;
		Some(v): fn(v);
	}
}

maybeMap(m, f) {
	switch (m : Maybe) {
		None(): None();
		Some(v): Some(f(v));
	}
}

native find : (a : [?], fn : (?) -> bool) -> Maybe<?> = Native.find;

Pair(first : ?, second : ??);

native strlen : (string) -> int = Native.strlen;
native substring : (s : string, start : int, length : int) -> string = Native.substring;
native strIndexOf : (string, string) -> int = Native.strIndexOf;


startsWith : (s : string, start : string) -> bool;
startsWith(s, start) {
	sl = strlen(start);
	if (sl > strlen(s)) {
		false;
	} else {
		substring(s, 0, sl) == start;
	}
}

strIndexOfM(s, s1) {
	i = strIndexOf(s, s1);
	if (i < 0) None() else Some(i)
}


findClosingTag(s, sl, closeTag,  ctl, otherTagsWithSameCloseTag, level) {
	tagStartsAt = \start -> \tag -> startsWith(substring(s, start, sl - start), tag);
	maybeMap(strIndexOfM(s, "<"), \tagPosition -> {
		if (closeTag |> tagStartsAt(tagPosition)) {
			if (level == 0) {
				Some(Pair(tagPosition, sl))
			} else {
				newLen = sl - tagPosition - ctl;
				findClosingTag(substring(s, tagPosition + ctl, newLen), newLen, closeTag,  ctl, otherTagsWithSameCloseTag, level - 1)
			}
		} else {
			eitherMap(
				find(otherTagsWithSameCloseTag, tagStartsAt(tagPosition)),
				\tag -> {
					newLen = sl - tagPosition - strlen(tag);
					findClosingTag(substring(s, tagPosition + strlen(tag), newLen), newLen, closeTag, ctl, otherTagsWithSameCloseTag, level + 1)
				},
				{
					newLen = sl - tagPosition - 1;
					findClosingTag(substring(s, tagPosition + 1, newLen), newLen, closeTag, ctl, otherTagsWithSameCloseTag, level)
				}
			)
		}

	}) |> (\m -> either(m, None())) // remove one Some
}
