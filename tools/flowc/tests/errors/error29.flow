native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;

native replace : ([?], int, ?) -> [?] = Native.replace;
native length : ([?]) -> int = Native.length;

arrayPush(array : [?], value : ?) -> [?] {
	replace(array, length(array), value); 
}


Union1 ::= Data11, Data12;
	Data11();
	Data12();
UnionSuper ::= Union1, Data21, Data22;
	Data21();
	Data22();

main() {
	arrayProcessor();
}

arrayProcessor() -> void {
	style : [UnionSuper] = [];
	fold(style, [], \acc : [Union1], s -> {
		if (isUnion1(s))
			arrayPush(acc, s)
		else
			acc;
	});
	{}
}

isUnion1(style : UnionSuper) -> bool {
	switch (style) {
		Data21() : false;
		Data22() : false;

		Data12() : true;
		Data11() : true;
	}
}
