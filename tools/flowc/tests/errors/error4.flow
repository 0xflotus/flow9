DList(mutable first : DNode<?>, mutable last : DNode<?>);
	DNode<?> ::= DEnd, DLink<?>;
DLink(v : ?, mutable before : DNode<?>, mutable after : DNode<?>, mutable attached : bool);

DEnd : ();

applyRefDNode(node : DNode<(?) -> void>, r : ref ?) -> void {
	switch (node : DNode) {
		DEnd(): {}
		DLink(fn, before, after, attached): {
			// node could be removed from the list in previous call, do nothing in this case.
			if (attached) {
				// Notice that we deference the value by purpose in each iteration, because a previous
				// iteration might have changed the value when used in behaviours.
				// in case if fn(^r) changed the list by removing inself, we have to use saved 'after' node
				nextNode = if (node.after == DEnd && node.before == DEnd && after != DEnd) after else node.after;
				applyRefDNode(nextNode, r)
			}
		}
	}
}
