Maybe<?> ::= None, Some<?>;
None();
Some(value : ?);

eitherMap : (m : Maybe<?>, fn : (?) -> ??, alternative: ??) -> ??;
eitherMap(m, fn, alternative) {
	switch (m : Maybe) {
		None(): alternative;
		Some(v): fn(v);
	}
}

native substring : (s : string, start : int, length : int) -> string = Native.substring;

strIndexOfM(s, s1) {
	i = strIndexOf(s, s1);
	if (i < 0) None() else Some(i)
}
native strlen : (string) -> int = Native.strlen;
native strIndexOf : (string, string) -> int = Native.strIndexOf;

getUrlExtension(url) {
	eitherMap(strIndexOfM(url, "?"),
		\i -> "",
		url
	)
	|> (\s -> eitherMap(strIndexOfM(s, "."),
		\i -> substring(s, i+1, strlen(s) - i - 1),
		""
	))
	|> (\s -> eitherMap(strIndexOfM(s, "/"),
		\i -> "", // extension should not contain "/"
		s
	))
}
