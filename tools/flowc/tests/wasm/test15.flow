native prints : (string) -> void = host.prints;
native printf : (flow) -> void = host.println;

// math
native sin : (double) -> double = Native.sin;
native asin : (double) -> double = Native.asin;
native acos : (double) -> double = Native.acos;
native atan : (double) -> double = Native.atan;
native atan2 : (double, double) -> double = Native.atan2;
native exp : (double) -> double = Native.exp;
native log : (double) -> double = Native.log;

// array
// native length : ([?]) -> int = Native.length;
native length : ([int]) -> int = Native.length;
// native concat : ([?], [?]) -> [?] = Native.concat;
// native map : ([?], (?) -> ??) -> [??] = Native.map;
// native mapi : ([?], (int, ?) -> ??) -> [??] = Native.mapi;
// native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;
// native foldi : (xs : [?], init : ??, fn : (int, ??, ?)->??) -> ?? = Native.foldi;
// native replace : ([?], int, ?) -> [?] = Native.replace;
// native subrange : ([?], index : int, length : int) -> [?] = Native.subrange;
native enumFromTo : (int, int) -> [int] = Native.enumFromTo;
// native iter : ([?], (?)->void) -> void = Native.iter;
// native iteri : ([?], (int, ?)->void) -> void = Native.iteri;
// native iteriUntil : ([?], (int, ?)->bool) -> int = Native.iteriUntil;
// native filter : (a : [?], test : (?) -> bool) -> [?] = Native.filter;

// string
native strlen : (string) -> int = Native.strlen;
native strIndexOf : (string, string) -> int = Native.strIndexOf;
native substring : (s : string, start : int, length : int) -> string = Native.substring;
native toLowerCase : (string) -> string = Native.toLowerCase;
native toUpperCase : (string) -> string = Native.toUpperCase;
native string2utf8 : (s : string) -> [int] = Native.string2utf8;
native s2a : (string) -> [int] = Native.s2a;
native fromCharCode : (int) -> string = Native.fromCharCode;
native getCharCodeAt : (s : string, i : int) -> int = Native.getCharCodeAt;


PI = 3.14159265358979323846264338327950;

main() {

	a = "Test";
//	b = s2a(a);

// 	a = 33;
// //	println2(a);
// 	b : flow = cast(a: int -> flow);
// 	printf(b);

// 	printf(cast("abcd": string -> flow));

// 	// c = "some text";
// 	// d : flow = cast(c: string -> flow);
// 	// printf(d);

// 	// e = 4.5;
// 	// f : flow = cast(e: double -> flow);
// 	// printf(f);

// 	aa = sin(PI / 2.0);
// 	printf(cast(aa: double -> flow));
// 	bb = asin(aa);
// 	printf(cast(bb: double -> flow));

	printf(cast(length([1, 5]): int -> flow));
	printf(cast(enumFromTo(1, 5): [int] -> flow));

	// printf(cast(strlen("string of 12"): int -> flow));
	// printf(cast(strIndexOf("text", "xt"): int -> flow));
	// printf(cast(substring("abctextdef", 3, 4): string -> flow));
	// printf(cast(toLowerCase(a): string -> flow));
	// printf(cast(toUpperCase(a): string -> flow));
	// printf(cast(string2utf8(a): [int] -> flow));
	printf(cast(s2a(a): [int] -> flow));
	// printf(cast(fromCharCode(0x41): string -> flow));
	// printf(cast(getCharCodeAt("ABC", 1): int -> flow));
}
