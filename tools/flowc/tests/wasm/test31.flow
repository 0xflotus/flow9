native substring : (string, int, int) -> string = Native.substring;
native fromCharCode : (int) -> string = Native.fromCharCode;
native getCharCodeAt : (string, int) -> int = Native.getCharCodeAt;

native printi : (int) -> void = host.printi;
native prints : (string) -> void = host.prints;

expect(i : int, got : bool) {
	if (got == false) {
		printi(i);
	}
}

test_substring() {
	res0 = substring("Hello, world!", 7, 5);
	expect(101, res0 == "world");

	res1 = substring("Hello, world!", 0, 0);
	expect(102, res1 == "");

	res2 = substring("Hello, world!", 0, 13);
	expect(103, res2 == "Hello, world!");

	res3 = substring("Hello, world!", 0, 14);
	expect(104, res3 == "Hello, world!");

	res4 = substring("Hello, world!", 12, 1);
	expect(105, res4 == "!");

	res5 = substring("Hello, world!", 13, 1);
	expect(106, res5 == "");
}

test_fromCharCode() {
	res0 = fromCharCode(65);
	expect(201, res0 == "A");

	res1 = fromCharCode(33);
	expect(202, res1 == "!");

	res2 = fromCharCode(92);
	expect(203, res2 == "\\");
}

test_getCharCodeAt() {
	res0 = getCharCodeAt("Hello, world!", 0);
	expect(301, res0 == 72);

	res1 = getCharCodeAt("Hello, world!", 7);
	expect(302, res1 == 119);

	res2 = getCharCodeAt("Hello, world!", 12);
	expect(303, res2 == 33);

	res3 = getCharCodeAt("Hello, world!", 13);
	expect(304, res3 == 0);

	res4 = getCharCodeAt("Hello, world!", -1);
	expect(305, res4 == 0);


}

main() {
	test_substring();
	test_fromCharCode();
	test_getCharCodeAt();
}