// testing natives with fallbacks

import expect;

native s2a : (string) -> [int] = Native.s2a;
s2a(s : string) -> [int] { [1,2,3]; }		// this should not be called!
native string2utf8 : (string) -> [int] = Native.string2utf8;

// elemIndex is not implemented as native. We should use fallback!
native elemIndex : (a : [?], elem : ?, illegal : int) -> int = Native.elemIndex;
elemIndex(a, elem, illegal) {
	foundIndex = iteriUntil(a, \i, ai -> ai == elem);
	if (foundIndex == length(a)) {
		illegal;
	} else {
		foundIndex;
	}
}
native iteriUntil : ([?], (int, ?)->bool) -> int = Native.iteriUntil;


native length : ([?]) -> int = Native.length;
length(arr : [?]) -> int { -1 }			// this should not be called!

native not_implemented_native : (string) -> string = Native.not_implemented_native;
not_implemented_native(s : string) -> string {
	s + s
}

test1() {
	expect2v(101, [97,98,99,49,50,51], string2utf8("abc123"));
	expect2v(102, [97,98,99,49,50,51], s2a("abc123"));
}

test21() {
	expect2v(211, 1, elemIndex([0,1,2], 1, -1));
	expect2v(212, 1, elemIndex([0.0,1.0,2.0], 1.0, -1));
}

test22() {
	expect2v(220, 3, length(["1", "2", "3"]));
}

test3() {
	expect2v(300, "abcabc", not_implemented_native("abc"));	
}

main() {
	// expectVerbose();
	test1();
	test21();
	test22();
	test3();
	expectFinish();
}
