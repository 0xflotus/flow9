native printi : (int) -> void = host.printi;

expect(i : int, got : bool) {
	if (got == false) {
		printi(i);
	}
}

Some(a : ?);

Foo();
Bar(a : int);

nop() {

}

compare(a : ?, b : ??) -> int {
	if (a < b) -1 else if (a == b) 0 else 1
}

main() {
	ib0 = Some(false);
	ib1 = Some(true);
	expect(0, compare(ib0, ib1) == -1);

	i0 = Some(0);
	i1 = Some(1);
	expect(1, compare(i0, i1) == -1);

	d0 = Some(0.0);
	d1 = Some(1.0);
	expect(2, compare(d0, d1) == -1);

	s0 = Some("");
	s1 = Some("1");
	expect(3, compare(s0, s1) == -1);

	c0 = Some(\ -> {});
	c1 = Some(nop);
	expect(4, compare(c0, c1) != 0);

	r0 = Some(ref 0);
	r1 = Some(ref 0.0);
	r2 = Some(ref "");
	r3 = Some(ref nop);
	r4 = Some(ref ref 0);
	r5 = Some(ref [0]);
	r6 = Some(ref ib0);
	expect(5, compare(r0, r1) != 0);
	expect(6, compare(r0, r2) != 0);
	expect(7, compare(r0, r3) != 0);
	expect(8, compare(r0, r4) != 0);
	expect(9, compare(r0, r5) != 0);
	expect(10, compare(r0, r6) != 0);

	a0 = Some([]);
	a1 = Some([1]);
	a2 = Some([1.0]);
	a3 = Some([""]);
	a4 = Some([nop]);
	a5 = Some([ref 0]);
	a6 = Some([ib0]);
	a7 = Some([d0]);
	expect(11, compare(a0, a1) != 0);
	expect(12, compare(a0, a2) != 0);
	expect(13, compare(a0, a3) != 0);
	expect(14, compare(a0, a4) != 0);
	expect(15, compare(a0, a5) != 0);
	expect(16, compare(a0, a6) != 0);

	ff0 = Some(cast(0 : int -> flow));
	ff1 = Some(cast(1.0 : double -> flow));
	expect(17, compare(ff0, ff1) != 0);

	fs0 = Some(Foo());
	fs1 = Some(Bar(0));
	fs2 = Some(ib0);
	fs3 = Some(i0);
	fs4 = Some(d0);
	fs5 = Some(s0);
	fs6 = Some(c0);
	fs7 = Some(r0);
	fs8 = Some(a0);

	expect(18, compare(fs0, fs1) != 0);
	expect(19, compare(fs0, fs2) != 0);
	expect(20, compare(fs0, fs3) != 0);
	expect(21, compare(fs0, fs4) != 0);
	expect(22, compare(fs0, fs5) != 0);
	expect(23, compare(fs0, fs6) != 0);
	expect(24, compare(fs0, fs7) != 0);
	expect(25, compare(fs0, fs8) != 0);
}

