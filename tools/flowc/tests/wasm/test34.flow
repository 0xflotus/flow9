// testing behaviours

import behaviour;
import transforms;
import expect;

/*

	missing natives:
	
		subrange, replace, fold, println, captureCallstack, printCallstack
		and $wasm_set_array_i32_jsref

*/

doTest1(idx : int, val0 : ?, val1 : ?, val2 : ?, val3 : ?) -> void {
	b = make(val0);
	res = ref val0;

	uns = subscribe(b, \x -> {
		res := x;
	});
	
	expect2(idx + 0, getValue(b) == val0 && ^res == val0);
	
	next(b, val1);
	expect2(idx + 1, getValue(b) == val1 && ^res == val1);
	
	next(b, val2);
	expect2(idx + 2, getValue(b) == val2 && ^res == val2);
	
	uns();
	
	next(b, val3);
	expect2(idx + 3, getValue(b) == val3 && ^res == val2);
	
	cb = \ -> next(b, val0);
	cb();
	expect2(idx + 4, getValue(b) == val0 && ^res == val2);
}

test0() {
	b = make(1.0);
	expect2(0, 1.0 == getValue(b));
}

test2() {
	b = make(0);
	bb = select(b, \x -> 2*x);
	next(b, 111);
	expect2v(201, 222, getValue(bb));
}

S : (v : int);

main() {
	// expectVerbose();
	test0();
	doTest1(100, 0, 1, 2, 333);
	doTest1(110, 0.0, 1.0, 2.0, 333.0);
	doTest1(120, "a", "b", "c", "d");
	doTest1(130, S(0), S(1), S(2), S(333));
	test2();
	expectFinish();
}
