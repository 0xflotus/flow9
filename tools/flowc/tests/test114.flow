Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
	TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
	TreeEmpty : ();


makeTree() -> Tree<?, ??> {
	TreeEmpty();
}

native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;

lookupTreeDef(x : Tree<?, ??>, key : ?, defaultValue : ??) -> ?? {
	defaultValue
}


treePushToArrayValue(tree : Tree<?, [??]>, key : ?, value : ??) -> Tree<?, [??]> {
	tree;
}

	// Setup for pieces
	PieceSetup ::= PieceFieldEditor;
	PieceFieldEditor ::= PieceFieldIsSlider, PieceFieldHide, PieceFieldTooltip, PieceFieldIuEditor;
		PieceFieldIuEditor(field : string);
		PieceFieldIsSlider(field : string, minimum : double, maximum : double, precision : double);
		PieceFieldHide(field : string);
		PieceFieldTooltip(field : string, tooltip : string);


getPieceSetupEditors(pieceStructSetups : ref Tree<string, [PieceSetup]>, name : string) -> Tree<string, [PieceFieldEditor]> {
	setups = lookupTreeDef(^(pieceStructSetups), name, []);
	fold(setups, makeTree(), \acc, s -> {
		switch (s : PieceSetup) {
			PieceFieldIsSlider(field, minimum, maximum, precision): treePushToArrayValue(acc, field, s);
			PieceFieldIuEditor(field) : treePushToArrayValue(acc, field, s);
			PieceFieldHide(field): treePushToArrayValue(acc, field, s);
			PieceFieldTooltip(field, tooltip): treePushToArrayValue(acc, field, s);
		}
	});
}
