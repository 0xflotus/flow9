import ds/set;

SentenceMatch ::= SentenceHit;
	SentenceHit();

SentenceWordHit();

checkTopCandidates( matches : [[SentenceWordHit]], bestHits : [SentenceHit],
		cands : Tree<int, [SentenceWordHit]>, checked : Set<int>, slots : int, maxHits : int) -> [SentenceMatch] {
	minimum = popmin(cands);
	switch (minimum) {
		EmptyPopResult(): bestHits;
		PopResult(mk, mv, mrest): {
			hits = minimum.v;
			checked1 = fold(hits, Pair(checked, bestHits), \acc : Pair<Set<int>, [SentenceHit]>, h : SentenceWordHit -> {
				acc;
			});
			if (sizeSet(checked1.first) < slots) {
				checkTopCandidates(matches, checked1.second, minimum.rest, checked1.first, slots, maxHits);
			} else checked1.second;
		}
	}
}
