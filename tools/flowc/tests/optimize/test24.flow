import runtime;
import string;

// Optimization of inlined recursive calls
// Here a recursive finction 'fun' is inlined twice,
// because an 'inlining_rec_depth' command line parameter
// in this test is set to '2'.
// The result is: when optimizing fun(1) we can 
// follow the recursion down to the 0 (ground value), and 
// this call is reduced to 1.

fun(x : int) -> int {
	if (x == 0) 0 else x + fun(x - 1)
}

main() {
	println(fun(1));
}
