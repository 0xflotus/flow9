import runtime;
import string;

// Side effects in arguments in inlined function.
// Such arguments should be removed from the inlined call,
// and their values are passed as variables, which are
// computed before the call.

side(a : ref int) -> int {
	a := ^a + 1; 
	^a
}

fun1() -> int {
	a = ref 0;
	fn = \v : int, w : int -> v + v + w + w;
	fn(side(a), side(a))
}

fun2() -> int {
	a = ref 0;
	fn = \v : int, w : int -> v + v + w + w;
	x = side(a);
	y = side(a);
	fn(x, y)
}

fun3() -> int {
	a = ref 0;
	fn = \v : int, w : int -> v + v + w + w;
	fn(
		{x = side(a); x}, 
		{y = side(a); y}
	)
}

main() {
	println("fun1: " + i2s(fun1()));
	println("fun2: " + i2s(fun2()));
	println("fun3: " + i2s(fun3()));
}

----------

side = \a:ref int ->
	{
		(a  :=  (^a + 1));
		^a
	}



fun1 = \ ->
	a : ref int = ref 0;
	tmp_var_0 : int = side(a);
	tmp_var_1 : int = side(a);
	(((tmp_var_0 + tmp_var_0) + tmp_var_1) + tmp_var_1)


fun2 = \ ->
	a : ref int = ref 0;
	x : int = side(a);
	y : int = side(a);
	(((x + x) + y) + y)


fun3 = \ ->
	a : ref int = ref 0;
	tmp_var_0 : int = x : int = side(a);
	x;
	tmp_var_1 : int = y : int = side(a);
	y;
	(((tmp_var_0 + tmp_var_0) + tmp_var_1) + tmp_var_1)


main = \ ->
	{
		println(("fun1: " + i2s(a : ref int = ref 0;
		tmp_var_0 : int = side(a);
		tmp_var_1 : int = side(a);
		(((tmp_var_0 + tmp_var_0) + tmp_var_1) + tmp_var_1))));
		println(("fun2: " + i2s(a : ref int = ref 0;
		x : int = side(a);
		y : int = side(a);
		(((x + x) + y) + y))));
		println(("fun3: " + i2s(a : ref int = ref 0;
		tmp_var_0 : int = x : int = side(a);
		x;
		tmp_var_1 : int = y : int = side(a);
		y;
		(((tmp_var_0 + tmp_var_0) + tmp_var_1) + tmp_var_1))))
	}


