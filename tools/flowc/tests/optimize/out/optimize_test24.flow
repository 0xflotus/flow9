import runtime;
import string;

// Optimization of inlined recursive calls
// Here a recursive finction 'fun' is inlined twice,
// because an 'inlining_rec_depth' command line parameter
// in this test is set to '2'.
// The result is: when optimizing fun(1) we can 
// follow the recursion down to the 0 (ground value), and 
// this call is reduced to 1.

fun(x : int) -> int {
	if (x == 0) 0 else x + fun(x - 1)
}

main() {
	println(fun(1));
}

----------

fun = \x:int ->
	if ((x == 0)) {
		0
	} else {
		(x + if (((x - 1) == 0)) {
			0
		} else {
			((x - 1) + if ((((x - 1) - 1) == 0)) {
				0
			} else {
				(((x - 1) - 1) + fun((((x - 1) - 1) - 1)))
			}
			)
		}
		)
	}



main = \ ->
	println(1)

