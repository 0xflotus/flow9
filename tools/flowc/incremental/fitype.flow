export {
	// This mirrors fctype, except we get rid of the stuff that is not required

	// Types as they are expressed in flow programs, that programmers understand
	FiType ::= FiTypeArray, FiTypeFunction, FiTypeRef, FiTypeParameter,
		FiTypeBool, FiTypeInt, FiTypeDouble, FiTypeString, FiTypeFlow, 
		FiTypeVoid, FiTypeNative, FiTypeName;

		FiTypeArray(t : FiType);

		FiTypeFunction(args : [FiFunArg], returnType : FiType);
			FiFunArg(name : string, type : FiType);

		FiTypeRef(t : FiType);

		FiTypeParameter(n : string);	// ?, ?? and so on

		FiTypeBool();
		FiTypeInt();
		FiTypeDouble();
		FiTypeString();
		FiTypeFlow();
		FiTypeVoid();
		FiTypeNative();

		FiTypeName(name : string, typeparameters : [FiType]);

	// typars is when a type is instantiated

	FiStructOrUnion ::= FiTypeStruct, FiTypeUnion;

	FiTypeStruct(name : string, typars : [FiType], args : [FiStructArg], start : int);
		FiStructArg(name : string, type : FiType, ismutable : bool);
	FiTypeUnion(name : string, typeparameters : [FiType], typenames : [FiTypeName], start : int);

	dummyFiTypeStruct = FiTypeStruct("", [], [], 0);
}
