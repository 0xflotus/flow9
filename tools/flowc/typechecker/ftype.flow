import tools/flowc/fctypeenv;

export {
	FType ::=
		FBasicType, FFlow, FTypeVar, FTypePar, FFunction, FUnion, FUnnamedUnion, FStruct, FArray, FRef,
		FFields, FBounded, FTopBottom;

		FBasicType(t : FcBaseType);
		FFlow();
		FTypeVar(id : int);
		FTypePar(id : string);
		FFunction(args : [FType], rt : FType);
		FArray(type : FType);
		FRef(read : FType, write : FType);

		FUnion(name : string, typars : [FType]);
		FStruct(name : string, typars : [FType]);

		// For unnamed structs, we have this dude. We keep a set of structs that have been excluded.
		// Also, we keep a set of struct/union names we have seen in the vicinity, without being able
		// to tell whether they are the final ones.
		FFields(fields : [FField], seenNames : Set<string>, excluded : Set<string>);

			FField(name : string, type : FType, access : FFieldGetSet);
				FFieldGetSet ::= FGetField, FSetField;
					FGetField();
					FSetField();

		// For unnamed unions, we have this dude.
		FUnnamedUnion(types : [FType]);

		FBounded(lower : FType, upper : FType);

		// In bounds, unknown dude
		FTopBottom();

	FEnv(
		// The normal environment
		env : FcTypeEnv,

		// The tyvar id group
		tyvarIdGroup : IdGroup,

		// The verbosity level for debugging
		verbose : int,

		tyvars : Tree<int, FType>,

		// To avoid infinite recursion, we keep track of what expectations we have seen
		seen : Tree<Triple<FType, FUnification, FType>, FType>,

		// Unifications, joins, intersections
		tyvarDeps : Tree<FType, [FUnifyType]>
	);

	FUnifyType(kind : FUnification, type : FType);

	FEnvType(env : FEnv, type : FType);
	FEnvTypes(env : FEnv, types : [FType]);

	FUnification ::= FUnifyLeft, FGrowRight, FReduceLeft, FUnifyRight;
		// Makes sure the left is contained in the right, but we should return the new left hand side,
		// with the rule that we are allowed to increase the left hand side towards the right.
		FUnifyLeft();

		// Makes sure the left is contained in the right, but we should return the new right hand side,
		// with the rule that we are allowed to decrease the right hand side towards the left.
		FUnifyRight();

		// In the mode, we should increase the right hand side to accommodate the left hand side
		FGrowRight();

		// In this mode, we should reduce the left hand side so that it obeys the right hand side.
		FReduceLeft();
}
