import tools/flowc/typechecker2/gtype;
import tools/flowc/typechecker2/gsubtype_graph;
import tools/flowc/debug;

export {
	// When we have siblings in upper or lower bounds, there is a relation
	// between those types, but it is not obvious what way. This one
	// will unify in whatever direction we think is safe
	gunifySiblings(env : GEnv, unify : (GEnv, GType, GType) -> GEnv, t1 : GType, t2 : GType, lower : bool) -> GEnv;
}

gunifySiblings(env : GEnv, unify : (GEnv, GType, GType) -> GEnv, t1 : GType, t2 : GType, lower : bool) -> GEnv {
	def = \direction -> {
		if (direction) {
			// OK, the first has to be lowest
			unify(env, t1, t2);
		} else {
			// OK, the second has to be highest
			unify(env, t2, t1);
		}
	}
	switch (t1) {
		GBasicType(__): unify(env, t1, t2);
		GFlow(): def(lower);
		GTypePar(id1): unify(env, t1, t2);
		GFunction(args1, rt1): {
			switch (t2) {
				GFlow(): def(!lower);
				GTypeVar(id2): def(lower);
				GFunction(args2, rt2): {
					if (isGSubType(env.subtypes, t1, t2)) {
						def(lower);
					} else if (isGSubType(env.subtypes, t2, t1)) {
						def(!lower);
					} else {
						// Nothing to do.
						env;
					}
				}
				default: env;
			}
		}
		GArray(type1): switch (t2) {
				GFlow(): def(!lower);
				GTypeVar(id2): def(lower);
				GArray(type2): gunifySiblings(env, unify, type1, type2, lower);
				default: env;
		}
		GRef(type1): switch (t2) {
				GFlow(): def(!lower);
				GTypeVar(id2): def(lower);
				GRef(type2): gunifySiblings(env, unify, type1, type2, lower);
				default: env;
		}
		GTypeVar(id1): switch (t2) {
				GFlow(): def(!lower);
				GTypeVar(id2): env; // Nothing much to do.
				default: def(!lower);
		}
		GSubType(expr1): switch (t2) {
			GFlow(): def(!lower);
			GTypeVar(id2): def(lower);
			GSubType(expr2): {
				if (isGSubType(env.subtypes, t1, t2)) {
					printIndent(env.env, "Unify siblings t1 c= t2");
					res = def(!lower);
					printDedent(env.env, "Unify siblings");
					res;
				} else if (isGSubType(env.subtypes, t2, t1)) {
					printIndent(env.env, "Unify siblings t2 c= t1");
					res = def(lower);
					printDedent(env.env, "Unify siblings");
					res;
				} else {
					// Nothing to do.
					env;
				}
			}
			default: env;
		}
	}
}
