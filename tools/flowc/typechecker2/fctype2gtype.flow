import tools/flowc/typechecker2/gtype;

export {
	fctype2gtype(env : FcTypeEnv, tyvarIdGroup : IdGroup, type : FcType) -> GType;
}

fctype2gtype(env : FcTypeEnv, tyvarIdGroup : IdGroup, type : FcType) -> GType {
	ni = FcInfo2(0, 0);
	switch (type) {
		FcTypeVoid(i): GBasicType(FcTypeVoid(ni));
		FcTypeBool(i): GBasicType(FcTypeBool(ni));
		FcTypeInt(i): GBasicType(FcTypeInt(ni));
		FcTypeDouble(i): GBasicType(FcTypeDouble(ni));
		FcTypeString(i): GBasicType(FcTypeString(ni));
		FcTypeNative(i): GBasicType(FcTypeNative(ni));
		FcTypeFlow(i): GFlow();
		FcTypeArray(t, __): GArray(fctype2gtype(env, tyvarIdGroup, t));
		FcTypeRef(t, __): GRef(fctype2gtype(env, tyvarIdGroup, t));
		FcTypeParameter(n, i): GTypePar(n);
		FcTypeVar(id, i): GTypeVar(id);
		FcTypeName(id, tp, __): GSubType(GNamed(id, fctypes2gtypes(env, tyvarIdGroup, tp)));
		FcTypeStruct(name, tps, args, info): {
			if (name == "") {
				n = length(args);
				if (n == 0) {
					GSubType(GTopBottom());
				} else if (n == 1) {
					GSubType(GNamed(args[0].name, [fctype2gtype(env, tyvarIdGroup, args[0].type)]));
				} else {
					// These are fields it needs to have
					carg = \arg -> {
						GField(arg.name, fctype2gtype(env, tyvarIdGroup, arg.type))
					}
					GSubType(GAnd(map(args, carg)));
				}
			} else {
				GSubType(GNamed(name, fctypes2gtypes(env, tyvarIdGroup, tps)));
			}
		}
		FcTypeUnion(n, tps, names, __): {
			if (n == "") {
				// Unnamed union
				types : [GType] = fctypes2gtypes(env, tyvarIdGroup, names);
				subtypes : [GSubTypeExpr] = filtermap(types, \t -> switch (t) {
					GSubType(e): Some(e);
					default: None();
				});
				if (length(subtypes) == 1) {
					GSubType(subtypes[0])
				} else {
					GSubType(GOr(subtypes))
				}
			} else {
				GSubType(GNamed(n, fctypes2gtypes(env, tyvarIdGroup, tps)));
			}
		}
		FcTypeFunction(args, rt, __): {
			GFunction(map(args, \a -> fctype2gtype(env, tyvarIdGroup, a.type)), fctype2gtype(env, tyvarIdGroup, rt));
		}
	}
}

fctypes2gtypes(env : FcTypeEnv, tyvarIdGroup : IdGroup, types : [FcType]) -> [GType] {
	map(types, \t -> fctype2gtype(env, tyvarIdGroup, t));
}
