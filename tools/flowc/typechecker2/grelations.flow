import tools/flowc/typechecker2/gtype;
import tools/flowc/typechecker2/gtype_util;
import ds/treeutils;

export {
	// This exposes the unifications we need to consider
	makeGRelations() -> GRelations;

	addGRelation(env : GEnv, r : GRelations, lower : GType, upper : GType, pos : int) -> GRelations;

	getGUpperRelations(r : GRelations, from : GType) -> Set<GType>;
	getGLowerRelations(r : GRelations, from : GType) -> Set<GType>;
	getGRelationPositions(r : GRelations, from : GType) -> Set<int>;

	transitiveGUpperRelations(r : GRelations, from : GType, seen : Set<GType>) ->  Set<GType>;
	transitiveGLowerRelations(r : GRelations, from : GType, seen : Set<GType>) ->  Set<GType>;

	enqueueGTyvar(env : GEnv, q : Set<GQueueItem>, tyvarid : int) -> Set<GQueueItem>;
	enqueueGTyvarAtStage(env : GEnv, q : Set<GQueueItem>, tyvarid : int, stage : int) -> Set<GQueueItem>;

	makeGQueueItem(env : GEnv, tyvarid : int, stage : int) -> GQueueItem;

	// We have some types. Requeue all tyvars connected to those types
	enqueueAdjacentGTyvars(env : GEnv, types : Set<GType>) -> GEnv;

	gpriority2string(p : GPriority) -> string;

	// Add .dot output to help debug these graphs
	saveGDot(env : GEnv, name : string) -> void;

}

makeGRelations() -> GRelations {
	GRelations(makeTree(), makeTree(), makeTree(), makeSet(), makeTree());
}
 
addGRelation(env : GEnv, r : GRelations, from : GType, to : GType, pos : int) -> GRelations {
	if (containsMultimap(r.uppers, from, to)) r
	else {
		// Reset the queue for these guys
		// OK, here we have to transitively visit all of these people
		// and let them know they have to be updated in the queue
		queue = fold([from, to], r.tyvarQueue, \acc, type -> {
			switch (type) {
				GTypeVar(tyvarid): {
					// This tyvar is reset back to priority 0
					enqueueGTyvar(env, acc, tyvarid)
				}
				default: acc;
			}
		});

		updateDeps = \deps : Tree<int, Set<GType>>, type : GType -> {
			childTyvars = collectChildGTyvars(env, type, makeSet());
			foldSet(childTyvars, deps, \acc, tv -> {
				insertMultimap(acc, tv, type)
			})
		}
		fromDeps = updateDeps(r.parentDeps, from);
		toDeps = updateDeps(fromDeps, to);

		GRelations(
			insertMultimap(r.uppers, from, to),
			insertMultimap(r.lowers, to, from),
			insertMultimap(
				insertMultimap(r.positions, to, pos),
				from, pos
			),
			queue,
			toDeps
		);
	}
}


collectChildGTyvars(env : GEnv, gtype : GType, acc : Set<int>) -> Set<int> {
	switch (gtype) {
		GBasicType(t): acc;
		GFlow(): acc;
		GTypePar(id): acc;
		GFunction(args, rt): {
			extractImmediateGTypeVars(env, arrayPush(args, rt), acc);
		}
		GArray(type): extractImmediateGTypeVar(env, type, acc);
		GRef(type): extractImmediateGTypeVar(env, type, acc);
		GTypeVar(id): {
			mtype = lookupTree(env.tyvars, id);
			switch (mtype) {
				None(): acc;
				Some(t): collectChildGTyvars(env, t, acc);
			}
		}
		GNamed(name, typars): extractImmediateGTypeVars(env, typars, acc);
		GField(name, type): extractImmediateGTypeVar(env, type, acc);
	}
}

extractImmediateGTypeVars(env : GEnv, types : [GType], acc: Set<int>) -> Set<int> {
	fold(types, acc, \acc2, type -> extractImmediateGTypeVar(env, type, acc2))
}

extractImmediateGTypeVar(env : GEnv, type : GType, acc : Set<int>) -> Set<int> {
	switch (type) {
		GTypeVar(tv): {
			if (containsKeyTree(env.tyvars, tv)) acc
			else insertSet(acc, tv)
		}
		default: acc;
	}
}

getGUpperRelations(r : GRelations, from : GType) -> Set<GType> {
	lookupMultimap(r.uppers, from);
}

getGLowerRelations(r : GRelations, from : GType) -> Set<GType> {
	lookupMultimap(r.lowers, from);
}

getGRelationPositions(r : GRelations, from : GType) -> Set<int> {
	lookupMultimap(r.positions, from);
}

transitiveGUpperRelations(r : GRelations, from : GType, acc : Set<GType>) -> Set<GType> {
	if (containsSet(acc, from)) {
		acc
	} else {
		uppers = getGUpperRelations(r, from);
		nacc = insertSet(acc, from);
		foldSet(uppers, nacc, \acc2, edge -> {
			transitiveGUpperRelations(r, edge, acc2)
		});
	}
}

transitiveGLowerRelations(r : GRelations, from : GType, acc : Set<GType>) -> Set<GType> {
	if (containsSet(acc, from)) {
		acc
	} else {
		lowers = getGLowerRelations(r, from);
		nacc = insertSet(acc, from);
		foldSet(lowers, nacc, \acc2, edge -> {
			transitiveGLowerRelations(r, edge, acc2)
		});
	}
}

enqueueGTyvar(env : GEnv, q : Set<GQueueItem>, tyvarid : int) -> Set<GQueueItem> {
	insertSet(q, makeGQueueItem(env, tyvarid, 0));
}

enqueueGTyvarAtStage(env : GEnv, q : Set<GQueueItem>, tyvarid : int, stage : int) -> Set<GQueueItem> {
	insertSet(q, makeGQueueItem(env, tyvarid, stage));
}

makeGQueueItem(env : GEnv, tyvarid : int, stage : int) -> GQueueItem {
	type = GTypeVar(tyvarid);
	lowers = lookupMultimap(env.grelations.lowers, type);
	uppers = lookupMultimap(env.grelations.uppers, type);

	prio = GPriority(0, 0, 0, 0, 0);
	lowerPrio = foldSet(lowers, prio, \acc, lt -> addGtypePriority(env, acc, lt));
	upperPrio = foldSet(uppers, lowerPrio, \acc, lt -> addGtypePriority(env, acc, lt));

	GQueueItem(stage, upperPrio, tyvarid);
}

enqueueAdjacentGTyvars(env : GEnv, types : Set<GType>) -> GEnv {
	nqueue = foldSet(types, env.grelations.tyvarQueue, \acc, type -> {
		ups = getGUpperRelations(env.grelations, type);
		lows = getGLowerRelations(env.grelations, type);
		neighbours = mergeSets(ups, lows);
		foldSet(neighbours, acc, \acc2, t -> {
			switch (t) {
				GTypeVar(tv): {
					if (containsKeyTree(env.tyvars, tv)) acc2
					else {
						enqueueGTyvar(env, acc2, tv)
					}
				}
				default: acc2;
			}
		});
	});
	GEnv(
		env with
		grelations =
			GRelations(env.grelations with
				tyvarQueue = nqueue
			)
	);
}

addGtypePriority(env : GEnv, acc : GPriority, type : GType) -> GPriority {
	switch (type) {
		GBasicType(t): GPriority(acc with fixed = acc.fixed + 1);
		GTypePar(id): GPriority(acc with fixed = acc.fixed + 1);
		GFunction(args, rt): GPriority(acc with fixed = acc.fixed + 1);
		GArray(__): GPriority(acc with fixed = acc.fixed + 1);
		GRef(__): GPriority(acc with fixed = acc.fixed + 1);
		GFlow(): GPriority(acc with flows = acc.flows + 1);
		GTypeVar(id): {
			bound = lookupTree(env.tyvars, id);
			switch (bound) {
				None(): GPriority(acc with unbound = acc.unbound + 1);
				Some(bt): addGtypePriority(env, acc, bt);
			}
		}
		GNamed(name, typars): GPriority(acc with named = acc.named + 1);
		GField(name, __): GPriority(acc with fields = acc.fields + 1);
	}
}

gpriority2string(p : GPriority) -> string {
	disp = \s, i -> s + ": " + i2s(i) + " ";
	disp("unbound", p.unbound)
	+ disp("fields", p.fields)
	+ disp("named", p.named)
	+ disp("flows", p.flows)
	+ disp("fixed", p.fixed)
}


saveGDot(env : GEnv, name : string) -> void {
	dot = grelations2dot(env, env.grelations);
	setFileContent(name + ".dot", dot);

	{}
}

grelations2dot(env : GEnv, g : GRelations) -> string {
	order = foldi(env.tyvarOrder, makeTree(), \i, acc, tv -> {
		setTree(acc, tv, i)
	});

	type2node = \type, extra -> {
		"\"" + gtype2string(env, type) + extra + "\""
	}
	types = foldTree(g.uppers, makeSet(), \k, v, acc -> {
		insertSet(acc, k);
	});
	nodesDump = foldSet(types, "", \acc, type -> {
		tvorder = switch (type) {
			GTypeVar(id): lookupTreeDef(order, id, -1);
			default: -1;
		}
		extra = (if (tvorder != -1) " " + i2s(tvorder) else "");
		
		text0 = type2node(type, "");
		text1 = type2node(type, extra);
		acc + text0 + " [label=" + text1 + "];\n"
	});

	// Tyvar deps
	tyvarDeps = foldTree(g.parentDeps, "", \from : int, tos : Set<GType>, acc -> {
		foldSet(tos, acc, \acc1, to -> {
			acc1 + type2node(GTypeVar(from), "") + " -> " + type2node(to, "") + " [color=grey];\n" 
		})
	});

	edgesDump = foldTree(g.uppers, tyvarDeps, \from, tos, acc -> {
		foldSet(tos, acc, \acc1, to -> {
			acc1 + type2node(from, "") + " -> " + type2node(to, "") + ";\n"
		});
	});

	"digraph graphname {\n" +
		nodesDump + "\n" +
		edgesDump + "\n" +
	"}"
}

