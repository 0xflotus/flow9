import tools/flowc/typechecker2/gtype;
import tools/flowc/typechecker2/gtype_util;
import ds/treeutils;

export {
	// This exposes the unifications we need to consider
	makeGRelations() -> GRelations;

	addGRelation(env : GEnv, r : GRelations, lower : GType, upper : GType, pos : int) -> GRelations;

	getGUpperRelations(r : GRelations, from : GType) -> Set<GType>;
	getGLowerRelations(r : GRelations, from : GType) -> Set<GType>;
	getGRelationPositions(r : GRelations, from : GType) -> Set<int>;

	transitiveGUpperRelations(r : GRelations, from : GType, seen : Set<GType>) ->  Set<GType>;
	transitiveGLowerRelations(r : GRelations, from : GType, seen : Set<GType>) ->  Set<GType>;

	enqueueGTyvar(env : GEnv, q : Set<GQueueItem>, tyvarid : int) -> Set<GQueueItem>;
	enqueueGTyvarAtStage(env : GEnv, q : Set<GQueueItem>, tyvarid : int, stage : int) -> Set<GQueueItem>;

	makeGQueueItem(env : GEnv, tyvarid : int, stage : int) -> GQueueItem;

	// Add .dot output to help debug these graphs
	saveGDot(env : GEnv, name : string) -> void;

}

makeGRelations() -> GRelations {
	GRelations(makeTree(), makeTree(), makeTree(), makeSet());
}
 
addGRelation(env : GEnv, r : GRelations, from : GType, to : GType, pos : int) -> GRelations {
	if (containsMultimap(r.uppers, from, to)) r
	else {
		// Reset the queue for these guys
		// OK, here we have to transitively visit all of these people
		// and let them know they have to be updated in the queue
		queue = fold([from, to], r.tyvarQueue, \acc, type -> {
			switch (type) {
				GTypeVar(tyvarid): {
					// This tyvar is reset back to priority 0
					enqueueGTyvar(env, acc, tyvarid)
				}
				default: acc;
			}
		});

		GRelations(
			insertMultimap(r.uppers, from, to),
			insertMultimap(r.lowers, to, from),
			insertMultimap(
				insertMultimap(r.positions, to, pos),
				from, pos
			),
			queue
		);
	}
}

getGUpperRelations(r : GRelations, from : GType) -> Set<GType> {
	lookupMultimap(r.uppers, from);
}

getGLowerRelations(r : GRelations, from : GType) -> Set<GType> {
	lookupMultimap(r.lowers, from);
}

getGRelationPositions(r : GRelations, from : GType) -> Set<int> {
	lookupMultimap(r.positions, from);
}

transitiveGUpperRelations(r : GRelations, from : GType, acc : Set<GType>) -> Set<GType> {
	if (containsSet(acc, from)) {
		acc
	} else {
		uppers = getGUpperRelations(r, from);
		nacc = insertSet(acc, from);
		foldSet(uppers, nacc, \acc2, edge -> {
			transitiveGUpperRelations(r, edge, acc2)
		});
	}
}

transitiveGLowerRelations(r : GRelations, from : GType, acc : Set<GType>) -> Set<GType> {
	if (containsSet(acc, from)) {
		acc
	} else {
		lowers = getGLowerRelations(r, from);
		nacc = insertSet(acc, from);
		foldSet(lowers, nacc, \acc2, edge -> {
			transitiveGLowerRelations(r, edge, acc2)
		});
	}
}

enqueueGTyvar(env : GEnv, q : Set<GQueueItem>, tyvarid : int) -> Set<GQueueItem> {
	insertSet(q, makeGQueueItem(env, tyvarid, 0));
}

enqueueGTyvarAtStage(env : GEnv, q : Set<GQueueItem>, tyvarid : int, stage : int) -> Set<GQueueItem> {
	insertSet(q, makeGQueueItem(env, tyvarid, stage));
}

makeGQueueItem(env : GEnv, tyvarid : int, stage : int) -> GQueueItem {
	type = GTypeVar(tyvarid);
	lowers = lookupMultimap(env.grelations.lowers, type);
	uppers = lookupMultimap(env.grelations.uppers, type);

	lowerSum = foldSet(lowers, 5, \acc, lt -> min(acc, gtypePriority(env, lt)));
	upperSum = foldSet(uppers, 5, \acc, lt -> min(acc, gtypePriority(env, lt)));
	priority = lowerSum + upperSum;

	if (false) {
		println("Tyvar " + i2s(tyvarid) + " gets " + i2s(stage) + ", " + i2s(priority) + " with " 
			+ superglue(set2array(lowers), \t -> gtype2string(env, t), ", " )
			+ " and "
			+ superglue(set2array(uppers), \t -> gtype2string(env, t), ", " )
		);
	}

	GQueueItem(stage, priority, tyvarid);
}

gtypePriority(env : GEnv, type : GType) -> int {
	switch (type) {
		GBasicType(t): 0;
		GTypePar(id): 0;
		GFunction(args, rt): 0;
		GArray(__): 0;
		GRef(__): 0;
		GFlow(): 1;
		GTypeVar(id): {
			bound = lookupTree(env.tyvars, id);
			switch (bound) {
				None(): 4;
				Some(bt): gtypePriority(env, bt);
			}
		}
		GNamed(name, typars): 2;
		GField(name, __): 3;
	}
}

saveGDot(env : GEnv, name : string) -> void {
	dot = grelations2dot(env, env.grelations);
	setFileContent(name + ".dot", dot);

	{}
}

grelations2dot(env : GEnv, g : GRelations) -> string {
	type2node = \type -> {
		"\"" + gtype2string(env, type) + "\""
	}
	types = foldTree(g.uppers, makeSet(), \k, v, acc -> {
		insertSet(acc, k);
	});
	nodesDump = foldSet(types, "", \acc, type -> {
		text = type2node(type);
		acc + text + " [label=" + text + "];\n"
	});
	edgesDump = foldTree(g.uppers, "", \from, tos, acc -> {
		foldSet(tos, acc, \acc1, to -> {
			acc1 + type2node(from) + " -> " + type2node(to) + ";\n"
		});
	});

	"digraph graphname {\n" +
		nodesDump + "\n" +
		edgesDump + "\n" +
	"}"
}

