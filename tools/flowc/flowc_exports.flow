import ds/bitvector;
import ds/hashmap;
import stringmath;
import hash;
import tools/flowc/manipulation/freevars;
import tools/flowc/fctypeenv;
import tools/flowc/flowc_helpers;
import tools/flowc/incremental/fiprettyprint;
import tools/flowc/incremental/fi_helpers;

export {
	fcCheckImportsExports(prog : FiProgram, onError : (FcError) -> void) -> void;
}

ProgramImportsExportsAcc(
	prog : FiProgram,

	// All exported global names in the programm.
	allExportedNames : [string],
	
	// Mapping from exported global names to their indexes in 'allExportedNames'.
	name2index : HashMap<string, int>,

	// Cumulative imported names, which are available at given module.
	// Strictly speaking, we store the bits of presence/non-presence
	// of some global name from 'allExportedNames' in the BitVector, corresponding to the module.
	moduleImports : Tree<string, BitVector>,

	// Used as a default value to speedup processing.
	emptyBitVector : BitVector
);

timer1 = ref 0.0;

fcCheckImportsExports(prog : FiProgram, onError : (FcError) -> void) -> void {
	time_start = timestamp();
	allNames = foldTree(prog.modules, makeSet(),
		\name, module, acc -> fold(module.exports, acc, \a, n -> insertSet(a, n))
	);
	allExportedNames = set2array(allNames);
	fcPrintln("TOTAL NUM OF NAMES: " + i2s(length(allExportedNames)));
	name2index = foldi(allExportedNames, makeHashMap(fastHashString), \i, acc, name -> setHashMap(acc, name, i));
	progAcc = ProgramImportsExportsAcc(
		prog,
		allExportedNames,
		name2index,
		makeTree(),
		makeEmptyBitVector(length(allExportedNames))
	);
	fold(prog.traversal, progAcc,
		\acc, name -> {
			module = lookupTreeDef(prog.modules, name, dummyFiModule);
			fcCheckModuleImportsExports(acc, module,
				\e, s -> onError(FcError(e, [FcPosition(module.fileinfo.flowfile, s, s)]))
			)
		}
	);
	fcPrintln("BIT VECTORS ARE CREATED IN: " + d2st(^timer1 / 1000.0, 2) + "s\n");
	fcPrintln("EXPORTS CHECKED IN: " + d2st((timestamp() - time_start) / 1000.0, 2) + "s\n");
	{ }
}

fcCheckModuleImportsExports(progAcc : ProgramImportsExportsAcc, module : FiModule, onError : (string, int) -> void) -> ProgramImportsExportsAcc {
	exportsSet = buildSet(module.exports);
	time_start = timestamp();
	thisModuleImports = bitVectorOrA(
			concat(
				[makeBitVector(length(progAcc.allExportedNames),
					\i -> containsSet(exportsSet, progAcc.allExportedNames[i])
				)],
				map(module.imports, \imp -> lookupTreeDef(progAcc.moduleImports, imp.flowfile, progAcc.emptyBitVector)
			)
		)
	);
	timer1 := ^timer1 + timestamp() - time_start;

	acc = ModuleImportsExportsAcc(
		progAcc,
		thisModuleImports,
		fold(module.unions,
			fold(module.structs, makeSet(),
				\acc, s -> insertSet(acc, s.name)
			),
			\acc, u -> insertSet(acc, u.name)
		),
		fold(module.structs,
			fold(module.unions,
				makeTree(),
				\acc : Tree<string, FiStructOrUnion>, union -> setTree(acc, union.name, union)
			),
			\acc, struct -> setTree(acc, struct.name, struct)
		),
		onError,
		module.fileinfo.flowfile
	);
	locals = fold(module.natives, buildSet(module.initOrder), \ac, n -> insertSet(ac, n.name));
	iter(module.functions, \f -> fcCheckExprImportsExports(acc, locals, f.lambda));
	iter(module.globalVars, \g -> fcCheckExprImportsExports(acc, locals, g.value));
	iter(module.natives, \n -> fcCheckExprImportsExports(acc, locals, n.fallbackLambda));

	ProgramImportsExportsAcc(
		progAcc.prog,
		progAcc.allExportedNames,
		progAcc.name2index,
		setTree(
			progAcc.moduleImports,
			module.fileinfo.flowfile,
			thisModuleImports
		),
		progAcc.emptyBitVector,
	)
}

ModuleImportsExportsAcc(
	progAcc : ProgramImportsExportsAcc,
	bitVectorExports : BitVector,
	localTypeNames : Set<string>,
	moduleStructsUnions : Tree<string, FiStructOrUnion>,
	onError : (string, int) -> void,
	moduleName : string
);

fcCheckExprImportsExports(eacc : ModuleImportsExportsAcc, localNames : Set<string>, expr : FiExp) -> void {
	checkExprs = \es -> iter(es, \e -> fcCheckExprImportsExports(eacc, localNames, e));
	checkField = \field_name, e, start -> {
		switch (fiExpType(e)) {
			FiTypeName(type_name, __): {
				if (containsSet(eacc.localTypeNames, type_name) || fcCheckForExportsName(eacc, type_name)) {
					if (!fiEnsureFieldExists(eacc.progAcc.prog.names, eacc.moduleStructsUnions, field_name, type_name, \__ -> {}, eacc.moduleName, start)) {
						eacc.onError("Type '" + type_name + "' doesn't have field " + field_name, start);
					}
				} else {
					fcExportImportCheckError(eacc, "Type", type_name, start);
				}
			}
			default: {}
		}
	};
	switch (expr) {
		FiLambda(args, e, __, __):
			fcCheckExprImportsExports(eacc, fold(args, localNames, \acc, arg -> insertSet(acc, arg.name)), e);
		FiCall(f, es, __, __): {
			fcCheckExprImportsExports(eacc, localNames, f);
        	checkExprs(es);
		}
		FiVar(name, __, start):
			if (!containsSet(localNames, name) && !fcCheckForExportsName(eacc, name)) {
				fcExportImportCheckError(eacc, "Name", name, start);
			}
		FiLet(x, __, e1, e2, __, __): {
			fcCheckExprImportsExports(eacc, localNames, e1);
			fcCheckExprImportsExports(eacc, insertSet(localNames, x), e2);
		}
		FiIf(e1, e2, e3, __, __):
			checkExprs([e1, e2, e3]);
		FiSwitch(e, __, cs, __, __):{
			fcCheckExprImportsExports(eacc, localNames, e);
			iter(cs, \c -> {
				if (c.struct != "default" && !containsSet(eacc.localTypeNames, c.struct) && !fcCheckForExportsName(eacc, c.struct)) {
					fcExportImportCheckError(eacc, "Struct", c.struct, c.start);
				}
				fcCheckExprImportsExports(eacc, mergeSets(localNames, buildSet(c.argNames)), c.body)
			});
		}
		FiCast(e, __, __, __, __):
			fcCheckExprImportsExports(eacc, localNames, e);
		FiSeq(es, __, __):
			checkExprs(es);
		FiCallPrim(o, es, ty, start): {
			switch (o) {
				FcStructPrim(name): {
					if (!containsSet(eacc.localTypeNames, name) && !fcCheckForExportsName(eacc, name)) {
						fcExportImportCheckError(eacc, "Struct", name, start);
					}
				}
				FcFieldPrim(field_name):
					{} //checkField(field_name, es[0], start);
				FcSetMutablePrim(field_name): {
					{} //checkField(field_name, es[0], start);
				}
				FcCreateClosurePrim(structName, functionName): {
					if (!containsSet(eacc.localTypeNames, structName) && !fcCheckForExportsName(eacc, structName)) {
						fcExportImportCheckError(eacc, "Struct", structName, start);
					}
					if (!containsSet(eacc.localTypeNames, functionName) && !fcCheckForExportsName(eacc, functionName)) {
						fcExportImportCheckError(eacc, "Function", structName, start);
					}
				}
				default: {};
			}
			checkExprs(es);
		} 
		FiString(__, __):             {}; // here I would want to match simply on union FcConst
		FiBool(__, __):               {};
		FiDouble(__, __):             {};
		FiVoid(__):                   {};
		FiInt(__, __):                {};
        FiRequire(__, e, __, __):     fcCheckExprImportsExports(eacc, localNames, e);
        FiUnsafe(__, fb, __, __):     fcCheckExprImportsExports(eacc, localNames, fb);
	}
}

fcCheckForExportsName(eacc : ModuleImportsExportsAcc, name : string) -> bool {
	switch (lookupHashMap(eacc.progAcc.name2index, name)) {
		Some(nameInd): 
			switch (getBitVector(eacc.bitVectorExports, nameInd)) {
				Some(v): v;
				None(): false;
			}
		None(): false;
	}
}

fcExportImportCheckError(eacc : ModuleImportsExportsAcc, kind : string, name : string, start : int) -> void {
	firstLine = kind + " '" + name + "' is inaccessible";
	definitionModule = fiModuleWhereNameIsDefined(eacc.progAcc.prog.names, name);
	secondLine = if (definitionModule != "") {
		"add 'import " + definitionModule + ";' to the imports section"
	} else {
		"symbol '" + name + "' is not defined"
	}
	eacc.onError(firstLine + "\n" + secondLine, start)
}
