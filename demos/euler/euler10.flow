import runtime;
import ds/bitset;

/*
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.
*/

// TODO: If we had a "set all bits" in bitset, this could be improved.
// Alternatively, flip all bits.

// Erasthoses sieve
sieve(n : int, set : BitSet, onPrime : (int) -> void) -> void {
    if (n < set.bitcount) {
        if (either(getBitSet(set, n), false)) {
            // OK, this is a prime. Mark the rest
            clearFactors(n + n, n, set);
            onPrime(n);
        }
        sieve(n + 1, set, onPrime);
    }
}

clearFactors(n : int, step : int, set : BitSet) -> void {
    if (n < set.bitcount) {
        unsetBitSet(set, n);
        clearFactors(n + step, step, set);
    }
}

euler10(size : int) -> double {
    // OK, make a set filled with 1
    set = makeBitSet(size);
    fori(2, size, \i -> {
        setBitSet(set, i);
        {}
    });

    // Now, run the sieve and knock out factors, this way
    // finding primes
    primesum = ref 0.0;
    sieve(2, set, \prime -> {
        // This is called whenever we find a prime
        primesum := ^primesum + i2d(prime);
    });
    ^primesum;
}

main() {
    println(euler10(2000000)); // Correct: 142913828922
    quit(0);
}
